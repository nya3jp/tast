// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package testing

import (
	"fmt"
	"runtime"
	"strings"
)

var globalRegistry *Registry   // singleton, initialized on first use
var registrationErrors []error // singleton for errors encountered in Add* calls

// GlobalRegistry returns a global registry containing tests
// registered by calls to AddTest.
func GlobalRegistry() *Registry {
	if globalRegistry == nil {
		globalRegistry = NewRegistry()
	}
	return globalRegistry
}

// RegistrationErrors returns errors generated by calls to AddTest.
func RegistrationErrors() []error {
	return registrationErrors
}

// AddTest adds test t to the global registry.
func AddTest(t *Test) {
	if err := GlobalRegistry().AddTest(t); err != nil {
		file, line := realCaller()
		registrationErrors = append(registrationErrors, fmt.Errorf("%s:%d: %v", file, line, err))
	}
}

// AddTestInstance adds test case t to the global registry. This is only for
// testing purpose.
func AddTestInstance(t *TestInstance) {
	if err := GlobalRegistry().AddTestInstance(t); err != nil {
		file, line := realCaller()
		registrationErrors = append(registrationErrors, fmt.Errorf("%s:%d: %v", file, line, err))
	}
}

// AddService adds service s to the global registry.
func AddService(s *Service) {
	if err := GlobalRegistry().AddService(s); err != nil {
		file, line := realCaller()
		registrationErrors = append(registrationErrors, fmt.Errorf("%s:%d: %v", file, line, err))
	}
}

func realCaller() (file string, line int) {
	pc, file, line, _ := runtime.Caller(2)
	f := runtime.FuncForPC(pc)
	// When the function is being called from its public API in chromiumos/tast/testing,
	// dig one more stack frame to obtain the "real" caller.
	if strings.HasPrefix(f.Name(), "chromiumos/tast/testing.") {
		pc, file, line, _ = runtime.Caller(3)
	}
	return file, line
}

// SetGlobalRegistryForTesting temporarily sets reg as the global registry and clears registration errors.
// The caller must call the returned function later to restore the original registry and errors.
// This is intended to be used by unit tests that need to register tests in the global registry but don't
// want to affect subsequent unit tests.
func SetGlobalRegistryForTesting(reg *Registry) (restore func()) {
	origReg := globalRegistry
	origErrs := registrationErrors

	globalRegistry = reg
	registrationErrors = nil

	return func() {
		registrationErrors = origErrs
		globalRegistry = origReg
	}
}
