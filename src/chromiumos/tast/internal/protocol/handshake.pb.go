// Code generated by protoc-gen-go. DO NOT EDIT.
// source: handshake.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// HandshakeRequest contains parameters needed to initialize a gRPC server.
// The message is sent in a raw format since gRPC connection is not ready before
// handshake.
type HandshakeRequest struct {
	// Whether to initialize user-defined gRPC services.
	NeedUserServices     bool              `protobuf:"varint,1,opt,name=need_user_services,json=needUserServices,proto3" json:"need_user_services,omitempty"`
	BundleInitParams     *BundleInitParams `protobuf:"bytes,2,opt,name=bundle_init_params,json=bundleInitParams,proto3" json:"bundle_init_params,omitempty"`
	RunnerInitParams     *RunnerInitParams `protobuf:"bytes,3,opt,name=runner_init_params,json=runnerInitParams,proto3" json:"runner_init_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HandshakeRequest) Reset()         { *m = HandshakeRequest{} }
func (m *HandshakeRequest) String() string { return proto.CompactTextString(m) }
func (*HandshakeRequest) ProtoMessage()    {}
func (*HandshakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{0}
}

func (m *HandshakeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandshakeRequest.Unmarshal(m, b)
}
func (m *HandshakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandshakeRequest.Marshal(b, m, deterministic)
}
func (m *HandshakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandshakeRequest.Merge(m, src)
}
func (m *HandshakeRequest) XXX_Size() int {
	return xxx_messageInfo_HandshakeRequest.Size(m)
}
func (m *HandshakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HandshakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HandshakeRequest proto.InternalMessageInfo

func (m *HandshakeRequest) GetNeedUserServices() bool {
	if m != nil {
		return m.NeedUserServices
	}
	return false
}

func (m *HandshakeRequest) GetBundleInitParams() *BundleInitParams {
	if m != nil {
		return m.BundleInitParams
	}
	return nil
}

func (m *HandshakeRequest) GetRunnerInitParams() *RunnerInitParams {
	if m != nil {
		return m.RunnerInitParams
	}
	return nil
}

// HandshakeResponse is a response to an HandshakeRequest message.
// The message is sent in a raw format since gRPC connection is not ready before
// handshake.
type HandshakeResponse struct {
	// Set if an error occurred.
	Error                *HandshakeError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HandshakeResponse) Reset()         { *m = HandshakeResponse{} }
func (m *HandshakeResponse) String() string { return proto.CompactTextString(m) }
func (*HandshakeResponse) ProtoMessage()    {}
func (*HandshakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{1}
}

func (m *HandshakeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandshakeResponse.Unmarshal(m, b)
}
func (m *HandshakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandshakeResponse.Marshal(b, m, deterministic)
}
func (m *HandshakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandshakeResponse.Merge(m, src)
}
func (m *HandshakeResponse) XXX_Size() int {
	return xxx_messageInfo_HandshakeResponse.Size(m)
}
func (m *HandshakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HandshakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HandshakeResponse proto.InternalMessageInfo

func (m *HandshakeResponse) GetError() *HandshakeError {
	if m != nil {
		return m.Error
	}
	return nil
}

// HandshakeError describes a failed handshake result.
type HandshakeError struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HandshakeError) Reset()         { *m = HandshakeError{} }
func (m *HandshakeError) String() string { return proto.CompactTextString(m) }
func (*HandshakeError) ProtoMessage()    {}
func (*HandshakeError) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{2}
}

func (m *HandshakeError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HandshakeError.Unmarshal(m, b)
}
func (m *HandshakeError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HandshakeError.Marshal(b, m, deterministic)
}
func (m *HandshakeError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HandshakeError.Merge(m, src)
}
func (m *HandshakeError) XXX_Size() int {
	return xxx_messageInfo_HandshakeError.Size(m)
}
func (m *HandshakeError) XXX_DiscardUnknown() {
	xxx_messageInfo_HandshakeError.DiscardUnknown(m)
}

var xxx_messageInfo_HandshakeError proto.InternalMessageInfo

func (m *HandshakeError) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// BundleInitParams contains parameters needed to initialize bundles.
type BundleInitParams struct {
	// Runtime variables.
	Vars map[string]string `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// BundleConfigs represents all the bundles to run.
	BundleConfig         *BundleConfig `protobuf:"bytes,2,opt,name=bundle_config,json=bundleConfig,proto3" json:"bundle_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BundleInitParams) Reset()         { *m = BundleInitParams{} }
func (m *BundleInitParams) String() string { return proto.CompactTextString(m) }
func (*BundleInitParams) ProtoMessage()    {}
func (*BundleInitParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{3}
}

func (m *BundleInitParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BundleInitParams.Unmarshal(m, b)
}
func (m *BundleInitParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BundleInitParams.Marshal(b, m, deterministic)
}
func (m *BundleInitParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleInitParams.Merge(m, src)
}
func (m *BundleInitParams) XXX_Size() int {
	return xxx_messageInfo_BundleInitParams.Size(m)
}
func (m *BundleInitParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleInitParams.DiscardUnknown(m)
}

var xxx_messageInfo_BundleInitParams proto.InternalMessageInfo

func (m *BundleInitParams) GetVars() map[string]string {
	if m != nil {
		return m.Vars
	}
	return nil
}

func (m *BundleInitParams) GetBundleConfig() *BundleConfig {
	if m != nil {
		return m.BundleConfig
	}
	return nil
}

// RunnerInitParams contains information needed to initialize test runners.
type RunnerInitParams struct {
	// A file path glob that matches test bundle executables.
	// Example: "/usr/local/libexec/tast/bundles/local/*"
	BundleGlob           string   `protobuf:"bytes,1,opt,name=bundle_glob,json=bundleGlob,proto3" json:"bundle_glob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunnerInitParams) Reset()         { *m = RunnerInitParams{} }
func (m *RunnerInitParams) String() string { return proto.CompactTextString(m) }
func (*RunnerInitParams) ProtoMessage()    {}
func (*RunnerInitParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{4}
}

func (m *RunnerInitParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunnerInitParams.Unmarshal(m, b)
}
func (m *RunnerInitParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunnerInitParams.Marshal(b, m, deterministic)
}
func (m *RunnerInitParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerInitParams.Merge(m, src)
}
func (m *RunnerInitParams) XXX_Size() int {
	return xxx_messageInfo_RunnerInitParams.Size(m)
}
func (m *RunnerInitParams) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerInitParams.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerInitParams proto.InternalMessageInfo

func (m *RunnerInitParams) GetBundleGlob() string {
	if m != nil {
		return m.BundleGlob
	}
	return ""
}

type BundleConfig struct {
	// PrimaryTarget is the target device for remote tests.
	PrimaryTarget        *TargetDevice         `protobuf:"bytes,1,opt,name=primary_target,json=primaryTarget,proto3" json:"primary_target,omitempty"`
	CompanionDuts        map[string]*DUTConfig `protobuf:"bytes,2,rep,name=companion_duts,json=companionDuts,proto3" json:"companion_duts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetaTestConfig       *MetaTestConfig       `protobuf:"bytes,3,opt,name=meta_test_config,json=metaTestConfig,proto3" json:"meta_test_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BundleConfig) Reset()         { *m = BundleConfig{} }
func (m *BundleConfig) String() string { return proto.CompactTextString(m) }
func (*BundleConfig) ProtoMessage()    {}
func (*BundleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{5}
}

func (m *BundleConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BundleConfig.Unmarshal(m, b)
}
func (m *BundleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BundleConfig.Marshal(b, m, deterministic)
}
func (m *BundleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleConfig.Merge(m, src)
}
func (m *BundleConfig) XXX_Size() int {
	return xxx_messageInfo_BundleConfig.Size(m)
}
func (m *BundleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BundleConfig proto.InternalMessageInfo

func (m *BundleConfig) GetPrimaryTarget() *TargetDevice {
	if m != nil {
		return m.PrimaryTarget
	}
	return nil
}

func (m *BundleConfig) GetCompanionDuts() map[string]*DUTConfig {
	if m != nil {
		return m.CompanionDuts
	}
	return nil
}

func (m *BundleConfig) GetMetaTestConfig() *MetaTestConfig {
	if m != nil {
		return m.MetaTestConfig
	}
	return nil
}

// TargetDevice represents a local bundle on which remote tests invoke services.
type TargetDevice struct {
	// DutConfig describes the DUT containing local bundles.
	DutConfig *DUTConfig `protobuf:"bytes,1,opt,name=dut_config,json=dutConfig,proto3" json:"dut_config,omitempty"`
	// BundleDir represents the directory on which the target bundle exists.
	BundleDir            string   `protobuf:"bytes,2,opt,name=bundle_dir,json=bundleDir,proto3" json:"bundle_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetDevice) Reset()         { *m = TargetDevice{} }
func (m *TargetDevice) String() string { return proto.CompactTextString(m) }
func (*TargetDevice) ProtoMessage()    {}
func (*TargetDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{6}
}

func (m *TargetDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetDevice.Unmarshal(m, b)
}
func (m *TargetDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetDevice.Marshal(b, m, deterministic)
}
func (m *TargetDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetDevice.Merge(m, src)
}
func (m *TargetDevice) XXX_Size() int {
	return xxx_messageInfo_TargetDevice.Size(m)
}
func (m *TargetDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetDevice.DiscardUnknown(m)
}

var xxx_messageInfo_TargetDevice proto.InternalMessageInfo

func (m *TargetDevice) GetDutConfig() *DUTConfig {
	if m != nil {
		return m.DutConfig
	}
	return nil
}

func (m *TargetDevice) GetBundleDir() string {
	if m != nil {
		return m.BundleDir
	}
	return ""
}

// DUTConfig describes a DUT.
type DUTConfig struct {
	// SshConfig contains information needed to connect to the DUT via SSH.
	SshConfig *SSHConfig `protobuf:"bytes,1,opt,name=ssh_config,json=sshConfig,proto3" json:"ssh_config,omitempty"`
	// TlwName contains the name of the DUT recognized by the TLW service.
	// This must be set when TLW API is used.
	TlwName              string   `protobuf:"bytes,2,opt,name=tlw_name,json=tlwName,proto3" json:"tlw_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DUTConfig) Reset()         { *m = DUTConfig{} }
func (m *DUTConfig) String() string { return proto.CompactTextString(m) }
func (*DUTConfig) ProtoMessage()    {}
func (*DUTConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{7}
}

func (m *DUTConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DUTConfig.Unmarshal(m, b)
}
func (m *DUTConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DUTConfig.Marshal(b, m, deterministic)
}
func (m *DUTConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DUTConfig.Merge(m, src)
}
func (m *DUTConfig) XXX_Size() int {
	return xxx_messageInfo_DUTConfig.Size(m)
}
func (m *DUTConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DUTConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DUTConfig proto.InternalMessageInfo

func (m *DUTConfig) GetSshConfig() *SSHConfig {
	if m != nil {
		return m.SshConfig
	}
	return nil
}

func (m *DUTConfig) GetTlwName() string {
	if m != nil {
		return m.TlwName
	}
	return ""
}

// SSHConfig contains information needed to connect to the DUT via SSH.
type SSHConfig struct {
	// ConnectionSpec is a connection spec as [<user>@]host[:<port>].
	ConnectionSpec string `protobuf:"bytes,1,opt,name=connection_spec,json=connectionSpec,proto3" json:"connection_spec,omitempty"`
	// KeyFile is a path to the SSH private key to use to connect to the target.
	KeyFile string `protobuf:"bytes,2,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// KeyDir is a path to the directory containing SSH private keys
	// (typically $HOME/.ssh).
	KeyDir               string   `protobuf:"bytes,3,opt,name=key_dir,json=keyDir,proto3" json:"key_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSHConfig) Reset()         { *m = SSHConfig{} }
func (m *SSHConfig) String() string { return proto.CompactTextString(m) }
func (*SSHConfig) ProtoMessage()    {}
func (*SSHConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{8}
}

func (m *SSHConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSHConfig.Unmarshal(m, b)
}
func (m *SSHConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSHConfig.Marshal(b, m, deterministic)
}
func (m *SSHConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHConfig.Merge(m, src)
}
func (m *SSHConfig) XXX_Size() int {
	return xxx_messageInfo_SSHConfig.Size(m)
}
func (m *SSHConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SSHConfig proto.InternalMessageInfo

func (m *SSHConfig) GetConnectionSpec() string {
	if m != nil {
		return m.ConnectionSpec
	}
	return ""
}

func (m *SSHConfig) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *SSHConfig) GetKeyDir() string {
	if m != nil {
		return m.KeyDir
	}
	return ""
}

// MetaTestConfig contains parameters needed by meta tests (tests that
// exercise Tast itself).
type MetaTestConfig struct {
	// TastPath contains the path to the tast binary that was executed to initiate
	// testing.
	TastPath string `protobuf:"bytes,1,opt,name=tast_path,json=tastPath,proto3" json:"tast_path,omitempty"`
	// RunFlags contains a subset of the flags that were passed to the "tast run"
	// command. The included flags are ones that are necessary for core
	// functionality, e.g. paths to binaries used by the tast process and
	// credentials for reconnecting to the DUT.
	RunFlags             []string `protobuf:"bytes,2,rep,name=run_flags,json=runFlags,proto3" json:"run_flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaTestConfig) Reset()         { *m = MetaTestConfig{} }
func (m *MetaTestConfig) String() string { return proto.CompactTextString(m) }
func (*MetaTestConfig) ProtoMessage()    {}
func (*MetaTestConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a77305914d5d202f, []int{9}
}

func (m *MetaTestConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaTestConfig.Unmarshal(m, b)
}
func (m *MetaTestConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaTestConfig.Marshal(b, m, deterministic)
}
func (m *MetaTestConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTestConfig.Merge(m, src)
}
func (m *MetaTestConfig) XXX_Size() int {
	return xxx_messageInfo_MetaTestConfig.Size(m)
}
func (m *MetaTestConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTestConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTestConfig proto.InternalMessageInfo

func (m *MetaTestConfig) GetTastPath() string {
	if m != nil {
		return m.TastPath
	}
	return ""
}

func (m *MetaTestConfig) GetRunFlags() []string {
	if m != nil {
		return m.RunFlags
	}
	return nil
}

func init() {
	proto.RegisterType((*HandshakeRequest)(nil), "tast.core.HandshakeRequest")
	proto.RegisterType((*HandshakeResponse)(nil), "tast.core.HandshakeResponse")
	proto.RegisterType((*HandshakeError)(nil), "tast.core.HandshakeError")
	proto.RegisterType((*BundleInitParams)(nil), "tast.core.BundleInitParams")
	proto.RegisterMapType((map[string]string)(nil), "tast.core.BundleInitParams.VarsEntry")
	proto.RegisterType((*RunnerInitParams)(nil), "tast.core.RunnerInitParams")
	proto.RegisterType((*BundleConfig)(nil), "tast.core.BundleConfig")
	proto.RegisterMapType((map[string]*DUTConfig)(nil), "tast.core.BundleConfig.CompanionDutsEntry")
	proto.RegisterType((*TargetDevice)(nil), "tast.core.TargetDevice")
	proto.RegisterType((*DUTConfig)(nil), "tast.core.DUTConfig")
	proto.RegisterType((*SSHConfig)(nil), "tast.core.SSHConfig")
	proto.RegisterType((*MetaTestConfig)(nil), "tast.core.MetaTestConfig")
}

func init() { proto.RegisterFile("handshake.proto", fileDescriptor_a77305914d5d202f) }

var fileDescriptor_a77305914d5d202f = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0x56, 0xc8, 0x81, 0x13, 0x4f, 0x20, 0xf8, 0xac, 0xd0, 0xe1, 0x4f, 0x47, 0x87, 0xba, 0xaa,
	0x1a, 0xa1, 0x2a, 0x91, 0xc2, 0x45, 0x7f, 0x54, 0xf5, 0x02, 0x02, 0x85, 0x4a, 0xad, 0xa8, 0x03,
	0x5c, 0xb4, 0x17, 0xd6, 0xda, 0x1e, 0x62, 0x2b, 0xf6, 0xae, 0xbb, 0xbb, 0x06, 0xe5, 0xe5, 0x7a,
	0xd5, 0x67, 0xe8, 0xf3, 0x54, 0x6b, 0x6f, 0x5c, 0x27, 0x29, 0xdc, 0xed, 0x7c, 0x33, 0xf3, 0xcd,
	0xcc, 0x37, 0x63, 0xc3, 0x66, 0x44, 0x59, 0x28, 0x23, 0x3a, 0xc1, 0x5e, 0x26, 0xb8, 0xe2, 0xc4,
	0x52, 0x54, 0xaa, 0x5e, 0xc0, 0x05, 0x3a, 0x3f, 0x1b, 0x60, 0x9f, 0xcf, 0xdc, 0x2e, 0x7e, 0xcb,
	0x51, 0x2a, 0xf2, 0x02, 0x08, 0x43, 0x0c, 0xbd, 0x5c, 0xa2, 0xf0, 0x24, 0x8a, 0xbb, 0x38, 0x40,
	0xb9, 0xd3, 0x38, 0x68, 0x74, 0x5b, 0xae, 0xad, 0x3d, 0xd7, 0x12, 0xc5, 0xc8, 0xe0, 0xe4, 0x02,
	0x88, 0x9f, 0xb3, 0x30, 0x41, 0x2f, 0x66, 0xb1, 0xf2, 0x32, 0x2a, 0x68, 0x2a, 0x77, 0x56, 0x0e,
	0x1a, 0xdd, 0xf6, 0x60, 0xbf, 0x57, 0x95, 0xea, 0x1d, 0x17, 0x41, 0x17, 0x2c, 0x56, 0x97, 0x45,
	0x88, 0x6b, 0xfb, 0x0b, 0x88, 0xa6, 0x12, 0x39, 0x63, 0x28, 0xe6, 0xa8, 0x9a, 0x4b, 0x54, 0x6e,
	0x11, 0x54, 0xa7, 0x12, 0x0b, 0x88, 0x33, 0x84, 0x7f, 0x6a, 0x73, 0xc9, 0x8c, 0x33, 0x89, 0xa4,
	0x0f, 0xab, 0x28, 0x04, 0x17, 0xc5, 0x2c, 0xed, 0xc1, 0x6e, 0x8d, 0xb2, 0x0a, 0x3e, 0xd5, 0x01,
	0x6e, 0x19, 0xe7, 0x74, 0xa1, 0x33, 0xef, 0x20, 0xff, 0xc2, 0x9a, 0x40, 0x2a, 0x39, 0x2b, 0x38,
	0x2c, 0xd7, 0x58, 0xce, 0x8f, 0x06, 0xd8, 0x8b, 0x13, 0x92, 0xd7, 0xf0, 0xd7, 0x1d, 0x15, 0x5a,
	0xba, 0x66, 0xb7, 0x3d, 0x78, 0xf6, 0x88, 0x18, 0xbd, 0x1b, 0x2a, 0xe4, 0x29, 0x53, 0x62, 0xea,
	0x16, 0x29, 0xe4, 0x2d, 0x6c, 0x18, 0x55, 0x03, 0xce, 0x6e, 0xe3, 0xb1, 0x11, 0x74, 0x7b, 0x89,
	0xe3, 0xa4, 0x70, 0xbb, 0xeb, 0x7e, 0xcd, 0xda, 0x7b, 0x09, 0x56, 0x45, 0x48, 0x6c, 0x68, 0x4e,
	0x70, 0x6a, 0xfa, 0xd5, 0x4f, 0xb2, 0x05, 0xab, 0x77, 0x34, 0xc9, 0xb1, 0x20, 0xb5, 0xdc, 0xd2,
	0x78, 0xb3, 0xf2, 0xaa, 0xe1, 0x1c, 0x81, 0xbd, 0x28, 0x2e, 0xf9, 0x1f, 0xda, 0xa6, 0x95, 0x71,
	0xc2, 0x7d, 0xc3, 0x03, 0x25, 0xf4, 0x3e, 0xe1, 0xbe, 0xf3, 0x7d, 0x05, 0xd6, 0xeb, 0xcd, 0x90,
	0x77, 0xd0, 0xc9, 0x44, 0x9c, 0x52, 0x31, 0xf5, 0x14, 0x15, 0x63, 0x54, 0x46, 0xf0, 0x7a, 0xf7,
	0x57, 0x85, 0x63, 0x88, 0xfa, 0x88, 0xdc, 0x0d, 0x13, 0x5e, 0x82, 0xe4, 0x33, 0x74, 0x02, 0x9e,
	0x66, 0x94, 0xc5, 0x9c, 0x79, 0x61, 0xae, 0xf4, 0x39, 0x69, 0x05, 0x0f, 0x1f, 0x98, 0xbe, 0x77,
	0x32, 0x8b, 0x1e, 0xe6, 0xca, 0xc8, 0xb8, 0x11, 0xd4, 0x31, 0x72, 0x02, 0x76, 0x8a, 0x8a, 0x7a,
	0x0a, 0xa5, 0x9a, 0x49, 0xda, 0x5c, 0xba, 0x82, 0x8f, 0xa8, 0xe8, 0x15, 0x4a, 0x65, 0x44, 0xed,
	0xa4, 0x73, 0xf6, 0xde, 0x0d, 0x90, 0xe5, 0x4a, 0x7f, 0xd0, 0xf7, 0xb0, 0xae, 0x6f, 0x7b, 0xb0,
	0x55, 0xab, 0x30, 0xbc, 0xbe, 0x32, 0xe4, 0x35, 0xd5, 0x7d, 0x58, 0xaf, 0xcb, 0x41, 0x8e, 0x00,
	0xc2, 0xbc, 0x6a, 0xb3, 0xf1, 0x08, 0x89, 0x15, 0xe6, 0xa6, 0x39, 0xf2, 0x1f, 0x98, 0x9d, 0x78,
	0x61, 0x2c, 0xcc, 0x66, 0xad, 0x12, 0x19, 0xc6, 0xc2, 0xf9, 0x0a, 0x56, 0x95, 0xa6, 0x0b, 0x48,
	0x19, 0x3d, 0x5c, 0x60, 0x34, 0x3a, 0x9f, 0x15, 0x90, 0x32, 0x32, 0x49, 0xbb, 0xd0, 0x52, 0xc9,
	0xbd, 0xc7, 0x68, 0x3a, 0x3b, 0x9c, 0xbf, 0x55, 0x72, 0xff, 0x89, 0xa6, 0xe8, 0x44, 0x60, 0x55,
	0x29, 0xe4, 0x39, 0x6c, 0x06, 0x9c, 0x31, 0x0c, 0x94, 0x5e, 0x9f, 0xcc, 0x30, 0x30, 0xda, 0x74,
	0x7e, 0xc3, 0xa3, 0x0c, 0x03, 0x4d, 0x38, 0xc1, 0xa9, 0x77, 0x1b, 0x27, 0x15, 0xe1, 0x04, 0xa7,
	0x67, 0x71, 0x82, 0x64, 0x1b, 0xf4, 0xb3, 0x98, 0xa4, 0x59, 0x7e, 0x67, 0x13, 0x9c, 0xea, 0x31,
	0x3e, 0x40, 0x67, 0x7e, 0x49, 0x64, 0x1f, 0x8a, 0xff, 0x99, 0x97, 0x51, 0x15, 0x99, 0x42, 0x2d,
	0x0d, 0x5c, 0x52, 0x15, 0x69, 0xa7, 0xc8, 0x99, 0x77, 0x9b, 0xd0, 0x71, 0x79, 0x44, 0x96, 0xdb,
	0x12, 0x39, 0x3b, 0xd3, 0xf6, 0xf1, 0xd3, 0x2f, 0x4f, 0x82, 0x48, 0xf0, 0x34, 0xce, 0x53, 0x2e,
	0xfb, 0x3a, 0xa7, 0x1f, 0x33, 0x85, 0x82, 0xd1, 0xa4, 0x5f, 0xfc, 0x29, 0x03, 0x9e, 0xf8, 0x6b,
	0xc5, 0xeb, 0xe8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xda, 0x50, 0xdd, 0x46, 0x05, 0x00,
	0x00,
}
