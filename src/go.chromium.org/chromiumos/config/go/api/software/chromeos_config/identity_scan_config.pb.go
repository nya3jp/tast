// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/software/chromeos_config/identity_scan_config.proto

package chromeos_config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Defines how devices are probed at runtime to dynamically
// determine the correct configuration payload.
type IdentityScanConfig struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentityScanConfig) Reset()         { *m = IdentityScanConfig{} }
func (m *IdentityScanConfig) String() string { return proto.CompactTextString(m) }
func (*IdentityScanConfig) ProtoMessage()    {}
func (*IdentityScanConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3f84792726ef489, []int{0}
}

func (m *IdentityScanConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityScanConfig.Unmarshal(m, b)
}
func (m *IdentityScanConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityScanConfig.Marshal(b, m, deterministic)
}
func (m *IdentityScanConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityScanConfig.Merge(m, src)
}
func (m *IdentityScanConfig) XXX_Size() int {
	return xxx_messageInfo_IdentityScanConfig.Size(m)
}
func (m *IdentityScanConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityScanConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityScanConfig proto.InternalMessageInfo

// Scan config to identify a unique DesignConfigId, which determines
// which SoftwareConfig will be used.
type IdentityScanConfig_DesignConfigId struct {
	// Types that are valid to be assigned to FirmwareNameMatch:
	//	*IdentityScanConfig_DesignConfigId_SmbiosNameMatch
	//	*IdentityScanConfig_DesignConfigId_DeviceTreeCompatibleMatch
	FirmwareNameMatch isIdentityScanConfig_DesignConfigId_FirmwareNameMatch `protobuf_oneof:"firmware_name_match"`
	// SKU configured during board manufacturing. Should match the value
	// returned by "cros_config /identity sku-id" (which abstracts how SKU is
	// encoded on the specific platform). Must be in the range [0, 0x7FFFFFFF].
	FirmwareSku          uint32   `protobuf:"varint,3,opt,name=firmware_sku,json=firmwareSku,proto3" json:"firmware_sku,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentityScanConfig_DesignConfigId) Reset()         { *m = IdentityScanConfig_DesignConfigId{} }
func (m *IdentityScanConfig_DesignConfigId) String() string { return proto.CompactTextString(m) }
func (*IdentityScanConfig_DesignConfigId) ProtoMessage()    {}
func (*IdentityScanConfig_DesignConfigId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3f84792726ef489, []int{0, 0}
}

func (m *IdentityScanConfig_DesignConfigId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityScanConfig_DesignConfigId.Unmarshal(m, b)
}
func (m *IdentityScanConfig_DesignConfigId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityScanConfig_DesignConfigId.Marshal(b, m, deterministic)
}
func (m *IdentityScanConfig_DesignConfigId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityScanConfig_DesignConfigId.Merge(m, src)
}
func (m *IdentityScanConfig_DesignConfigId) XXX_Size() int {
	return xxx_messageInfo_IdentityScanConfig_DesignConfigId.Size(m)
}
func (m *IdentityScanConfig_DesignConfigId) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityScanConfig_DesignConfigId.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityScanConfig_DesignConfigId proto.InternalMessageInfo

type isIdentityScanConfig_DesignConfigId_FirmwareNameMatch interface {
	isIdentityScanConfig_DesignConfigId_FirmwareNameMatch()
}

type IdentityScanConfig_DesignConfigId_SmbiosNameMatch struct {
	SmbiosNameMatch string `protobuf:"bytes,1,opt,name=smbios_name_match,json=smbiosNameMatch,proto3,oneof"`
}

type IdentityScanConfig_DesignConfigId_DeviceTreeCompatibleMatch struct {
	DeviceTreeCompatibleMatch string `protobuf:"bytes,2,opt,name=device_tree_compatible_match,json=deviceTreeCompatibleMatch,proto3,oneof"`
}

func (*IdentityScanConfig_DesignConfigId_SmbiosNameMatch) isIdentityScanConfig_DesignConfigId_FirmwareNameMatch() {
}

func (*IdentityScanConfig_DesignConfigId_DeviceTreeCompatibleMatch) isIdentityScanConfig_DesignConfigId_FirmwareNameMatch() {
}

func (m *IdentityScanConfig_DesignConfigId) GetFirmwareNameMatch() isIdentityScanConfig_DesignConfigId_FirmwareNameMatch {
	if m != nil {
		return m.FirmwareNameMatch
	}
	return nil
}

func (m *IdentityScanConfig_DesignConfigId) GetSmbiosNameMatch() string {
	if x, ok := m.GetFirmwareNameMatch().(*IdentityScanConfig_DesignConfigId_SmbiosNameMatch); ok {
		return x.SmbiosNameMatch
	}
	return ""
}

func (m *IdentityScanConfig_DesignConfigId) GetDeviceTreeCompatibleMatch() string {
	if x, ok := m.GetFirmwareNameMatch().(*IdentityScanConfig_DesignConfigId_DeviceTreeCompatibleMatch); ok {
		return x.DeviceTreeCompatibleMatch
	}
	return ""
}

func (m *IdentityScanConfig_DesignConfigId) GetFirmwareSku() uint32 {
	if m != nil {
		return m.FirmwareSku
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IdentityScanConfig_DesignConfigId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IdentityScanConfig_DesignConfigId_SmbiosNameMatch)(nil),
		(*IdentityScanConfig_DesignConfigId_DeviceTreeCompatibleMatch)(nil),
	}
}

// Scanning config based on: config/api/deivce_brand_id.proto
type IdentityScanConfig_BrandId struct {
	// 'whitelabel_tag' value set in the VPD.
	// See
	// https://chromeos.google.com/partner/dlm/docs/factory/vpd.html#field-whitelabel_tag.
	WhitelabelTag        string   `protobuf:"bytes,1,opt,name=whitelabel_tag,json=whitelabelTag,proto3" json:"whitelabel_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentityScanConfig_BrandId) Reset()         { *m = IdentityScanConfig_BrandId{} }
func (m *IdentityScanConfig_BrandId) String() string { return proto.CompactTextString(m) }
func (*IdentityScanConfig_BrandId) ProtoMessage()    {}
func (*IdentityScanConfig_BrandId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3f84792726ef489, []int{0, 1}
}

func (m *IdentityScanConfig_BrandId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentityScanConfig_BrandId.Unmarshal(m, b)
}
func (m *IdentityScanConfig_BrandId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentityScanConfig_BrandId.Marshal(b, m, deterministic)
}
func (m *IdentityScanConfig_BrandId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityScanConfig_BrandId.Merge(m, src)
}
func (m *IdentityScanConfig_BrandId) XXX_Size() int {
	return xxx_messageInfo_IdentityScanConfig_BrandId.Size(m)
}
func (m *IdentityScanConfig_BrandId) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityScanConfig_BrandId.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityScanConfig_BrandId proto.InternalMessageInfo

func (m *IdentityScanConfig_BrandId) GetWhitelabelTag() string {
	if m != nil {
		return m.WhitelabelTag
	}
	return ""
}

func init() {
	proto.RegisterType((*IdentityScanConfig)(nil), "chromiumos.config.api.software.chromeos_config.IdentityScanConfig")
	proto.RegisterType((*IdentityScanConfig_DesignConfigId)(nil), "chromiumos.config.api.software.chromeos_config.IdentityScanConfig.DesignConfigId")
	proto.RegisterType((*IdentityScanConfig_BrandId)(nil), "chromiumos.config.api.software.chromeos_config.IdentityScanConfig.BrandId")
}

func init() {
	proto.RegisterFile("api/software/chromeos_config/identity_scan_config.proto", fileDescriptor_d3f84792726ef489)
}

var fileDescriptor_d3f84792726ef489 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x31, 0x4f, 0x02, 0x41,
	0x10, 0x85, 0x3d, 0x4c, 0x34, 0xae, 0x82, 0xf1, 0x8c, 0x09, 0x12, 0x0b, 0x34, 0x31, 0xa1, 0x30,
	0x77, 0x26, 0x16, 0xd6, 0x80, 0x85, 0x14, 0x5a, 0x00, 0x95, 0xcd, 0x66, 0x6e, 0x6f, 0x58, 0x26,
	0xb0, 0x37, 0x97, 0xdd, 0x45, 0x62, 0xef, 0xbf, 0xf2, 0xcf, 0x19, 0xb8, 0x85, 0x4b, 0x2c, 0x6c,
	0xbf, 0xf7, 0xe6, 0xe5, 0xe5, 0x8d, 0x78, 0x86, 0x92, 0x52, 0xc7, 0x33, 0xbf, 0x06, 0x8b, 0xa9,
	0x9a, 0x5b, 0x36, 0xc8, 0x4e, 0x2a, 0x2e, 0x66, 0xa4, 0x53, 0xca, 0xb1, 0xf0, 0xe4, 0xbf, 0xa4,
	0x53, 0x50, 0x04, 0x98, 0x94, 0x96, 0x3d, 0xc7, 0xc9, 0xd6, 0x4b, 0x2b, 0xc3, 0x2e, 0x09, 0x02,
	0x94, 0x94, 0xec, 0xa2, 0x92, 0x3f, 0x51, 0x77, 0xdf, 0x0d, 0x11, 0x8f, 0x42, 0xdc, 0x44, 0x41,
	0x31, 0xdc, 0xe2, 0xce, 0x4f, 0x24, 0x5a, 0x2f, 0xe8, 0x48, 0x07, 0x30, 0xca, 0xe3, 0x07, 0x71,
	0xe1, 0x4c, 0x46, 0xec, 0x64, 0x01, 0x06, 0xa5, 0x01, 0xaf, 0xe6, 0xed, 0xa8, 0x1b, 0xf5, 0x4e,
	0x5e, 0x0f, 0xc6, 0xe7, 0x95, 0xf4, 0x0e, 0x06, 0xdf, 0x36, 0x42, 0xdc, 0x17, 0x37, 0x39, 0x7e,
	0x92, 0x42, 0xe9, 0x2d, 0xa2, 0x54, 0x6c, 0x4a, 0xf0, 0x94, 0x2d, 0x77, 0x87, 0x8d, 0x70, 0x78,
	0x5d, 0xb9, 0xa6, 0x16, 0x71, 0xb8, 0xf7, 0x54, 0x11, 0xb7, 0xe2, 0x6c, 0x46, 0xd6, 0x6c, 0x6a,
	0x4b, 0xb7, 0x58, 0xb5, 0x0f, 0xbb, 0x51, 0xaf, 0x39, 0x3e, 0xdd, 0xb1, 0xc9, 0x62, 0x35, 0xb8,
	0x12, 0x97, 0x7b, 0x4b, 0xdd, 0xaa, 0xf3, 0x28, 0x8e, 0x07, 0x16, 0x8a, 0x7c, 0x94, 0xc7, 0xf7,
	0xa2, 0xb5, 0x9e, 0x93, 0xc7, 0x25, 0x64, 0xb8, 0x94, 0x1e, 0x74, 0x55, 0x79, 0xdc, 0xac, 0xe9,
	0x14, 0xf4, 0x60, 0xf8, 0xd1, 0xd7, 0xbc, 0xdf, 0x2e, 0x61, 0xab, 0xd3, 0x7a, 0xc8, 0x34, 0xcc,
	0xae, 0x39, 0xfd, 0xef, 0x2d, 0xd9, 0xd1, 0xf6, 0x05, 0x4f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xa9, 0x0b, 0x26, 0x2c, 0xbd, 0x01, 0x00, 0x00,
}
