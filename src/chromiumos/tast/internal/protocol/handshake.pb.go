// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: handshake.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HandshakeRequest contains parameters needed to initialize a gRPC server.
// The message is sent in a raw format since gRPC connection is not ready before
// handshake.
type HandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to initialize user-defined gRPC services.
	NeedUserServices bool              `protobuf:"varint,1,opt,name=need_user_services,json=needUserServices,proto3" json:"need_user_services,omitempty"`
	BundleInitParams *BundleInitParams `protobuf:"bytes,2,opt,name=bundle_init_params,json=bundleInitParams,proto3" json:"bundle_init_params,omitempty"`
	RunnerInitParams *RunnerInitParams `protobuf:"bytes,3,opt,name=runner_init_params,json=runnerInitParams,proto3" json:"runner_init_params,omitempty"`
}

func (x *HandshakeRequest) Reset() {
	*x = HandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeRequest) ProtoMessage() {}

func (x *HandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeRequest.ProtoReflect.Descriptor instead.
func (*HandshakeRequest) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{0}
}

func (x *HandshakeRequest) GetNeedUserServices() bool {
	if x != nil {
		return x.NeedUserServices
	}
	return false
}

func (x *HandshakeRequest) GetBundleInitParams() *BundleInitParams {
	if x != nil {
		return x.BundleInitParams
	}
	return nil
}

func (x *HandshakeRequest) GetRunnerInitParams() *RunnerInitParams {
	if x != nil {
		return x.RunnerInitParams
	}
	return nil
}

// HandshakeResponse is a response to an HandshakeRequest message.
// The message is sent in a raw format since gRPC connection is not ready before
// handshake.
type HandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set if an error occurred.
	Error *HandshakeError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *HandshakeResponse) Reset() {
	*x = HandshakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeResponse) ProtoMessage() {}

func (x *HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeResponse.ProtoReflect.Descriptor instead.
func (*HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{1}
}

func (x *HandshakeResponse) GetError() *HandshakeError {
	if x != nil {
		return x.Error
	}
	return nil
}

// HandshakeError describes a failed handshake result.
type HandshakeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *HandshakeError) Reset() {
	*x = HandshakeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandshakeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeError) ProtoMessage() {}

func (x *HandshakeError) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeError.ProtoReflect.Descriptor instead.
func (*HandshakeError) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{2}
}

func (x *HandshakeError) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// BundleInitParams contains parameters needed to initialize bundles.
type BundleInitParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Runtime variables.
	Vars map[string]string `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// BundleConfigs represents all the bundles to run.
	BundleConfig *BundleConfig `protobuf:"bytes,2,opt,name=bundle_config,json=bundleConfig,proto3" json:"bundle_config,omitempty"`
}

func (x *BundleInitParams) Reset() {
	*x = BundleInitParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleInitParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleInitParams) ProtoMessage() {}

func (x *BundleInitParams) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleInitParams.ProtoReflect.Descriptor instead.
func (*BundleInitParams) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{3}
}

func (x *BundleInitParams) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *BundleInitParams) GetBundleConfig() *BundleConfig {
	if x != nil {
		return x.BundleConfig
	}
	return nil
}

// RunnerInitParams contains information needed to initialize test runners.
type RunnerInitParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A file path glob that matches test bundle executables.
	// Example: "/usr/local/libexec/tast/bundles/local/*"
	BundleGlob string `protobuf:"bytes,1,opt,name=bundle_glob,json=bundleGlob,proto3" json:"bundle_glob,omitempty"`
}

func (x *RunnerInitParams) Reset() {
	*x = RunnerInitParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerInitParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerInitParams) ProtoMessage() {}

func (x *RunnerInitParams) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerInitParams.ProtoReflect.Descriptor instead.
func (*RunnerInitParams) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{4}
}

func (x *RunnerInitParams) GetBundleGlob() string {
	if x != nil {
		return x.BundleGlob
	}
	return ""
}

type BundleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PrimaryTarget is the target device for remote tests.
	PrimaryTarget  *TargetDevice         `protobuf:"bytes,1,opt,name=primary_target,json=primaryTarget,proto3" json:"primary_target,omitempty"`
	CompanionDuts  map[string]*DUTConfig `protobuf:"bytes,2,rep,name=companion_duts,json=companionDuts,proto3" json:"companion_duts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetaTestConfig *MetaTestConfig       `protobuf:"bytes,3,opt,name=meta_test_config,json=metaTestConfig,proto3" json:"meta_test_config,omitempty"`
}

func (x *BundleConfig) Reset() {
	*x = BundleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleConfig) ProtoMessage() {}

func (x *BundleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleConfig.ProtoReflect.Descriptor instead.
func (*BundleConfig) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{5}
}

func (x *BundleConfig) GetPrimaryTarget() *TargetDevice {
	if x != nil {
		return x.PrimaryTarget
	}
	return nil
}

func (x *BundleConfig) GetCompanionDuts() map[string]*DUTConfig {
	if x != nil {
		return x.CompanionDuts
	}
	return nil
}

func (x *BundleConfig) GetMetaTestConfig() *MetaTestConfig {
	if x != nil {
		return x.MetaTestConfig
	}
	return nil
}

// TargetDevice represents a local bundle on which remote tests invoke services.
type TargetDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DutConfig describes the DUT containing local bundles.
	DutConfig *DUTConfig `protobuf:"bytes,1,opt,name=dut_config,json=dutConfig,proto3" json:"dut_config,omitempty"`
	// BundleDir represents the directory on which the target bundle exists.
	BundleDir string `protobuf:"bytes,2,opt,name=bundle_dir,json=bundleDir,proto3" json:"bundle_dir,omitempty"`
}

func (x *TargetDevice) Reset() {
	*x = TargetDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetDevice) ProtoMessage() {}

func (x *TargetDevice) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetDevice.ProtoReflect.Descriptor instead.
func (*TargetDevice) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{6}
}

func (x *TargetDevice) GetDutConfig() *DUTConfig {
	if x != nil {
		return x.DutConfig
	}
	return nil
}

func (x *TargetDevice) GetBundleDir() string {
	if x != nil {
		return x.BundleDir
	}
	return ""
}

// DUTConfig describes a DUT.
type DUTConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SshConfig contains information needed to connect to the DUT via SSH.
	SshConfig *SSHConfig `protobuf:"bytes,1,opt,name=ssh_config,json=sshConfig,proto3" json:"ssh_config,omitempty"`
	// TlwName contains the name of the DUT recognized by the TLW service.
	// This must be set when TLW API is used.
	TlwName string `protobuf:"bytes,2,opt,name=tlw_name,json=tlwName,proto3" json:"tlw_name,omitempty"`
}

func (x *DUTConfig) Reset() {
	*x = DUTConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DUTConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DUTConfig) ProtoMessage() {}

func (x *DUTConfig) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DUTConfig.ProtoReflect.Descriptor instead.
func (*DUTConfig) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{7}
}

func (x *DUTConfig) GetSshConfig() *SSHConfig {
	if x != nil {
		return x.SshConfig
	}
	return nil
}

func (x *DUTConfig) GetTlwName() string {
	if x != nil {
		return x.TlwName
	}
	return ""
}

// SSHConfig contains information needed to connect to the DUT via SSH.
type SSHConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConnectionSpec is a connection spec as [<user>@]host[:<port>].
	ConnectionSpec string `protobuf:"bytes,1,opt,name=connection_spec,json=connectionSpec,proto3" json:"connection_spec,omitempty"`
	// KeyFile is a path to the SSH private key to use to connect to the target.
	KeyFile string `protobuf:"bytes,2,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// KeyDir is a path to the directory containing SSH private keys
	// (typically $HOME/.ssh).
	KeyDir string `protobuf:"bytes,3,opt,name=key_dir,json=keyDir,proto3" json:"key_dir,omitempty"`
}

func (x *SSHConfig) Reset() {
	*x = SSHConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHConfig) ProtoMessage() {}

func (x *SSHConfig) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHConfig.ProtoReflect.Descriptor instead.
func (*SSHConfig) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{8}
}

func (x *SSHConfig) GetConnectionSpec() string {
	if x != nil {
		return x.ConnectionSpec
	}
	return ""
}

func (x *SSHConfig) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *SSHConfig) GetKeyDir() string {
	if x != nil {
		return x.KeyDir
	}
	return ""
}

// MetaTestConfig contains parameters needed by meta tests (tests that
// exercise Tast itself).
type MetaTestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TastPath contains the path to the tast binary that was executed to initiate
	// testing.
	TastPath string `protobuf:"bytes,1,opt,name=tast_path,json=tastPath,proto3" json:"tast_path,omitempty"`
	// RunFlags contains a subset of the flags that were passed to the "tast run"
	// command. The included flags are ones that are necessary for core
	// functionality, e.g. paths to binaries used by the tast process and
	// credentials for reconnecting to the DUT.
	RunFlags []string `protobuf:"bytes,2,rep,name=run_flags,json=runFlags,proto3" json:"run_flags,omitempty"`
}

func (x *MetaTestConfig) Reset() {
	*x = MetaTestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handshake_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaTestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaTestConfig) ProtoMessage() {}

func (x *MetaTestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_handshake_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaTestConfig.ProtoReflect.Descriptor instead.
func (*MetaTestConfig) Descriptor() ([]byte, []int) {
	return file_handshake_proto_rawDescGZIP(), []int{9}
}

func (x *MetaTestConfig) GetTastPath() string {
	if x != nil {
		return x.TastPath
	}
	return ""
}

func (x *MetaTestConfig) GetRunFlags() []string {
	if x != nil {
		return x.RunFlags
	}
	return nil
}

var File_handshake_proto protoreflect.FileDescriptor

var file_handshake_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x10, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e,
	0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x49, 0x0a, 0x12, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61,
	0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x44, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x28, 0x0a, 0x0e, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x76, 0x61,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x10,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x6c, 0x6f,
	0x62, 0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x56, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x55,
	0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x62, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x55, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x22, 0x5b, 0x0a, 0x09, 0x44, 0x55, 0x54, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x09, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x44, 0x69, 0x72, 0x22, 0x4a, 0x0a,
	0x0e, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x75, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_handshake_proto_rawDescOnce sync.Once
	file_handshake_proto_rawDescData = file_handshake_proto_rawDesc
)

func file_handshake_proto_rawDescGZIP() []byte {
	file_handshake_proto_rawDescOnce.Do(func() {
		file_handshake_proto_rawDescData = protoimpl.X.CompressGZIP(file_handshake_proto_rawDescData)
	})
	return file_handshake_proto_rawDescData
}

var file_handshake_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_handshake_proto_goTypes = []interface{}{
	(*HandshakeRequest)(nil),  // 0: tast.core.HandshakeRequest
	(*HandshakeResponse)(nil), // 1: tast.core.HandshakeResponse
	(*HandshakeError)(nil),    // 2: tast.core.HandshakeError
	(*BundleInitParams)(nil),  // 3: tast.core.BundleInitParams
	(*RunnerInitParams)(nil),  // 4: tast.core.RunnerInitParams
	(*BundleConfig)(nil),      // 5: tast.core.BundleConfig
	(*TargetDevice)(nil),      // 6: tast.core.TargetDevice
	(*DUTConfig)(nil),         // 7: tast.core.DUTConfig
	(*SSHConfig)(nil),         // 8: tast.core.SSHConfig
	(*MetaTestConfig)(nil),    // 9: tast.core.MetaTestConfig
	nil,                       // 10: tast.core.BundleInitParams.VarsEntry
	nil,                       // 11: tast.core.BundleConfig.CompanionDutsEntry
}
var file_handshake_proto_depIdxs = []int32{
	3,  // 0: tast.core.HandshakeRequest.bundle_init_params:type_name -> tast.core.BundleInitParams
	4,  // 1: tast.core.HandshakeRequest.runner_init_params:type_name -> tast.core.RunnerInitParams
	2,  // 2: tast.core.HandshakeResponse.error:type_name -> tast.core.HandshakeError
	10, // 3: tast.core.BundleInitParams.vars:type_name -> tast.core.BundleInitParams.VarsEntry
	5,  // 4: tast.core.BundleInitParams.bundle_config:type_name -> tast.core.BundleConfig
	6,  // 5: tast.core.BundleConfig.primary_target:type_name -> tast.core.TargetDevice
	11, // 6: tast.core.BundleConfig.companion_duts:type_name -> tast.core.BundleConfig.CompanionDutsEntry
	9,  // 7: tast.core.BundleConfig.meta_test_config:type_name -> tast.core.MetaTestConfig
	7,  // 8: tast.core.TargetDevice.dut_config:type_name -> tast.core.DUTConfig
	8,  // 9: tast.core.DUTConfig.ssh_config:type_name -> tast.core.SSHConfig
	7,  // 10: tast.core.BundleConfig.CompanionDutsEntry.value:type_name -> tast.core.DUTConfig
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_handshake_proto_init() }
func file_handshake_proto_init() {
	if File_handshake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_handshake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandshakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandshakeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleInitParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerInitParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DUTConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handshake_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaTestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handshake_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_handshake_proto_goTypes,
		DependencyIndexes: file_handshake_proto_depIdxs,
		MessageInfos:      file_handshake_proto_msgTypes,
	}.Build()
	File_handshake_proto = out.File
	file_handshake_proto_rawDesc = nil
	file_handshake_proto_goTypes = nil
	file_handshake_proto_depIdxs = nil
}
