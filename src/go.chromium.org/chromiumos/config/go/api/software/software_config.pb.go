// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/software/software_config.proto

package software

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api "go.chromium.org/chromiumos/config/go/api"
	bluetooth "go.chromium.org/chromiumos/config/go/api/software/bluetooth"
	chromeos_config "go.chromium.org/chromiumos/config/go/api/software/chromeos_config"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Contains all of the hardware-design-specific configuration that can be
// updated via new software builds/releases.
//
// During manufacturing, the SoftwareConfigId will be set for a given device,
// which will subsequently determine what SoftwareConfig shall be selected from
// the current software-build installed on the device.
//
// SoftwareConfig payloads can be shared across different
// hardware-design-configs, if the software payloads are the same.
type SoftwareConfig struct {
	// Defines the hardware design config this software config supports.
	DesignConfigId       *api.DesignConfigId                                `protobuf:"bytes,7,opt,name=design_config_id,json=designConfigId,proto3" json:"design_config_id,omitempty"`
	IdScanConfig         *chromeos_config.IdentityScanConfig_DesignConfigId `protobuf:"bytes,8,opt,name=id_scan_config,json=idScanConfig,proto3" json:"id_scan_config,omitempty"`
	Firmware             *FirmwareConfig                                    `protobuf:"bytes,3,opt,name=firmware,proto3" json:"firmware,omitempty"`
	BluetoothConfig      *bluetooth.BluetoothConfig                         `protobuf:"bytes,4,opt,name=bluetooth_config,json=bluetoothConfig,proto3" json:"bluetooth_config,omitempty"`
	PowerConfig          *PowerConfig                                       `protobuf:"bytes,5,opt,name=power_config,json=powerConfig,proto3" json:"power_config,omitempty"`
	AudioConfig          *AudioConfig                                       `protobuf:"bytes,6,opt,name=audio_config,json=audioConfig,proto3" json:"audio_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *SoftwareConfig) Reset()         { *m = SoftwareConfig{} }
func (m *SoftwareConfig) String() string { return proto.CompactTextString(m) }
func (*SoftwareConfig) ProtoMessage()    {}
func (*SoftwareConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bb6f107120efda1, []int{0}
}

func (m *SoftwareConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareConfig.Unmarshal(m, b)
}
func (m *SoftwareConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareConfig.Marshal(b, m, deterministic)
}
func (m *SoftwareConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareConfig.Merge(m, src)
}
func (m *SoftwareConfig) XXX_Size() int {
	return xxx_messageInfo_SoftwareConfig.Size(m)
}
func (m *SoftwareConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareConfig proto.InternalMessageInfo

func (m *SoftwareConfig) GetDesignConfigId() *api.DesignConfigId {
	if m != nil {
		return m.DesignConfigId
	}
	return nil
}

func (m *SoftwareConfig) GetIdScanConfig() *chromeos_config.IdentityScanConfig_DesignConfigId {
	if m != nil {
		return m.IdScanConfig
	}
	return nil
}

func (m *SoftwareConfig) GetFirmware() *FirmwareConfig {
	if m != nil {
		return m.Firmware
	}
	return nil
}

func (m *SoftwareConfig) GetBluetoothConfig() *bluetooth.BluetoothConfig {
	if m != nil {
		return m.BluetoothConfig
	}
	return nil
}

func (m *SoftwareConfig) GetPowerConfig() *PowerConfig {
	if m != nil {
		return m.PowerConfig
	}
	return nil
}

func (m *SoftwareConfig) GetAudioConfig() *AudioConfig {
	if m != nil {
		return m.AudioConfig
	}
	return nil
}

type SoftwareConfigList struct {
	Value                []*SoftwareConfig `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SoftwareConfigList) Reset()         { *m = SoftwareConfigList{} }
func (m *SoftwareConfigList) String() string { return proto.CompactTextString(m) }
func (*SoftwareConfigList) ProtoMessage()    {}
func (*SoftwareConfigList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bb6f107120efda1, []int{1}
}

func (m *SoftwareConfigList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareConfigList.Unmarshal(m, b)
}
func (m *SoftwareConfigList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareConfigList.Marshal(b, m, deterministic)
}
func (m *SoftwareConfigList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareConfigList.Merge(m, src)
}
func (m *SoftwareConfigList) XXX_Size() int {
	return xxx_messageInfo_SoftwareConfigList.Size(m)
}
func (m *SoftwareConfigList) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareConfigList.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareConfigList proto.InternalMessageInfo

func (m *SoftwareConfigList) GetValue() []*SoftwareConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*SoftwareConfig)(nil), "chromiumos.config.api.software.SoftwareConfig")
	proto.RegisterType((*SoftwareConfigList)(nil), "chromiumos.config.api.software.SoftwareConfigList")
}

func init() { proto.RegisterFile("api/software/software_config.proto", fileDescriptor_8bb6f107120efda1) }

var fileDescriptor_8bb6f107120efda1 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4b, 0x6b, 0xea, 0x40,
	0x14, 0xc7, 0x51, 0xa3, 0x37, 0x8c, 0xe2, 0x0d, 0xb3, 0x0a, 0x59, 0xdc, 0x2b, 0x5e, 0x2e, 0x14,
	0x0a, 0x13, 0x5a, 0x17, 0xa5, 0xcb, 0x5a, 0x29, 0x28, 0xa5, 0x0f, 0xdd, 0xb9, 0x91, 0x31, 0x13,
	0xe3, 0x80, 0xe6, 0x84, 0x64, 0x52, 0xe9, 0x37, 0xeb, 0xc7, 0x2b, 0x99, 0x4c, 0x1e, 0x63, 0x4b,
	0x75, 0x37, 0x93, 0xf3, 0xff, 0xff, 0xce, 0x63, 0x4e, 0xd0, 0x90, 0x46, 0xdc, 0x4d, 0x60, 0x23,
	0x0e, 0x34, 0xf6, 0xcb, 0xc3, 0xca, 0x83, 0x70, 0xc3, 0x03, 0x12, 0xc5, 0x20, 0x00, 0xff, 0xf1,
	0xb6, 0x31, 0xec, 0x79, 0xba, 0x87, 0x84, 0xa8, 0x00, 0x8d, 0x38, 0x29, 0xc4, 0x8e, 0x93, 0x31,
	0x98, 0x9f, 0xf0, 0x20, 0x54, 0xc6, 0x15, 0x67, 0xb9, 0xd7, 0xf9, 0xab, 0xf1, 0x69, 0xca, 0x38,
	0x68, 0x70, 0x47, 0x2f, 0x60, 0xc3, 0xe3, 0xfd, 0x97, 0x02, 0x9c, 0x7f, 0x9a, 0x66, 0xbd, 0x4b,
	0x7d, 0x01, 0x20, 0xb6, 0xae, 0x26, 0xba, 0xd1, 0x44, 0xb2, 0x64, 0x1f, 0x12, 0x05, 0x72, 0x39,
	0xf3, 0x43, 0xc1, 0xc5, 0xfb, 0x2a, 0xf1, 0x68, 0xa8, 0xd3, 0xf5, 0x12, 0x23, 0x38, 0xf8, 0xb1,
	0x26, 0x18, 0x7e, 0x18, 0xa8, 0xbf, 0x50, 0xf1, 0x7b, 0x19, 0xc0, 0xcf, 0xc8, 0x3a, 0x6e, 0xd8,
	0xfe, 0x35, 0x68, 0x5c, 0x74, 0xaf, 0xff, 0x93, 0xef, 0xa7, 0x35, 0x91, 0xf2, 0xdc, 0x3e, 0x65,
	0xf3, 0x3e, 0xd3, 0xee, 0xf8, 0x80, 0xfa, 0x9c, 0xd5, 0x8b, 0xb3, 0x4d, 0x89, 0x7b, 0x25, 0x3f,
	0x0f, 0x9f, 0x1c, 0x35, 0x4a, 0xa6, 0xaa, 0xd1, 0x85, 0x47, 0x15, 0xfd, 0x38, 0x75, 0x8f, 0xb3,
	0x2a, 0x88, 0x67, 0xc8, 0x2c, 0x86, 0x6e, 0xb7, 0x64, 0x4a, 0x72, 0x2a, 0xe5, 0x83, 0xd2, 0xe7,
	0x84, 0x79, 0xe9, 0xc7, 0x0c, 0x59, 0xe5, 0xe3, 0x14, 0x6d, 0x18, 0x92, 0x79, 0x7b, 0x8a, 0x59,
	0xfa, 0xc8, 0xb8, 0x38, 0x29, 0xfc, 0xef, 0xb5, 0xfe, 0x01, 0x3f, 0xa1, 0x5e, 0xfd, 0x91, 0xec,
	0xb6, 0xcc, 0x70, 0x79, 0x2a, 0xc3, 0x4b, 0xe6, 0x51, 0xcc, 0x6e, 0x54, 0x5d, 0x32, 0x5e, 0x7d,
	0x2f, 0xed, 0xce, 0x79, 0xbc, 0xbb, 0xcc, 0x53, 0xf0, 0x68, 0x75, 0x99, 0x19, 0x66, 0xc3, 0x6a,
	0xce, 0x0c, 0xb3, 0x69, 0xb5, 0x86, 0x4b, 0x84, 0xf5, 0xcd, 0x79, 0xe4, 0x89, 0xc0, 0x13, 0xd4,
	0x7e, 0xa3, 0xbb, 0xd4, 0xb7, 0x1b, 0x83, 0xd6, 0x39, 0x03, 0xd7, 0x11, 0xf3, 0xdc, 0x3c, 0x1e,
	0x2d, 0xaf, 0x02, 0x28, 0xad, 0x04, 0xe2, 0xc0, 0xad, 0x38, 0xea, 0xdf, 0x70, 0x03, 0x70, 0xeb,
	0xeb, 0xbd, 0xee, 0xc8, 0x95, 0x1e, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0xef, 0x0d, 0x6f, 0x1e,
	0xf8, 0x03, 0x00, 0x00,
}
