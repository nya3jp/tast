// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/software/firmware_config.proto

package software

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FirmwareType_Type int32

const (
	FirmwareType_UNKNOWN FirmwareType_Type = 0
	FirmwareType_MAIN    FirmwareType_Type = 1
	FirmwareType_EC      FirmwareType_Type = 2
	FirmwareType_PD      FirmwareType_Type = 3
)

var FirmwareType_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "MAIN",
	2: "EC",
	3: "PD",
}

var FirmwareType_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"MAIN":    1,
	"EC":      2,
	"PD":      3,
}

func (x FirmwareType_Type) String() string {
	return proto.EnumName(FirmwareType_Type_name, int32(x))
}

func (FirmwareType_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6660a02f418c569d, []int{0, 0}
}

// The type of a firmware binary.
type FirmwareType struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirmwareType) Reset()         { *m = FirmwareType{} }
func (m *FirmwareType) String() string { return proto.CompactTextString(m) }
func (*FirmwareType) ProtoMessage()    {}
func (*FirmwareType) Descriptor() ([]byte, []int) {
	return fileDescriptor_6660a02f418c569d, []int{0}
}

func (m *FirmwareType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirmwareType.Unmarshal(m, b)
}
func (m *FirmwareType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirmwareType.Marshal(b, m, deterministic)
}
func (m *FirmwareType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwareType.Merge(m, src)
}
func (m *FirmwareType) XXX_Size() int {
	return xxx_messageInfo_FirmwareType.Size(m)
}
func (m *FirmwareType) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwareType.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwareType proto.InternalMessageInfo

// Specifies the version of a firmware binary.
type Version struct {
	Major                int32    `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor                int32    `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_6660a02f418c569d, []int{1}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Version) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

// Specifies the location of a firmware binary.
type FirmwarePayload struct {
	// The build target the firmware was built for.
	BuildTargetName string `protobuf:"bytes,1,opt,name=build_target_name,json=buildTargetName,proto3" json:"build_target_name,omitempty"`
	// The name of the firmware image used by the firmware updater. Typically
	// the device name, but can differ when a device may have two or more
	// different firmware images.
	FirmwareImageName    string            `protobuf:"bytes,2,opt,name=firmware_image_name,json=firmwareImageName,proto3" json:"firmware_image_name,omitempty"`
	Type                 FirmwareType_Type `protobuf:"varint,3,opt,name=type,proto3,enum=chromiumos.config.api.software.FirmwareType_Type" json:"type,omitempty"`
	Version              *Version          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FirmwarePayload) Reset()         { *m = FirmwarePayload{} }
func (m *FirmwarePayload) String() string { return proto.CompactTextString(m) }
func (*FirmwarePayload) ProtoMessage()    {}
func (*FirmwarePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_6660a02f418c569d, []int{2}
}

func (m *FirmwarePayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirmwarePayload.Unmarshal(m, b)
}
func (m *FirmwarePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirmwarePayload.Marshal(b, m, deterministic)
}
func (m *FirmwarePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwarePayload.Merge(m, src)
}
func (m *FirmwarePayload) XXX_Size() int {
	return xxx_messageInfo_FirmwarePayload.Size(m)
}
func (m *FirmwarePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwarePayload.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwarePayload proto.InternalMessageInfo

func (m *FirmwarePayload) GetBuildTargetName() string {
	if m != nil {
		return m.BuildTargetName
	}
	return ""
}

func (m *FirmwarePayload) GetFirmwareImageName() string {
	if m != nil {
		return m.FirmwareImageName
	}
	return ""
}

func (m *FirmwarePayload) GetType() FirmwareType_Type {
	if m != nil {
		return m.Type
	}
	return FirmwareType_UNKNOWN
}

func (m *FirmwarePayload) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

// Specifies different firmware payloads to use in a build.
type FirmwareConfig struct {
	// The main read-only firmware.
	MainRoPayload *FirmwarePayload `protobuf:"bytes,1,opt,name=main_ro_payload,json=mainRoPayload,proto3" json:"main_ro_payload,omitempty"`
	// The main read-write firmware.
	MainRwPayload *FirmwarePayload `protobuf:"bytes,2,opt,name=main_rw_payload,json=mainRwPayload,proto3" json:"main_rw_payload,omitempty"`
	// The embedded controller read-only firmware.
	EcRoPayload *FirmwarePayload `protobuf:"bytes,3,opt,name=ec_ro_payload,json=ecRoPayload,proto3" json:"ec_ro_payload,omitempty"`
	// Extra EC build targets to build/include in the EC firmware.
	EcExtras []string `protobuf:"bytes,4,rep,name=ec_extras,json=ecExtras,proto3" json:"ec_extras,omitempty"`
	// The libpayload read-only firmware
	PdRoPayload          *FirmwarePayload `protobuf:"bytes,5,opt,name=pd_ro_payload,json=pdRoPayload,proto3" json:"pd_ro_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FirmwareConfig) Reset()         { *m = FirmwareConfig{} }
func (m *FirmwareConfig) String() string { return proto.CompactTextString(m) }
func (*FirmwareConfig) ProtoMessage()    {}
func (*FirmwareConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6660a02f418c569d, []int{3}
}

func (m *FirmwareConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirmwareConfig.Unmarshal(m, b)
}
func (m *FirmwareConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirmwareConfig.Marshal(b, m, deterministic)
}
func (m *FirmwareConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwareConfig.Merge(m, src)
}
func (m *FirmwareConfig) XXX_Size() int {
	return xxx_messageInfo_FirmwareConfig.Size(m)
}
func (m *FirmwareConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwareConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwareConfig proto.InternalMessageInfo

func (m *FirmwareConfig) GetMainRoPayload() *FirmwarePayload {
	if m != nil {
		return m.MainRoPayload
	}
	return nil
}

func (m *FirmwareConfig) GetMainRwPayload() *FirmwarePayload {
	if m != nil {
		return m.MainRwPayload
	}
	return nil
}

func (m *FirmwareConfig) GetEcRoPayload() *FirmwarePayload {
	if m != nil {
		return m.EcRoPayload
	}
	return nil
}

func (m *FirmwareConfig) GetEcExtras() []string {
	if m != nil {
		return m.EcExtras
	}
	return nil
}

func (m *FirmwareConfig) GetPdRoPayload() *FirmwarePayload {
	if m != nil {
		return m.PdRoPayload
	}
	return nil
}

func init() {
	proto.RegisterEnum("chromiumos.config.api.software.FirmwareType_Type", FirmwareType_Type_name, FirmwareType_Type_value)
	proto.RegisterType((*FirmwareType)(nil), "chromiumos.config.api.software.FirmwareType")
	proto.RegisterType((*Version)(nil), "chromiumos.config.api.software.Version")
	proto.RegisterType((*FirmwarePayload)(nil), "chromiumos.config.api.software.FirmwarePayload")
	proto.RegisterType((*FirmwareConfig)(nil), "chromiumos.config.api.software.FirmwareConfig")
}

func init() { proto.RegisterFile("api/software/firmware_config.proto", fileDescriptor_6660a02f418c569d) }

var fileDescriptor_6660a02f418c569d = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcb, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0xc9, 0x65, 0x3a, 0x9d, 0x13, 0xda, 0x49, 0x0d, 0x8b, 0x48, 0x48, 0x28, 0xca, 0x86,
	0x08, 0x09, 0x47, 0x9d, 0x8a, 0x25, 0x8b, 0x52, 0x06, 0xa9, 0x42, 0x84, 0x2a, 0x14, 0x2a, 0xb1,
	0x89, 0xdc, 0xc4, 0x13, 0x8c, 0xea, 0xd8, 0x72, 0x52, 0x86, 0x79, 0x04, 0x9e, 0x98, 0x2d, 0xb2,
	0x73, 0x69, 0x56, 0x80, 0xca, 0x26, 0x8e, 0xcf, 0xe5, 0xfb, 0xcf, 0xf9, 0x25, 0x43, 0x44, 0x24,
	0x4b, 0x1a, 0xb1, 0x69, 0xb7, 0x44, 0xd1, 0x64, 0xc3, 0x14, 0xd7, 0x3f, 0x79, 0x21, 0xea, 0x0d,
	0xab, 0xb0, 0x54, 0xa2, 0x15, 0xe8, 0x69, 0xf1, 0x55, 0x09, 0xce, 0x6e, 0xb9, 0x68, 0x70, 0x9f,
	0x20, 0x92, 0xe1, 0xa1, 0x2b, 0x7a, 0x05, 0x0f, 0xdf, 0xf6, 0x8d, 0x97, 0x3b, 0x49, 0xa3, 0x17,
	0xe0, 0xea, 0x13, 0x79, 0x30, 0xff, 0x94, 0xbe, 0x4b, 0x3f, 0x5c, 0xa5, 0xfe, 0x03, 0xb4, 0x0f,
	0xee, 0xfb, 0xd3, 0xf3, 0xd4, 0xb7, 0xd0, 0x1e, 0xd8, 0xeb, 0x33, 0xdf, 0xd6, 0xe7, 0xc5, 0x1b,
	0xdf, 0x89, 0x5e, 0xc2, 0xfc, 0x33, 0x55, 0x0d, 0x13, 0x35, 0x7a, 0x0c, 0x33, 0x4e, 0xbe, 0x09,
	0x15, 0x58, 0xa1, 0x15, 0xcf, 0xb2, 0xee, 0x62, 0xa2, 0xac, 0x16, 0x2a, 0xb0, 0xfb, 0xa8, 0xbe,
	0x44, 0xbf, 0x2c, 0x58, 0x0e, 0xb2, 0x17, 0x64, 0x77, 0x23, 0x48, 0x89, 0x9e, 0xc3, 0xd1, 0xf5,
	0x2d, 0xbb, 0x29, 0xf3, 0x96, 0xa8, 0x8a, 0xb6, 0x79, 0x4d, 0x38, 0x35, 0xac, 0x45, 0xb6, 0x34,
	0x89, 0x4b, 0x13, 0x4f, 0x09, 0xa7, 0x08, 0xc3, 0xa3, 0x71, 0x5d, 0xc6, 0x49, 0x45, 0xbb, 0x6a,
	0xdb, 0x54, 0x1f, 0x0d, 0xa9, 0x73, 0x9d, 0x31, 0xf5, 0x6b, 0x70, 0xdb, 0x9d, 0xa4, 0x81, 0x13,
	0x5a, 0xf1, 0xe1, 0xea, 0x18, 0xff, 0xd9, 0x14, 0x3c, 0x75, 0x04, 0xeb, 0x4f, 0x66, 0xda, 0xd1,
	0x29, 0xcc, 0xbf, 0x77, 0xdb, 0x06, 0x6e, 0x68, 0xc5, 0xde, 0xea, 0xd9, 0xdf, 0x48, 0xbd, 0x39,
	0xd9, 0xd0, 0x17, 0xfd, 0x74, 0xe0, 0x70, 0xc0, 0x9f, 0x99, 0x06, 0x74, 0x05, 0x4b, 0x4e, 0x58,
	0x9d, 0x2b, 0x91, 0xcb, 0xce, 0x0b, 0xb3, 0xb6, 0xb7, 0x4a, 0xfe, 0x75, 0xce, 0xde, 0xc2, 0xec,
	0x40, 0x73, 0x32, 0x31, 0x38, 0x3a, 0x82, 0xb7, 0x23, 0xd8, 0xfe, 0x1f, 0xf0, 0x76, 0x00, 0x7f,
	0x84, 0x03, 0x5a, 0x4c, 0xe7, 0x75, 0xee, 0x87, 0xf5, 0x68, 0x71, 0x37, 0xed, 0x13, 0x58, 0xd0,
	0x22, 0xa7, 0x3f, 0x5a, 0x45, 0x9a, 0xc0, 0x0d, 0x9d, 0x78, 0x91, 0xed, 0xd3, 0x62, 0x6d, 0xee,
	0x5a, 0x51, 0x96, 0x53, 0xc5, 0xd9, 0x3d, 0x15, 0x65, 0x39, 0x2a, 0xbe, 0x3e, 0xf9, 0x72, 0x5c,
	0x89, 0x91, 0x80, 0x85, 0xaa, 0x92, 0x3b, 0x5c, 0xd2, 0xe1, 0x92, 0x4a, 0x24, 0xd3, 0x67, 0x76,
	0xbd, 0x67, 0xde, 0xd5, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x62, 0xb0, 0xbf, 0x7d,
	0x03, 0x00, 0x00,
}
