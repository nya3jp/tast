// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: features.proto

package protocol

import (
	api "go.chromium.org/chromiumos/config/go/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeprecatedDeviceConfig_SOC int32

const (
	DeprecatedDeviceConfig_SOC_UNSPECIFIED DeprecatedDeviceConfig_SOC = 0
	// Aka AML-Y
	DeprecatedDeviceConfig_SOC_AMBERLAKE_Y   DeprecatedDeviceConfig_SOC = 1
	DeprecatedDeviceConfig_SOC_APOLLO_LAKE   DeprecatedDeviceConfig_SOC = 2
	DeprecatedDeviceConfig_SOC_BAY_TRAIL     DeprecatedDeviceConfig_SOC = 3
	DeprecatedDeviceConfig_SOC_BRASWELL      DeprecatedDeviceConfig_SOC = 4
	DeprecatedDeviceConfig_SOC_BROADWELL     DeprecatedDeviceConfig_SOC = 5
	DeprecatedDeviceConfig_SOC_CANNON_LAKE_Y DeprecatedDeviceConfig_SOC = 6
	DeprecatedDeviceConfig_SOC_COMET_LAKE_U  DeprecatedDeviceConfig_SOC = 7
	DeprecatedDeviceConfig_SOC_EXYNOS_5250   DeprecatedDeviceConfig_SOC = 8
	DeprecatedDeviceConfig_SOC_EXYNOS_5420   DeprecatedDeviceConfig_SOC = 9
	// Aka GLK
	DeprecatedDeviceConfig_SOC_GEMINI_LAKE DeprecatedDeviceConfig_SOC = 10
	DeprecatedDeviceConfig_SOC_HASWELL     DeprecatedDeviceConfig_SOC = 11
	DeprecatedDeviceConfig_SOC_ICE_LAKE_Y  DeprecatedDeviceConfig_SOC = 12
	DeprecatedDeviceConfig_SOC_IVY_BRIDGE  DeprecatedDeviceConfig_SOC = 13
	DeprecatedDeviceConfig_SOC_KABYLAKE_U  DeprecatedDeviceConfig_SOC = 14
	// KabyLake U refresh
	DeprecatedDeviceConfig_SOC_KABYLAKE_U_R   DeprecatedDeviceConfig_SOC = 15
	DeprecatedDeviceConfig_SOC_KABYLAKE_Y     DeprecatedDeviceConfig_SOC = 16
	DeprecatedDeviceConfig_SOC_MT8173         DeprecatedDeviceConfig_SOC = 17
	DeprecatedDeviceConfig_SOC_MT8176         DeprecatedDeviceConfig_SOC = 18
	DeprecatedDeviceConfig_SOC_MT8183         DeprecatedDeviceConfig_SOC = 19
	DeprecatedDeviceConfig_SOC_PICASSO        DeprecatedDeviceConfig_SOC = 20
	DeprecatedDeviceConfig_SOC_PINE_TRAIL     DeprecatedDeviceConfig_SOC = 21
	DeprecatedDeviceConfig_SOC_RK3288         DeprecatedDeviceConfig_SOC = 22
	DeprecatedDeviceConfig_SOC_RK3399         DeprecatedDeviceConfig_SOC = 23
	DeprecatedDeviceConfig_SOC_SANDY_BRIDGE   DeprecatedDeviceConfig_SOC = 24
	DeprecatedDeviceConfig_SOC_SDM845         DeprecatedDeviceConfig_SOC = 25
	DeprecatedDeviceConfig_SOC_SKYLAKE_U      DeprecatedDeviceConfig_SOC = 26
	DeprecatedDeviceConfig_SOC_SKYLAKE_Y      DeprecatedDeviceConfig_SOC = 27
	DeprecatedDeviceConfig_SOC_STONEY_RIDGE   DeprecatedDeviceConfig_SOC = 28
	DeprecatedDeviceConfig_SOC_TEGRA_K1       DeprecatedDeviceConfig_SOC = 29
	DeprecatedDeviceConfig_SOC_WHISKEY_LAKE_U DeprecatedDeviceConfig_SOC = 30
	DeprecatedDeviceConfig_SOC_SC7180         DeprecatedDeviceConfig_SOC = 31
	DeprecatedDeviceConfig_SOC_JASPER_LAKE    DeprecatedDeviceConfig_SOC = 32
	DeprecatedDeviceConfig_SOC_TIGER_LAKE     DeprecatedDeviceConfig_SOC = 33
	DeprecatedDeviceConfig_SOC_MT8192         DeprecatedDeviceConfig_SOC = 34
	DeprecatedDeviceConfig_SOC_ALDER_LAKE     DeprecatedDeviceConfig_SOC = 35
	DeprecatedDeviceConfig_SOC_SC7280         DeprecatedDeviceConfig_SOC = 36
	DeprecatedDeviceConfig_SOC_MT8195         DeprecatedDeviceConfig_SOC = 37
	DeprecatedDeviceConfig_SOC_MT8186         DeprecatedDeviceConfig_SOC = 38
)

// Enum value maps for DeprecatedDeviceConfig_SOC.
var (
	DeprecatedDeviceConfig_SOC_name = map[int32]string{
		0:  "SOC_UNSPECIFIED",
		1:  "SOC_AMBERLAKE_Y",
		2:  "SOC_APOLLO_LAKE",
		3:  "SOC_BAY_TRAIL",
		4:  "SOC_BRASWELL",
		5:  "SOC_BROADWELL",
		6:  "SOC_CANNON_LAKE_Y",
		7:  "SOC_COMET_LAKE_U",
		8:  "SOC_EXYNOS_5250",
		9:  "SOC_EXYNOS_5420",
		10: "SOC_GEMINI_LAKE",
		11: "SOC_HASWELL",
		12: "SOC_ICE_LAKE_Y",
		13: "SOC_IVY_BRIDGE",
		14: "SOC_KABYLAKE_U",
		15: "SOC_KABYLAKE_U_R",
		16: "SOC_KABYLAKE_Y",
		17: "SOC_MT8173",
		18: "SOC_MT8176",
		19: "SOC_MT8183",
		20: "SOC_PICASSO",
		21: "SOC_PINE_TRAIL",
		22: "SOC_RK3288",
		23: "SOC_RK3399",
		24: "SOC_SANDY_BRIDGE",
		25: "SOC_SDM845",
		26: "SOC_SKYLAKE_U",
		27: "SOC_SKYLAKE_Y",
		28: "SOC_STONEY_RIDGE",
		29: "SOC_TEGRA_K1",
		30: "SOC_WHISKEY_LAKE_U",
		31: "SOC_SC7180",
		32: "SOC_JASPER_LAKE",
		33: "SOC_TIGER_LAKE",
		34: "SOC_MT8192",
		35: "SOC_ALDER_LAKE",
		36: "SOC_SC7280",
		37: "SOC_MT8195",
		38: "SOC_MT8186",
	}
	DeprecatedDeviceConfig_SOC_value = map[string]int32{
		"SOC_UNSPECIFIED":    0,
		"SOC_AMBERLAKE_Y":    1,
		"SOC_APOLLO_LAKE":    2,
		"SOC_BAY_TRAIL":      3,
		"SOC_BRASWELL":       4,
		"SOC_BROADWELL":      5,
		"SOC_CANNON_LAKE_Y":  6,
		"SOC_COMET_LAKE_U":   7,
		"SOC_EXYNOS_5250":    8,
		"SOC_EXYNOS_5420":    9,
		"SOC_GEMINI_LAKE":    10,
		"SOC_HASWELL":        11,
		"SOC_ICE_LAKE_Y":     12,
		"SOC_IVY_BRIDGE":     13,
		"SOC_KABYLAKE_U":     14,
		"SOC_KABYLAKE_U_R":   15,
		"SOC_KABYLAKE_Y":     16,
		"SOC_MT8173":         17,
		"SOC_MT8176":         18,
		"SOC_MT8183":         19,
		"SOC_PICASSO":        20,
		"SOC_PINE_TRAIL":     21,
		"SOC_RK3288":         22,
		"SOC_RK3399":         23,
		"SOC_SANDY_BRIDGE":   24,
		"SOC_SDM845":         25,
		"SOC_SKYLAKE_U":      26,
		"SOC_SKYLAKE_Y":      27,
		"SOC_STONEY_RIDGE":   28,
		"SOC_TEGRA_K1":       29,
		"SOC_WHISKEY_LAKE_U": 30,
		"SOC_SC7180":         31,
		"SOC_JASPER_LAKE":    32,
		"SOC_TIGER_LAKE":     33,
		"SOC_MT8192":         34,
		"SOC_ALDER_LAKE":     35,
		"SOC_SC7280":         36,
		"SOC_MT8195":         37,
		"SOC_MT8186":         38,
	}
)

func (x DeprecatedDeviceConfig_SOC) Enum() *DeprecatedDeviceConfig_SOC {
	p := new(DeprecatedDeviceConfig_SOC)
	*p = x
	return p
}

func (x DeprecatedDeviceConfig_SOC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedDeviceConfig_SOC) Descriptor() protoreflect.EnumDescriptor {
	return file_features_proto_enumTypes[0].Descriptor()
}

func (DeprecatedDeviceConfig_SOC) Type() protoreflect.EnumType {
	return &file_features_proto_enumTypes[0]
}

func (x DeprecatedDeviceConfig_SOC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedDeviceConfig_SOC.Descriptor instead.
func (DeprecatedDeviceConfig_SOC) EnumDescriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{5, 0}
}

type DeprecatedDeviceConfig_Architecture int32

const (
	DeprecatedDeviceConfig_ARCHITECTURE_UNDEFINED DeprecatedDeviceConfig_Architecture = 0
	DeprecatedDeviceConfig_X86                    DeprecatedDeviceConfig_Architecture = 1
	DeprecatedDeviceConfig_X86_64                 DeprecatedDeviceConfig_Architecture = 2
	DeprecatedDeviceConfig_ARM                    DeprecatedDeviceConfig_Architecture = 3
	DeprecatedDeviceConfig_ARM64                  DeprecatedDeviceConfig_Architecture = 4
)

// Enum value maps for DeprecatedDeviceConfig_Architecture.
var (
	DeprecatedDeviceConfig_Architecture_name = map[int32]string{
		0: "ARCHITECTURE_UNDEFINED",
		1: "X86",
		2: "X86_64",
		3: "ARM",
		4: "ARM64",
	}
	DeprecatedDeviceConfig_Architecture_value = map[string]int32{
		"ARCHITECTURE_UNDEFINED": 0,
		"X86":                    1,
		"X86_64":                 2,
		"ARM":                    3,
		"ARM64":                  4,
	}
)

func (x DeprecatedDeviceConfig_Architecture) Enum() *DeprecatedDeviceConfig_Architecture {
	p := new(DeprecatedDeviceConfig_Architecture)
	*p = x
	return p
}

func (x DeprecatedDeviceConfig_Architecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedDeviceConfig_Architecture) Descriptor() protoreflect.EnumDescriptor {
	return file_features_proto_enumTypes[1].Descriptor()
}

func (DeprecatedDeviceConfig_Architecture) Type() protoreflect.EnumType {
	return &file_features_proto_enumTypes[1]
}

func (x DeprecatedDeviceConfig_Architecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedDeviceConfig_Architecture.Descriptor instead.
func (DeprecatedDeviceConfig_Architecture) EnumDescriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{5, 1}
}

// Indicate the device's power supply.
type DeprecatedDeviceConfig_PowerSupply int32

const (
	DeprecatedDeviceConfig_POWER_SUPPLY_UNSPECIFIED DeprecatedDeviceConfig_PowerSupply = 0
	DeprecatedDeviceConfig_POWER_SUPPLY_BATTERY     DeprecatedDeviceConfig_PowerSupply = 1
	DeprecatedDeviceConfig_POWER_SUPPLY_AC_ONLY     DeprecatedDeviceConfig_PowerSupply = 2
)

// Enum value maps for DeprecatedDeviceConfig_PowerSupply.
var (
	DeprecatedDeviceConfig_PowerSupply_name = map[int32]string{
		0: "POWER_SUPPLY_UNSPECIFIED",
		1: "POWER_SUPPLY_BATTERY",
		2: "POWER_SUPPLY_AC_ONLY",
	}
	DeprecatedDeviceConfig_PowerSupply_value = map[string]int32{
		"POWER_SUPPLY_UNSPECIFIED": 0,
		"POWER_SUPPLY_BATTERY":     1,
		"POWER_SUPPLY_AC_ONLY":     2,
	}
)

func (x DeprecatedDeviceConfig_PowerSupply) Enum() *DeprecatedDeviceConfig_PowerSupply {
	p := new(DeprecatedDeviceConfig_PowerSupply)
	*p = x
	return p
}

func (x DeprecatedDeviceConfig_PowerSupply) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedDeviceConfig_PowerSupply) Descriptor() protoreflect.EnumDescriptor {
	return file_features_proto_enumTypes[2].Descriptor()
}

func (DeprecatedDeviceConfig_PowerSupply) Type() protoreflect.EnumType {
	return &file_features_proto_enumTypes[2]
}

func (x DeprecatedDeviceConfig_PowerSupply) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedDeviceConfig_PowerSupply.Descriptor instead.
func (DeprecatedDeviceConfig_PowerSupply) EnumDescriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{5, 2}
}

// Features represents a set of features available for tests.
type Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CheckDeps indicates whether to skip tests whose dependencies are not
	// satisfied by available features.
	CheckDeps         bool                    `protobuf:"varint,5,opt,name=check_deps,json=checkDeps,proto3" json:"check_deps,omitempty"`
	Dut               *DUTFeatures            `protobuf:"bytes,6,opt,name=dut,proto3" json:"dut,omitempty"`
	Infra             *InfraFeatures          `protobuf:"bytes,7,opt,name=infra,proto3" json:"infra,omitempty"`
	CompanionFeatures map[string]*DUTFeatures `protobuf:"bytes,8,rep,name=companionFeatures,proto3" json:"companionFeatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Features) Reset() {
	*x = Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_features_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_features_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{0}
}

func (x *Features) GetCheckDeps() bool {
	if x != nil {
		return x.CheckDeps
	}
	return false
}

func (x *Features) GetDut() *DUTFeatures {
	if x != nil {
		return x.Dut
	}
	return nil
}

func (x *Features) GetInfra() *InfraFeatures {
	if x != nil {
		return x.Infra
	}
	return nil
}

func (x *Features) GetCompanionFeatures() map[string]*DUTFeatures {
	if x != nil {
		return x.CompanionFeatures
	}
	return nil
}

// DUTFeatures represents a set of features the DUT provides.
type DUTFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Software *SoftwareFeatures `protobuf:"bytes,1,opt,name=software,proto3" json:"software,omitempty"`
	Hardware *HardwareFeatures `protobuf:"bytes,2,opt,name=hardware,proto3" json:"hardware,omitempty"`
}

func (x *DUTFeatures) Reset() {
	*x = DUTFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_features_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DUTFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DUTFeatures) ProtoMessage() {}

func (x *DUTFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_features_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DUTFeatures.ProtoReflect.Descriptor instead.
func (*DUTFeatures) Descriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{1}
}

func (x *DUTFeatures) GetSoftware() *SoftwareFeatures {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *DUTFeatures) GetHardware() *HardwareFeatures {
	if x != nil {
		return x.Hardware
	}
	return nil
}

// InfraFeatures represents a set of features made available by testing
// infrastructure.
type InfraFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vars             map[string]string `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaybeMissingVars string            `protobuf:"bytes,2,opt,name=maybe_missing_vars,json=maybeMissingVars,proto3" json:"maybe_missing_vars,omitempty"`
}

func (x *InfraFeatures) Reset() {
	*x = InfraFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_features_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfraFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfraFeatures) ProtoMessage() {}

func (x *InfraFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_features_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfraFeatures.ProtoReflect.Descriptor instead.
func (*InfraFeatures) Descriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{2}
}

func (x *InfraFeatures) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *InfraFeatures) GetMaybeMissingVars() string {
	if x != nil {
		return x.MaybeMissingVars
	}
	return ""
}

// SoftwareFeatures represents a set of software features available for the
// image being tested.
type SoftwareFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available   []string `protobuf:"bytes,1,rep,name=available,proto3" json:"available,omitempty"`
	Unavailable []string `protobuf:"bytes,2,rep,name=unavailable,proto3" json:"unavailable,omitempty"`
}

func (x *SoftwareFeatures) Reset() {
	*x = SoftwareFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_features_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareFeatures) ProtoMessage() {}

func (x *SoftwareFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_features_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareFeatures.ProtoReflect.Descriptor instead.
func (*SoftwareFeatures) Descriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{3}
}

func (x *SoftwareFeatures) GetAvailable() []string {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *SoftwareFeatures) GetUnavailable() []string {
	if x != nil {
		return x.Unavailable
	}
	return nil
}

// DeprecatedConfigId is the labels given to DUT based on the hardware model or
// platform name. These information is fetched from the DUT at runtime by the
// framework.
type DeprecatedConfigId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model    string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Brand    string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *DeprecatedConfigId) Reset() {
	*x = DeprecatedConfigId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_features_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedConfigId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedConfigId) ProtoMessage() {}

func (x *DeprecatedConfigId) ProtoReflect() protoreflect.Message {
	mi := &file_features_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedConfigId.ProtoReflect.Descriptor instead.
func (*DeprecatedConfigId) Descriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{4}
}

func (x *DeprecatedConfigId) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeprecatedConfigId) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeprecatedConfigId) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

// DeprecatedDeviceConfig stores DUT characteristics not covered by
// config.api.HardwareFeatures. Some fields/enums were copied from
// go.chromium.org/chromiumos/infra/proto/go/device package.
type DeprecatedDeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *DeprecatedConfigId                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Soc   DeprecatedDeviceConfig_SOC          `protobuf:"varint,2,opt,name=soc,proto3,enum=tast.core.DeprecatedDeviceConfig_SOC" json:"soc,omitempty"`
	Cpu   DeprecatedDeviceConfig_Architecture `protobuf:"varint,3,opt,name=cpu,proto3,enum=tast.core.DeprecatedDeviceConfig_Architecture" json:"cpu,omitempty"`
	Power DeprecatedDeviceConfig_PowerSupply  `protobuf:"varint,4,opt,name=power,proto3,enum=tast.core.DeprecatedDeviceConfig_PowerSupply" json:"power,omitempty"`
	// Indicate the device's storage supporting NVMe self-test or not.
	HasNvmeSelfTest bool `protobuf:"varint,5,opt,name=has_nvme_self_test,json=hasNvmeSelfTest,proto3" json:"has_nvme_self_test,omitempty"`
	// HasVboot2 indicates whether device uses vboot2.
	HasVboot2 bool `protobuf:"varint,6,opt,name=has_vboot2,json=hasVboot2,proto3" json:"has_vboot2,omitempty"`
}

func (x *DeprecatedDeviceConfig) Reset() {
	*x = DeprecatedDeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_features_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedDeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedDeviceConfig) ProtoMessage() {}

func (x *DeprecatedDeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_features_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedDeviceConfig.ProtoReflect.Descriptor instead.
func (*DeprecatedDeviceConfig) Descriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{5}
}

func (x *DeprecatedDeviceConfig) GetId() *DeprecatedConfigId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeprecatedDeviceConfig) GetSoc() DeprecatedDeviceConfig_SOC {
	if x != nil {
		return x.Soc
	}
	return DeprecatedDeviceConfig_SOC_UNSPECIFIED
}

func (x *DeprecatedDeviceConfig) GetCpu() DeprecatedDeviceConfig_Architecture {
	if x != nil {
		return x.Cpu
	}
	return DeprecatedDeviceConfig_ARCHITECTURE_UNDEFINED
}

func (x *DeprecatedDeviceConfig) GetPower() DeprecatedDeviceConfig_PowerSupply {
	if x != nil {
		return x.Power
	}
	return DeprecatedDeviceConfig_POWER_SUPPLY_UNSPECIFIED
}

func (x *DeprecatedDeviceConfig) GetHasNvmeSelfTest() bool {
	if x != nil {
		return x.HasNvmeSelfTest
	}
	return false
}

func (x *DeprecatedDeviceConfig) GetHasVboot2() bool {
	if x != nil {
		return x.HasVboot2
	}
	return false
}

// HardwareFeatures represents a set of hardware features available for the
// device model being tested.
type HardwareFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareFeatures       *api.HardwareFeatures   `protobuf:"bytes,1,opt,name=hardware_features,json=hardwareFeatures,proto3" json:"hardware_features,omitempty"`
	DeprecatedDeviceConfig *DeprecatedDeviceConfig `protobuf:"bytes,3,opt,name=deprecated_device_config,json=deprecatedDeviceConfig,proto3" json:"deprecated_device_config,omitempty"`
}

func (x *HardwareFeatures) Reset() {
	*x = HardwareFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_features_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareFeatures) ProtoMessage() {}

func (x *HardwareFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_features_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareFeatures.ProtoReflect.Descriptor instead.
func (*HardwareFeatures) Descriptor() ([]byte, []int) {
	return file_features_proto_rawDescGZIP(), []int{6}
}

func (x *HardwareFeatures) GetHardwareFeatures() *api.HardwareFeatures {
	if x != nil {
		return x.HardwareFeatures
	}
	return nil
}

func (x *HardwareFeatures) GetDeprecatedDeviceConfig() *DeprecatedDeviceConfig {
	if x != nil {
		return x.DeprecatedDeviceConfig
	}
	return nil
}

var File_features_proto protoreflect.FileDescriptor

var file_features_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x24, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc1, 0x02, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x73, 0x12, 0x28, 0x0a,
	0x03, 0x64, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73,
	0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x55, 0x54, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x03, 0x64, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x12, 0x58, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x1a, 0x5c, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x55, 0x54, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x05, 0x22, 0x7f, 0x0a, 0x0b, 0x44, 0x55, 0x54, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61,
	0x79, 0x62, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x10, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x12, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x22, 0xf9, 0x09, 0x0a, 0x16, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x4f, 0x43, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x40, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x43,
	0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x76, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x68, 0x61, 0x73, 0x4e, 0x76, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x62, 0x6f, 0x6f, 0x74, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x56, 0x62, 0x6f, 0x6f, 0x74, 0x32, 0x22,
	0xed, 0x05, 0x0a, 0x03, 0x53, 0x4f, 0x43, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x4f, 0x43, 0x5f, 0x41, 0x4d, 0x42, 0x45, 0x52, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x59, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x5f, 0x41, 0x50, 0x4f, 0x4c, 0x4c, 0x4f, 0x5f,
	0x4c, 0x41, 0x4b, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x5f, 0x42, 0x41,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x43,
	0x5f, 0x42, 0x52, 0x41, 0x53, 0x57, 0x45, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x4f, 0x43, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x57, 0x45, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x4f, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4b,
	0x45, 0x5f, 0x59, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x5f, 0x43, 0x4f, 0x4d,
	0x45, 0x54, 0x5f, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x55, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x4f, 0x43, 0x5f, 0x45, 0x58, 0x59, 0x4e, 0x4f, 0x53, 0x5f, 0x35, 0x32, 0x35, 0x30, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x5f, 0x45, 0x58, 0x59, 0x4e, 0x4f, 0x53, 0x5f, 0x35,
	0x34, 0x32, 0x30, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x5f, 0x47, 0x45, 0x4d,
	0x49, 0x4e, 0x49, 0x5f, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f,
	0x43, 0x5f, 0x48, 0x41, 0x53, 0x57, 0x45, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x4f, 0x43, 0x5f, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x59, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x5f, 0x49, 0x56, 0x59, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47,
	0x45, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x5f, 0x4b, 0x41, 0x42, 0x59, 0x4c,
	0x41, 0x4b, 0x45, 0x5f, 0x55, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x5f, 0x4b,
	0x41, 0x42, 0x59, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x55, 0x5f, 0x52, 0x10, 0x0f, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x4f, 0x43, 0x5f, 0x4b, 0x41, 0x42, 0x59, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x59, 0x10,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x4d, 0x54, 0x38, 0x31, 0x37, 0x33, 0x10,
	0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x4d, 0x54, 0x38, 0x31, 0x37, 0x36, 0x10,
	0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x4d, 0x54, 0x38, 0x31, 0x38, 0x33, 0x10,
	0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x43, 0x5f, 0x50, 0x49, 0x43, 0x41, 0x53, 0x53, 0x4f,
	0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x5f, 0x50, 0x49, 0x4e, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x49, 0x4c, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x52, 0x4b,
	0x33, 0x32, 0x38, 0x38, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x52, 0x4b,
	0x33, 0x33, 0x39, 0x39, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x5f, 0x53, 0x41,
	0x4e, 0x44, 0x59, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x4f, 0x43, 0x5f, 0x53, 0x44, 0x4d, 0x38, 0x34, 0x35, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x4f, 0x43, 0x5f, 0x53, 0x4b, 0x59, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x55, 0x10, 0x1a, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x5f, 0x53, 0x4b, 0x59, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x59,
	0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x59,
	0x5f, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x43, 0x5f,
	0x54, 0x45, 0x47, 0x52, 0x41, 0x5f, 0x4b, 0x31, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f,
	0x43, 0x5f, 0x57, 0x48, 0x49, 0x53, 0x4b, 0x45, 0x59, 0x5f, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x55,
	0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x53, 0x43, 0x37, 0x31, 0x38, 0x30,
	0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x43, 0x5f, 0x4a, 0x41, 0x53, 0x50, 0x45, 0x52,
	0x5f, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x5f, 0x54,
	0x49, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x4f, 0x43, 0x5f, 0x4d, 0x54, 0x38, 0x31, 0x39, 0x32, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x4f, 0x43, 0x5f, 0x41, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x23, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x53, 0x43, 0x37, 0x32, 0x38, 0x30, 0x10, 0x24, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x4d, 0x54, 0x38, 0x31, 0x39, 0x35, 0x10, 0x25, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x43, 0x5f, 0x4d, 0x54, 0x38, 0x31, 0x38, 0x36, 0x10, 0x26, 0x22,
	0x53, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x58,
	0x38, 0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x4d, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x4d,
	0x36, 0x34, 0x10, 0x04, 0x22, 0x5f, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x02, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x10,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f,
	0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_features_proto_rawDescOnce sync.Once
	file_features_proto_rawDescData = file_features_proto_rawDesc
)

func file_features_proto_rawDescGZIP() []byte {
	file_features_proto_rawDescOnce.Do(func() {
		file_features_proto_rawDescData = protoimpl.X.CompressGZIP(file_features_proto_rawDescData)
	})
	return file_features_proto_rawDescData
}

var file_features_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_features_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_features_proto_goTypes = []interface{}{
	(DeprecatedDeviceConfig_SOC)(0),          // 0: tast.core.DeprecatedDeviceConfig.SOC
	(DeprecatedDeviceConfig_Architecture)(0), // 1: tast.core.DeprecatedDeviceConfig.Architecture
	(DeprecatedDeviceConfig_PowerSupply)(0),  // 2: tast.core.DeprecatedDeviceConfig.PowerSupply
	(*Features)(nil),                         // 3: tast.core.Features
	(*DUTFeatures)(nil),                      // 4: tast.core.DUTFeatures
	(*InfraFeatures)(nil),                    // 5: tast.core.InfraFeatures
	(*SoftwareFeatures)(nil),                 // 6: tast.core.SoftwareFeatures
	(*DeprecatedConfigId)(nil),               // 7: tast.core.DeprecatedConfigId
	(*DeprecatedDeviceConfig)(nil),           // 8: tast.core.DeprecatedDeviceConfig
	(*HardwareFeatures)(nil),                 // 9: tast.core.HardwareFeatures
	nil,                                      // 10: tast.core.Features.CompanionFeaturesEntry
	nil,                                      // 11: tast.core.InfraFeatures.VarsEntry
	(*api.HardwareFeatures)(nil),             // 12: chromiumos.config.api.HardwareFeatures
}
var file_features_proto_depIdxs = []int32{
	4,  // 0: tast.core.Features.dut:type_name -> tast.core.DUTFeatures
	5,  // 1: tast.core.Features.infra:type_name -> tast.core.InfraFeatures
	10, // 2: tast.core.Features.companionFeatures:type_name -> tast.core.Features.CompanionFeaturesEntry
	6,  // 3: tast.core.DUTFeatures.software:type_name -> tast.core.SoftwareFeatures
	9,  // 4: tast.core.DUTFeatures.hardware:type_name -> tast.core.HardwareFeatures
	11, // 5: tast.core.InfraFeatures.vars:type_name -> tast.core.InfraFeatures.VarsEntry
	7,  // 6: tast.core.DeprecatedDeviceConfig.id:type_name -> tast.core.DeprecatedConfigId
	0,  // 7: tast.core.DeprecatedDeviceConfig.soc:type_name -> tast.core.DeprecatedDeviceConfig.SOC
	1,  // 8: tast.core.DeprecatedDeviceConfig.cpu:type_name -> tast.core.DeprecatedDeviceConfig.Architecture
	2,  // 9: tast.core.DeprecatedDeviceConfig.power:type_name -> tast.core.DeprecatedDeviceConfig.PowerSupply
	12, // 10: tast.core.HardwareFeatures.hardware_features:type_name -> chromiumos.config.api.HardwareFeatures
	8,  // 11: tast.core.HardwareFeatures.deprecated_device_config:type_name -> tast.core.DeprecatedDeviceConfig
	4,  // 12: tast.core.Features.CompanionFeaturesEntry.value:type_name -> tast.core.DUTFeatures
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_features_proto_init() }
func file_features_proto_init() {
	if File_features_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_features_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_features_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DUTFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_features_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfraFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_features_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_features_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedConfigId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_features_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedDeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_features_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_features_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_features_proto_goTypes,
		DependencyIndexes: file_features_proto_depIdxs,
		EnumInfos:         file_features_proto_enumTypes,
		MessageInfos:      file_features_proto_msgTypes,
	}.Build()
	File_features_proto = out.File
	file_features_proto_rawDesc = nil
	file_features_proto_goTypes = nil
	file_features_proto_depIdxs = nil
}
