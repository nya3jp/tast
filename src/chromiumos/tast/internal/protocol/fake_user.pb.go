// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fake_user.proto

// Services in this file belong to the tast.coretest package, not to the
// tast.core package, so that they look more like user-defined services.

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("fake_user.proto", fileDescriptor_5216297d3d348873) }

var fileDescriptor_5216297d3d348873 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4b, 0xcc, 0x4e,
	0x8d, 0x2f, 0x2d, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x49, 0x2c,
	0x2e, 0xd1, 0x4b, 0xce, 0x2f, 0x4a, 0x2d, 0x49, 0x2d, 0x2e, 0x91, 0x92, 0x4e, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x07, 0x4b, 0x26, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0xd4,
	0x1a, 0xb9, 0x70, 0x71, 0x04, 0x64, 0xe6, 0xa5, 0x87, 0x16, 0xa7, 0x16, 0x09, 0x59, 0x70, 0xb1,
	0x80, 0xd8, 0x42, 0x62, 0x7a, 0x10, 0x1d, 0x7a, 0x30, 0x1d, 0x7a, 0xae, 0x20, 0x1d, 0x52, 0x38,
	0xc4, 0x95, 0x18, 0x9c, 0x94, 0xa3, 0x14, 0x93, 0x33, 0x8a, 0xf2, 0x73, 0x33, 0x4b, 0x73, 0xf3,
	0x8b, 0xf5, 0x41, 0xd6, 0xeb, 0x67, 0xe6, 0x95, 0xa4, 0x16, 0xe5, 0x25, 0xe6, 0x40, 0xac, 0x4d,
	0xce, 0xcf, 0x49, 0x62, 0x03, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x7e, 0x0a,
	0x2b, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingUserClient is the client API for PingUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingUserClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pingUserClient struct {
	cc *grpc.ClientConn
}

func NewPingUserClient(cc *grpc.ClientConn) PingUserClient {
	return &pingUserClient{cc}
}

func (c *pingUserClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.coretest.PingUser/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingUserServer is the server API for PingUser service.
type PingUserServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedPingUserServer can be embedded to have forward compatible implementations.
type UnimplementedPingUserServer struct {
}

func (*UnimplementedPingUserServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterPingUserServer(s *grpc.Server, srv PingUserServer) {
	s.RegisterService(&_PingUser_serviceDesc, srv)
}

func _PingUser_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingUserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.coretest.PingUser/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingUserServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.coretest.PingUser",
	HandlerType: (*PingUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingUser_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fake_user.proto",
}
