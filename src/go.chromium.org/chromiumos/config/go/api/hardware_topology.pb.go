// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/hardware_topology.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Contains hardware related system features that are tracked by Google to
// differentiate distinct hardware build configurations. Generally these
// hardware-related system features are not easily probe-able at run time.
//
// This SHOULD NOT be used to track second sourced components that are drop in
// replacements.
//
// Note the types here are Topology values instead of enums. The individual
// Design repos should check that any CL landing has acceptable Topology values.
// Most values are effectively stringly typed enums.
type HardwareTopology struct {
	// Specify hardware screen topology hardware.
	// See ./hardware_topology.md#screen for more information.
	Screen *Topology `protobuf:"bytes,1,opt,name=screen,proto3" json:"screen,omitempty"`
	// Specify functional form factor type of hardware.
	// See ./hardware_topology.md#form-factor for more information.
	FormFactor *Topology `protobuf:"bytes,2,opt,name=form_factor,json=formFactor,proto3" json:"form_factor,omitempty"`
	// Specify the audio codec topology.
	// See ./hardware_topology.md#audio for more information
	Audio *Topology `protobuf:"bytes,3,opt,name=audio,proto3" json:"audio,omitempty"`
	// Specify the stylus topology.
	// See ./hardware_topology.md#stylus for more information.
	Stylus *Topology `protobuf:"bytes,4,opt,name=stylus,proto3" json:"stylus,omitempty"`
	// Specify the internal keyboard topology.
	// See ./hardware_topology.md#keyboard for more information.
	Keyboard *Topology `protobuf:"bytes,5,opt,name=keyboard,proto3" json:"keyboard,omitempty"`
	// Specify which thermal topology.
	// See ./hardware_topology.md#thermal for more information.
	Thermal *Topology `protobuf:"bytes,6,opt,name=thermal,proto3" json:"thermal,omitempty"`
	// Specify the camera topology.
	// See ./hardware_topology.md#camera for more information.
	Camera *Topology `protobuf:"bytes,7,opt,name=camera,proto3" json:"camera,omitempty"`
	// Specify the accelerometer/gyroscope/magetometer topology.
	// See ./hardware_topology.md#sensor for more information.
	AccelerometerGyroscopeMagnetometer *Topology `protobuf:"bytes,8,opt,name=accelerometer_gyroscope_magnetometer,json=accelerometerGyroscopeMagnetometer,proto3" json:"accelerometer_gyroscope_magnetometer,omitempty"`
	// Specify the fingerprint sensor topology.
	// See ./hardware_topology.md#fingerprint-sensor for more information.
	Fingerprint *Topology `protobuf:"bytes,9,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Specify the proximity sensor topology.
	// See ./hardware_topology.md#sensor for more information.
	ProximitySensor *Topology `protobuf:"bytes,10,opt,name=proximity_sensor,json=proximitySensor,proto3" json:"proximity_sensor,omitempty"`
	// Specify the daughter board topology.
	// See ./hardware_topology.md#daughter-board for more information.
	DaughterBoard *Topology `protobuf:"bytes,11,opt,name=daughter_board,json=daughterBoard,proto3" json:"daughter_board,omitempty"`
	// Specify the non-volatile storage topology.
	// See ./hardware_topology.md#non_volatile-storage for more information.
	NonVolatileStorage *Topology `protobuf:"bytes,12,opt,name=non_volatile_storage,json=nonVolatileStorage,proto3" json:"non_volatile_storage,omitempty"`
	// Specify the ram topology.
	// See ./hardware_topology.md#ram for more information.
	Ram *Topology `protobuf:"bytes,13,opt,name=ram,proto3" json:"ram,omitempty"`
	// Specify the wifi topology.
	// See ./hardware_topology.md#wifi for more information.
	Wifi *Topology `protobuf:"bytes,14,opt,name=wifi,proto3" json:"wifi,omitempty"`
	// Specify the LTE sub-board topology.
	// See ./hardware_topology.md#lte-board for more information.
	LteBoard *Topology `protobuf:"bytes,15,opt,name=lte_board,json=lteBoard,proto3" json:"lte_board,omitempty"`
	// Specify the SD card reader topology.
	// See ./hardware_topology.md#sd-reader for more information.
	SdReader *Topology `protobuf:"bytes,16,opt,name=sd_reader,json=sdReader,proto3" json:"sd_reader,omitempty"`
	// Specify the motherboard USB topology
	// See ./hardware_topology.md#motherboard-usb for more information.
	MotherboardUsb       *Topology `protobuf:"bytes,17,opt,name=motherboard_usb,json=motherboardUsb,proto3" json:"motherboard_usb,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HardwareTopology) Reset()         { *m = HardwareTopology{} }
func (m *HardwareTopology) String() string { return proto.CompactTextString(m) }
func (*HardwareTopology) ProtoMessage()    {}
func (*HardwareTopology) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b3edb686c39425b, []int{0}
}

func (m *HardwareTopology) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareTopology.Unmarshal(m, b)
}
func (m *HardwareTopology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareTopology.Marshal(b, m, deterministic)
}
func (m *HardwareTopology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareTopology.Merge(m, src)
}
func (m *HardwareTopology) XXX_Size() int {
	return xxx_messageInfo_HardwareTopology.Size(m)
}
func (m *HardwareTopology) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareTopology.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareTopology proto.InternalMessageInfo

func (m *HardwareTopology) GetScreen() *Topology {
	if m != nil {
		return m.Screen
	}
	return nil
}

func (m *HardwareTopology) GetFormFactor() *Topology {
	if m != nil {
		return m.FormFactor
	}
	return nil
}

func (m *HardwareTopology) GetAudio() *Topology {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *HardwareTopology) GetStylus() *Topology {
	if m != nil {
		return m.Stylus
	}
	return nil
}

func (m *HardwareTopology) GetKeyboard() *Topology {
	if m != nil {
		return m.Keyboard
	}
	return nil
}

func (m *HardwareTopology) GetThermal() *Topology {
	if m != nil {
		return m.Thermal
	}
	return nil
}

func (m *HardwareTopology) GetCamera() *Topology {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *HardwareTopology) GetAccelerometerGyroscopeMagnetometer() *Topology {
	if m != nil {
		return m.AccelerometerGyroscopeMagnetometer
	}
	return nil
}

func (m *HardwareTopology) GetFingerprint() *Topology {
	if m != nil {
		return m.Fingerprint
	}
	return nil
}

func (m *HardwareTopology) GetProximitySensor() *Topology {
	if m != nil {
		return m.ProximitySensor
	}
	return nil
}

func (m *HardwareTopology) GetDaughterBoard() *Topology {
	if m != nil {
		return m.DaughterBoard
	}
	return nil
}

func (m *HardwareTopology) GetNonVolatileStorage() *Topology {
	if m != nil {
		return m.NonVolatileStorage
	}
	return nil
}

func (m *HardwareTopology) GetRam() *Topology {
	if m != nil {
		return m.Ram
	}
	return nil
}

func (m *HardwareTopology) GetWifi() *Topology {
	if m != nil {
		return m.Wifi
	}
	return nil
}

func (m *HardwareTopology) GetLteBoard() *Topology {
	if m != nil {
		return m.LteBoard
	}
	return nil
}

func (m *HardwareTopology) GetSdReader() *Topology {
	if m != nil {
		return m.SdReader
	}
	return nil
}

func (m *HardwareTopology) GetMotherboardUsb() *Topology {
	if m != nil {
		return m.MotherboardUsb
	}
	return nil
}

func init() {
	proto.RegisterType((*HardwareTopology)(nil), "chromiumos.config.api.HardwareTopology")
}

func init() { proto.RegisterFile("api/hardware_topology.proto", fileDescriptor_9b3edb686c39425b) }

var fileDescriptor_9b3edb686c39425b = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6f, 0xd3, 0x4c,
	0x10, 0x40, 0xd5, 0xaf, 0x6d, 0x9a, 0x4c, 0xbe, 0x26, 0x61, 0x05, 0xd2, 0x0a, 0x0e, 0xa0, 0x8a,
	0x43, 0xc5, 0xc1, 0x11, 0x54, 0x08, 0x21, 0x7a, 0x80, 0x1e, 0x4a, 0x85, 0xc4, 0x81, 0x16, 0x38,
	0x70, 0xb1, 0x36, 0xf6, 0x78, 0xb3, 0xc2, 0xbb, 0x63, 0x66, 0xd7, 0x14, 0xff, 0xe9, 0xdc, 0x90,
	0x7f, 0x24, 0xa4, 0x12, 0x87, 0xbd, 0xda, 0xef, 0x3d, 0xcf, 0x68, 0x57, 0x86, 0x47, 0xaa, 0x32,
	0xcb, 0xb5, 0xe2, 0xfc, 0x56, 0x31, 0xa6, 0x81, 0x2a, 0x2a, 0x49, 0x37, 0x49, 0xc5, 0x14, 0x48,
	0x3c, 0xc8, 0xd6, 0x4c, 0xd6, 0xd4, 0x96, 0x7c, 0x92, 0x91, 0x2b, 0x8c, 0x4e, 0x54, 0x65, 0x1e,
	0x8a, 0xd6, 0xb9, 0x8b, 0x9e, 0xfc, 0x1e, 0xc3, 0xe2, 0x6a, 0xc8, 0x7c, 0x1e, 0x5e, 0x89, 0x57,
	0x30, 0xf2, 0x19, 0x23, 0x3a, 0xb9, 0xf7, 0x64, 0xef, 0x74, 0xfa, 0xe2, 0x71, 0xf2, 0xcf, 0x60,
	0xb2, 0x11, 0xae, 0x07, 0x5c, 0xbc, 0x85, 0x69, 0x41, 0x6c, 0xd3, 0x42, 0x65, 0x81, 0x58, 0xfe,
	0x17, 0x67, 0x43, 0xeb, 0x5c, 0x76, 0x8a, 0x78, 0x09, 0x87, 0xaa, 0xce, 0x0d, 0xc9, 0xfd, 0x38,
	0xb7, 0xa7, 0xbb, 0x89, 0x43, 0x53, 0xd6, 0x5e, 0x1e, 0xc4, 0x4e, 0xdc, 0xe1, 0xe2, 0x0d, 0x8c,
	0xbf, 0x63, 0xb3, 0x22, 0xc5, 0xb9, 0x3c, 0x8c, 0x53, 0xb7, 0x82, 0x78, 0x0d, 0x47, 0x61, 0x8d,
	0x6c, 0x55, 0x29, 0x47, 0x71, 0xee, 0x86, 0x6f, 0x07, 0xce, 0x94, 0x45, 0x56, 0xf2, 0x28, 0x72,
	0xe0, 0x1e, 0x17, 0x3f, 0xe0, 0xa9, 0xca, 0x32, 0x2c, 0x91, 0xc9, 0x62, 0x40, 0x4e, 0x75, 0xc3,
	0xe4, 0x33, 0xaa, 0x30, 0xb5, 0x4a, 0x3b, 0x0c, 0xfd, 0x63, 0x39, 0x8e, 0xcb, 0x9e, 0xdc, 0x89,
	0xbd, 0xdf, 0xb4, 0x3e, 0xee, 0xa4, 0xc4, 0x3b, 0x98, 0x16, 0xc6, 0x69, 0xe4, 0x8a, 0x8d, 0x0b,
	0x72, 0x12, 0x57, 0xde, 0x75, 0xc4, 0x07, 0x58, 0x54, 0x4c, 0xbf, 0x8c, 0x35, 0xa1, 0x49, 0x3d,
	0x3a, 0x4f, 0x2c, 0x21, 0xae, 0x33, 0xdf, 0x8a, 0x37, 0x9d, 0x27, 0x2e, 0x61, 0x96, 0xab, 0x5a,
	0xaf, 0xdb, 0xe5, 0xfb, 0x83, 0x9b, 0xc6, 0x95, 0x8e, 0x37, 0xda, 0x45, 0x77, 0x7a, 0x9f, 0xe0,
	0xbe, 0x23, 0x97, 0xfe, 0xa4, 0x52, 0x05, 0x53, 0x62, 0xea, 0x03, 0xb1, 0xd2, 0x28, 0xff, 0x8f,
	0xab, 0x09, 0x47, 0xee, 0xeb, 0xe0, 0xde, 0xf4, 0xaa, 0x78, 0x0e, 0xfb, 0xac, 0xac, 0x3c, 0x8e,
	0x2b, 0xb4, 0xac, 0x38, 0x83, 0x83, 0x5b, 0x53, 0x18, 0x39, 0x8b, 0x73, 0x3a, 0x58, 0x9c, 0xc3,
	0xa4, 0x0c, 0x38, 0x6c, 0x3f, 0x8f, 0xbc, 0xb6, 0x65, 0xc0, 0x7e, 0xf1, 0x73, 0x98, 0xf8, 0x3c,
	0x65, 0x54, 0x39, 0xb2, 0x5c, 0x44, 0xda, 0x3e, 0xbf, 0xee, 0x04, 0x71, 0x05, 0x73, 0x4b, 0xed,
	0x35, 0xee, 0xbe, 0x9e, 0xd6, 0x7e, 0x25, 0xef, 0xc5, 0x35, 0x66, 0x3b, 0xde, 0x17, 0xbf, 0xba,
	0x78, 0xf6, 0xed, 0x54, 0xd3, 0x56, 0x4a, 0x88, 0xf5, 0xf2, 0x6f, 0x61, 0xd9, 0x17, 0x96, 0x9a,
	0x96, 0xaa, 0x32, 0xab, 0x51, 0xf7, 0xbb, 0x3a, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x22,
	0xe1, 0x0d, 0xf8, 0x04, 0x00, 0x00,
}
