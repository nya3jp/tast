// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote_fixture.proto

package bundle

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunFixtureConfig_PlannerDownloadMode int32

const (
	RunFixtureConfig_BATCH RunFixtureConfig_PlannerDownloadMode = 0
	RunFixtureConfig_LAZY  RunFixtureConfig_PlannerDownloadMode = 1
)

var RunFixtureConfig_PlannerDownloadMode_name = map[int32]string{
	0: "BATCH",
	1: "LAZY",
}

var RunFixtureConfig_PlannerDownloadMode_value = map[string]int32{
	"BATCH": 0,
	"LAZY":  1,
}

func (x RunFixtureConfig_PlannerDownloadMode) String() string {
	return proto.EnumName(RunFixtureConfig_PlannerDownloadMode_name, int32(x))
}

func (RunFixtureConfig_PlannerDownloadMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5cb9905fdd848d3a, []int{3, 0}
}

// RunFixtureRequest is the request to RunFixture.
type RunFixtureRequest struct {
	// Types that are valid to be assigned to Control:
	//	*RunFixtureRequest_Push
	//	*RunFixtureRequest_Pop
	Control              isRunFixtureRequest_Control `protobuf_oneof:"control"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RunFixtureRequest) Reset()         { *m = RunFixtureRequest{} }
func (m *RunFixtureRequest) String() string { return proto.CompactTextString(m) }
func (*RunFixtureRequest) ProtoMessage()    {}
func (*RunFixtureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb9905fdd848d3a, []int{0}
}

func (m *RunFixtureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunFixtureRequest.Unmarshal(m, b)
}
func (m *RunFixtureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunFixtureRequest.Marshal(b, m, deterministic)
}
func (m *RunFixtureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunFixtureRequest.Merge(m, src)
}
func (m *RunFixtureRequest) XXX_Size() int {
	return xxx_messageInfo_RunFixtureRequest.Size(m)
}
func (m *RunFixtureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunFixtureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunFixtureRequest proto.InternalMessageInfo

type isRunFixtureRequest_Control interface {
	isRunFixtureRequest_Control()
}

type RunFixtureRequest_Push struct {
	Push *RunFixturePushRequest `protobuf:"bytes,1,opt,name=push,proto3,oneof"`
}

type RunFixtureRequest_Pop struct {
	Pop *RunFixturePopRequest `protobuf:"bytes,2,opt,name=pop,proto3,oneof"`
}

func (*RunFixtureRequest_Push) isRunFixtureRequest_Control() {}

func (*RunFixtureRequest_Pop) isRunFixtureRequest_Control() {}

func (m *RunFixtureRequest) GetControl() isRunFixtureRequest_Control {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *RunFixtureRequest) GetPush() *RunFixturePushRequest {
	if x, ok := m.GetControl().(*RunFixtureRequest_Push); ok {
		return x.Push
	}
	return nil
}

func (m *RunFixtureRequest) GetPop() *RunFixturePopRequest {
	if x, ok := m.GetControl().(*RunFixtureRequest_Pop); ok {
		return x.Pop
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RunFixtureRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RunFixtureRequest_Push)(nil),
		(*RunFixtureRequest_Pop)(nil),
	}
}

// RunFixturePushRequest requests pushing a fixture.
type RunFixturePushRequest struct {
	// Name is the name of the fixture to run method.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Config is the configuration the framework needs to run the fixture.
	Config               *RunFixtureConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RunFixturePushRequest) Reset()         { *m = RunFixturePushRequest{} }
func (m *RunFixturePushRequest) String() string { return proto.CompactTextString(m) }
func (*RunFixturePushRequest) ProtoMessage()    {}
func (*RunFixturePushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb9905fdd848d3a, []int{1}
}

func (m *RunFixturePushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunFixturePushRequest.Unmarshal(m, b)
}
func (m *RunFixturePushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunFixturePushRequest.Marshal(b, m, deterministic)
}
func (m *RunFixturePushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunFixturePushRequest.Merge(m, src)
}
func (m *RunFixturePushRequest) XXX_Size() int {
	return xxx_messageInfo_RunFixturePushRequest.Size(m)
}
func (m *RunFixturePushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunFixturePushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunFixturePushRequest proto.InternalMessageInfo

func (m *RunFixturePushRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RunFixturePushRequest) GetConfig() *RunFixtureConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// RunFixturePushRequest requests popping the pushed fixture.
type RunFixturePopRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunFixturePopRequest) Reset()         { *m = RunFixturePopRequest{} }
func (m *RunFixturePopRequest) String() string { return proto.CompactTextString(m) }
func (*RunFixturePopRequest) ProtoMessage()    {}
func (*RunFixturePopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb9905fdd848d3a, []int{2}
}

func (m *RunFixturePopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunFixturePopRequest.Unmarshal(m, b)
}
func (m *RunFixturePopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunFixturePopRequest.Marshal(b, m, deterministic)
}
func (m *RunFixturePopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunFixturePopRequest.Merge(m, src)
}
func (m *RunFixturePopRequest) XXX_Size() int {
	return xxx_messageInfo_RunFixturePopRequest.Size(m)
}
func (m *RunFixturePopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunFixturePopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunFixturePopRequest proto.InternalMessageInfo

// RunFixtureConfig contains information the framework needs to run fixtures.
type RunFixtureConfig struct {
	// TastVars contains names and values of runtime variables used to pass out-of-band data to
	// the fixture.
	TestVars map[string]string `protobuf:"bytes,1,rep,name=test_vars,json=testVars,proto3" json:"test_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DataDir is the path to the directory containing fixture data files.
	DataDir string `protobuf:"bytes,2,opt,name=data_dir,json=dataDir,proto3" json:"data_dir,omitempty"`
	// OutDir is the path to the base directory under which fixtures should write output files.
	OutDir string `protobuf:"bytes,3,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	// TempDir is the path to the directory under which temporary files for fixtures are written.
	TempDir string `protobuf:"bytes,4,opt,name=temp_dir,json=tempDir,proto3" json:"temp_dir,omitempty"`
	// Target is the DUT connection spec as [<user>@]host[:<port>].
	Target string `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	// KeyFile is the path to the SSH private key to use to connect to the DUT.
	KeyFile string `protobuf:"bytes,6,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// KeyDir is the directory containing SSH private keys (typically $HOME/.ssh).
	KeyDir string `protobuf:"bytes,7,opt,name=key_dir,json=keyDir,proto3" json:"key_dir,omitempty"`
	// LocalBundleDir is the directory on the DUT where local test bundle executables are
	// located. This path is used by remote fixture to invoke gRPC services in local test.
	LocalBundleDir string `protobuf:"bytes,8,opt,name=local_bundle_dir,json=localBundleDir,proto3" json:"local_bundle_dir,omitempty"`
	// CheckSoftwareDeps is true if each test's SoftwareDeps field should be checked against
	// AvailableSoftwareFeatures and UnavailableSoftwareFeatures.
	CheckSoftwareDeps bool `protobuf:"varint,9,opt,name=check_software_deps,json=checkSoftwareDeps,proto3" json:"check_software_deps,omitempty"`
	// AvailableSoftwareFeatures contains a list of software features supported by the DUT.
	AvailableSoftwareFeatures []string `protobuf:"bytes,10,rep,name=available_software_features,json=availableSoftwareFeatures,proto3" json:"available_software_features,omitempty"`
	// UnavailableSoftwareFeatures contains a list of software features supported by the DUT.
	UnavailableSoftwareFeatures []string                             `protobuf:"bytes,11,rep,name=unavailable_software_features,json=unavailableSoftwareFeatures,proto3" json:"unavailable_software_features,omitempty"`
	Devservers                  []string                             `protobuf:"bytes,12,rep,name=devservers,proto3" json:"devservers,omitempty"`
	TlwServer                   string                               `protobuf:"bytes,13,opt,name=tlw_server,json=tlwServer,proto3" json:"tlw_server,omitempty"`
	DutName                     string                               `protobuf:"bytes,14,opt,name=dut_name,json=dutName,proto3" json:"dut_name,omitempty"`
	BuildArtifactsUrl           string                               `protobuf:"bytes,15,opt,name=build_artifacts_url,json=buildArtifactsUrl,proto3" json:"build_artifacts_url,omitempty"`
	DownloadMode                RunFixtureConfig_PlannerDownloadMode `protobuf:"varint,16,opt,name=download_mode,json=downloadMode,proto3,enum=tast.core.RunFixtureConfig_PlannerDownloadMode" json:"download_mode,omitempty"`
	// CustomGracePeriod is the custom grace period for fixture methods. When omitted reasonable
	// default will be used. This field exists for unit testing.
	CustomGracePeriod    *duration.Duration `protobuf:"bytes,1000,opt,name=custom_grace_period,json=customGracePeriod,proto3" json:"custom_grace_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RunFixtureConfig) Reset()         { *m = RunFixtureConfig{} }
func (m *RunFixtureConfig) String() string { return proto.CompactTextString(m) }
func (*RunFixtureConfig) ProtoMessage()    {}
func (*RunFixtureConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb9905fdd848d3a, []int{3}
}

func (m *RunFixtureConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunFixtureConfig.Unmarshal(m, b)
}
func (m *RunFixtureConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunFixtureConfig.Marshal(b, m, deterministic)
}
func (m *RunFixtureConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunFixtureConfig.Merge(m, src)
}
func (m *RunFixtureConfig) XXX_Size() int {
	return xxx_messageInfo_RunFixtureConfig.Size(m)
}
func (m *RunFixtureConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RunFixtureConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RunFixtureConfig proto.InternalMessageInfo

func (m *RunFixtureConfig) GetTestVars() map[string]string {
	if m != nil {
		return m.TestVars
	}
	return nil
}

func (m *RunFixtureConfig) GetDataDir() string {
	if m != nil {
		return m.DataDir
	}
	return ""
}

func (m *RunFixtureConfig) GetOutDir() string {
	if m != nil {
		return m.OutDir
	}
	return ""
}

func (m *RunFixtureConfig) GetTempDir() string {
	if m != nil {
		return m.TempDir
	}
	return ""
}

func (m *RunFixtureConfig) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *RunFixtureConfig) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *RunFixtureConfig) GetKeyDir() string {
	if m != nil {
		return m.KeyDir
	}
	return ""
}

func (m *RunFixtureConfig) GetLocalBundleDir() string {
	if m != nil {
		return m.LocalBundleDir
	}
	return ""
}

func (m *RunFixtureConfig) GetCheckSoftwareDeps() bool {
	if m != nil {
		return m.CheckSoftwareDeps
	}
	return false
}

func (m *RunFixtureConfig) GetAvailableSoftwareFeatures() []string {
	if m != nil {
		return m.AvailableSoftwareFeatures
	}
	return nil
}

func (m *RunFixtureConfig) GetUnavailableSoftwareFeatures() []string {
	if m != nil {
		return m.UnavailableSoftwareFeatures
	}
	return nil
}

func (m *RunFixtureConfig) GetDevservers() []string {
	if m != nil {
		return m.Devservers
	}
	return nil
}

func (m *RunFixtureConfig) GetTlwServer() string {
	if m != nil {
		return m.TlwServer
	}
	return ""
}

func (m *RunFixtureConfig) GetDutName() string {
	if m != nil {
		return m.DutName
	}
	return ""
}

func (m *RunFixtureConfig) GetBuildArtifactsUrl() string {
	if m != nil {
		return m.BuildArtifactsUrl
	}
	return ""
}

func (m *RunFixtureConfig) GetDownloadMode() RunFixtureConfig_PlannerDownloadMode {
	if m != nil {
		return m.DownloadMode
	}
	return RunFixtureConfig_BATCH
}

func (m *RunFixtureConfig) GetCustomGracePeriod() *duration.Duration {
	if m != nil {
		return m.CustomGracePeriod
	}
	return nil
}

// RunFixtureError describes an error encountered while running fixtures.
type RunFixtureError struct {
	Reason               string   `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	File                 string   `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Line                 int32    `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Stack                string   `protobuf:"bytes,4,opt,name=stack,proto3" json:"stack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunFixtureError) Reset()         { *m = RunFixtureError{} }
func (m *RunFixtureError) String() string { return proto.CompactTextString(m) }
func (*RunFixtureError) ProtoMessage()    {}
func (*RunFixtureError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb9905fdd848d3a, []int{4}
}

func (m *RunFixtureError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunFixtureError.Unmarshal(m, b)
}
func (m *RunFixtureError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunFixtureError.Marshal(b, m, deterministic)
}
func (m *RunFixtureError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunFixtureError.Merge(m, src)
}
func (m *RunFixtureError) XXX_Size() int {
	return xxx_messageInfo_RunFixtureError.Size(m)
}
func (m *RunFixtureError) XXX_DiscardUnknown() {
	xxx_messageInfo_RunFixtureError.DiscardUnknown(m)
}

var xxx_messageInfo_RunFixtureError proto.InternalMessageInfo

func (m *RunFixtureError) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RunFixtureError) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *RunFixtureError) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *RunFixtureError) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

// RunFixtureResponse is the control message the server streams to the caller.
type RunFixtureResponse struct {
	// Types that are valid to be assigned to Control:
	//	*RunFixtureResponse_Log
	//	*RunFixtureResponse_Error
	//	*RunFixtureResponse_RequestDone
	Control isRunFixtureResponse_Control `protobuf_oneof:"control"`
	// Timestamp is the timestamp of the event.
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RunFixtureResponse) Reset()         { *m = RunFixtureResponse{} }
func (m *RunFixtureResponse) String() string { return proto.CompactTextString(m) }
func (*RunFixtureResponse) ProtoMessage()    {}
func (*RunFixtureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb9905fdd848d3a, []int{5}
}

func (m *RunFixtureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunFixtureResponse.Unmarshal(m, b)
}
func (m *RunFixtureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunFixtureResponse.Marshal(b, m, deterministic)
}
func (m *RunFixtureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunFixtureResponse.Merge(m, src)
}
func (m *RunFixtureResponse) XXX_Size() int {
	return xxx_messageInfo_RunFixtureResponse.Size(m)
}
func (m *RunFixtureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunFixtureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunFixtureResponse proto.InternalMessageInfo

type isRunFixtureResponse_Control interface {
	isRunFixtureResponse_Control()
}

type RunFixtureResponse_Log struct {
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type RunFixtureResponse_Error struct {
	Error *RunFixtureError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type RunFixtureResponse_RequestDone struct {
	RequestDone *empty.Empty `protobuf:"bytes,3,opt,name=request_done,json=requestDone,proto3,oneof"`
}

func (*RunFixtureResponse_Log) isRunFixtureResponse_Control() {}

func (*RunFixtureResponse_Error) isRunFixtureResponse_Control() {}

func (*RunFixtureResponse_RequestDone) isRunFixtureResponse_Control() {}

func (m *RunFixtureResponse) GetControl() isRunFixtureResponse_Control {
	if m != nil {
		return m.Control
	}
	return nil
}

func (m *RunFixtureResponse) GetLog() string {
	if x, ok := m.GetControl().(*RunFixtureResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (m *RunFixtureResponse) GetError() *RunFixtureError {
	if x, ok := m.GetControl().(*RunFixtureResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (m *RunFixtureResponse) GetRequestDone() *empty.Empty {
	if x, ok := m.GetControl().(*RunFixtureResponse_RequestDone); ok {
		return x.RequestDone
	}
	return nil
}

func (m *RunFixtureResponse) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RunFixtureResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RunFixtureResponse_Log)(nil),
		(*RunFixtureResponse_Error)(nil),
		(*RunFixtureResponse_RequestDone)(nil),
	}
}

func init() {
	proto.RegisterEnum("tast.core.RunFixtureConfig_PlannerDownloadMode", RunFixtureConfig_PlannerDownloadMode_name, RunFixtureConfig_PlannerDownloadMode_value)
	proto.RegisterType((*RunFixtureRequest)(nil), "tast.core.RunFixtureRequest")
	proto.RegisterType((*RunFixturePushRequest)(nil), "tast.core.RunFixturePushRequest")
	proto.RegisterType((*RunFixturePopRequest)(nil), "tast.core.RunFixturePopRequest")
	proto.RegisterType((*RunFixtureConfig)(nil), "tast.core.RunFixtureConfig")
	proto.RegisterMapType((map[string]string)(nil), "tast.core.RunFixtureConfig.TestVarsEntry")
	proto.RegisterType((*RunFixtureError)(nil), "tast.core.RunFixtureError")
	proto.RegisterType((*RunFixtureResponse)(nil), "tast.core.RunFixtureResponse")
}

func init() { proto.RegisterFile("remote_fixture.proto", fileDescriptor_5cb9905fdd848d3a) }

var fileDescriptor_5cb9905fdd848d3a = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x4f, 0xe3, 0x46,
	0x14, 0xc5, 0x1b, 0x08, 0xf1, 0x0d, 0xb0, 0x61, 0xa0, 0xd4, 0x84, 0xb2, 0xa4, 0x79, 0x4a, 0xfb,
	0xe0, 0x54, 0x41, 0xaa, 0x56, 0x5d, 0xa9, 0x12, 0xd9, 0x40, 0x51, 0xd5, 0x0f, 0xe4, 0xa5, 0x95,
	0xba, 0x2f, 0xee, 0xc4, 0xbe, 0x09, 0x56, 0xc6, 0x1e, 0x77, 0x66, 0x1c, 0x9a, 0xdf, 0xd0, 0xff,
	0xd8, 0xe7, 0xfd, 0x19, 0xd5, 0x7c, 0x40, 0x52, 0x36, 0xcb, 0xdb, 0xdc, 0x39, 0xe7, 0xdc, 0x7b,
	0xec, 0xb9, 0xf7, 0xc2, 0xa1, 0xc0, 0x9c, 0x2b, 0x8c, 0x27, 0xd9, 0xdf, 0xaa, 0x12, 0x18, 0x96,
	0x82, 0x2b, 0x4e, 0x7c, 0x45, 0xa5, 0x0a, 0x13, 0x2e, 0xb0, 0xfd, 0x6a, 0xca, 0xf9, 0x94, 0x61,
	0xdf, 0x00, 0xe3, 0x6a, 0xd2, 0x4f, 0x2b, 0x41, 0x55, 0xc6, 0x0b, 0x4b, 0x6d, 0x9f, 0x3c, 0xc5,
	0x31, 0x2f, 0xd5, 0xc2, 0x81, 0x67, 0x4f, 0x41, 0x95, 0xe5, 0x28, 0x15, 0xcd, 0x4b, 0x4b, 0xe8,
	0xfe, 0xe3, 0xc1, 0x7e, 0x54, 0x15, 0x57, 0xb6, 0x7a, 0x84, 0x7f, 0x55, 0x28, 0x15, 0xf9, 0x16,
	0x36, 0xcb, 0x4a, 0xde, 0x05, 0x5e, 0xc7, 0xeb, 0x35, 0x07, 0x9d, 0xf0, 0xd1, 0x4d, 0xb8, 0xe4,
	0xde, 0x54, 0xf2, 0xce, 0xf1, 0xaf, 0x37, 0x22, 0xc3, 0x27, 0xe7, 0x50, 0x2b, 0x79, 0x19, 0xbc,
	0x30, 0xb2, 0xb3, 0xf5, 0x32, 0x5e, 0x2e, 0x55, 0x9a, 0x3d, 0xf4, 0x61, 0x3b, 0xe1, 0x85, 0x12,
	0x9c, 0x75, 0xff, 0x84, 0xcf, 0xd6, 0x16, 0x20, 0x04, 0x36, 0x0b, 0x9a, 0xa3, 0x31, 0xe4, 0x47,
	0xe6, 0x4c, 0xce, 0xa1, 0x9e, 0xf0, 0x62, 0x92, 0x4d, 0x5d, 0xbd, 0x93, 0xb5, 0xf5, 0xde, 0x1a,
	0x4a, 0xe4, 0xa8, 0xdd, 0x23, 0x38, 0x5c, 0xe7, 0xa5, 0xfb, 0xa1, 0x0e, 0xad, 0xa7, 0x22, 0x72,
	0x05, 0xbe, 0x42, 0xa9, 0xe2, 0x39, 0x15, 0x32, 0xf0, 0x3a, 0xb5, 0x5e, 0x73, 0xf0, 0xd5, 0x33,
	0x45, 0xc2, 0x5b, 0x94, 0xea, 0x77, 0x2a, 0xe4, 0x65, 0xa1, 0xc4, 0x22, 0x6a, 0x28, 0x17, 0x92,
	0x63, 0x68, 0xa4, 0x54, 0xd1, 0x38, 0xcd, 0x84, 0xf1, 0xea, 0x47, 0xdb, 0x3a, 0x1e, 0x65, 0x82,
	0x7c, 0x0e, 0xdb, 0xbc, 0x52, 0x06, 0xa9, 0x19, 0xa4, 0xce, 0x2b, 0xa5, 0x81, 0x63, 0x68, 0x28,
	0xcc, 0x4b, 0x83, 0x6c, 0x5a, 0x8d, 0x8e, 0x35, 0x74, 0x04, 0x75, 0x45, 0xc5, 0x14, 0x55, 0xb0,
	0x65, 0x25, 0x36, 0xd2, 0x92, 0x19, 0x2e, 0xe2, 0x49, 0xc6, 0x30, 0xa8, 0x5b, 0xc9, 0x0c, 0x17,
	0x57, 0x19, 0x43, 0x5d, 0x46, 0x43, 0x3a, 0xd9, 0xb6, 0xd5, 0xcc, 0x70, 0xa1, 0x73, 0xf5, 0xa0,
	0xc5, 0x78, 0x42, 0x59, 0x3c, 0xae, 0x8a, 0x94, 0xa1, 0x61, 0x34, 0x0c, 0x63, 0xcf, 0xdc, 0x0f,
	0xcd, 0xb5, 0x66, 0x86, 0x70, 0x90, 0xdc, 0x61, 0x32, 0x8b, 0x25, 0x9f, 0xa8, 0x7b, 0x2a, 0x30,
	0x4e, 0xb1, 0x94, 0x81, 0xdf, 0xf1, 0x7a, 0x8d, 0x68, 0xdf, 0x40, 0xef, 0x1c, 0x32, 0xc2, 0x52,
	0x92, 0xef, 0xe1, 0x84, 0xce, 0x69, 0xc6, 0xe8, 0x98, 0xe1, 0x52, 0x33, 0x41, 0xaa, 0x7f, 0x98,
	0x0c, 0xa0, 0x53, 0xeb, 0xf9, 0xd1, 0xf1, 0x23, 0xe5, 0x41, 0x7b, 0xe5, 0x08, 0x64, 0x08, 0xa7,
	0x55, 0xf1, 0x5c, 0x86, 0xa6, 0xc9, 0x70, 0xb2, 0x42, 0xfa, 0x28, 0xc7, 0x2b, 0x80, 0x14, 0xe7,
	0x12, 0xc5, 0x1c, 0x85, 0x0c, 0x76, 0x8c, 0x60, 0xe5, 0x86, 0x9c, 0x02, 0x28, 0x76, 0x1f, 0xdb,
	0x30, 0xd8, 0x35, 0xdf, 0xed, 0x2b, 0x76, 0xff, 0xce, 0x5c, 0x98, 0x77, 0xab, 0x54, 0x6c, 0x3a,
	0x6f, 0xcf, 0xbd, 0x5b, 0xa5, 0x7e, 0xd1, 0xcd, 0x17, 0xc2, 0xc1, 0xb8, 0xca, 0x58, 0x1a, 0x53,
	0xa1, 0xb2, 0x09, 0x4d, 0x94, 0x8c, 0x2b, 0xc1, 0x82, 0x97, 0x86, 0xb5, 0x6f, 0xa0, 0x8b, 0x07,
	0xe4, 0x37, 0xc1, 0xc8, 0x2d, 0xec, 0xa6, 0xfc, 0xbe, 0x60, 0x9c, 0xa6, 0x71, 0xce, 0x53, 0x0c,
	0x5a, 0x1d, 0xaf, 0xb7, 0x37, 0xe8, 0x3f, 0xd7, 0x4e, 0x37, 0x8c, 0x16, 0x05, 0x8a, 0x91, 0xd3,
	0xfd, 0xcc, 0x53, 0x8c, 0x76, 0xd2, 0x95, 0x88, 0xfc, 0x08, 0x07, 0x49, 0x25, 0x15, 0xcf, 0xe3,
	0xa9, 0xa0, 0x09, 0xc6, 0x25, 0x8a, 0x8c, 0xa7, 0xc1, 0x87, 0x6d, 0x33, 0x10, 0xc7, 0xa1, 0x9d,
	0xfe, 0xf0, 0x61, 0xfa, 0xc3, 0x91, 0x5b, 0x1d, 0xd1, 0xbe, 0x95, 0xfd, 0xa0, 0x55, 0x37, 0x46,
	0xd4, 0x7e, 0x03, 0xbb, 0xff, 0xeb, 0x5f, 0xd2, 0x82, 0xda, 0x0c, 0x17, 0x6e, 0xe4, 0xf4, 0x91,
	0x1c, 0xc2, 0xd6, 0x9c, 0xb2, 0x0a, 0x5d, 0x13, 0xdb, 0xe0, 0xbb, 0x17, 0xaf, 0xbd, 0xee, 0xd7,
	0x70, 0xb0, 0xc6, 0x2d, 0xf1, 0x61, 0x6b, 0x78, 0x71, 0xfb, 0xf6, 0xba, 0xb5, 0x41, 0x1a, 0xb0,
	0xf9, 0xd3, 0xc5, 0xfb, 0x3f, 0x5a, 0x5e, 0x77, 0x0a, 0x2f, 0x97, 0x9f, 0x7a, 0x29, 0x04, 0x37,
	0x1d, 0x2d, 0x90, 0x4a, 0x5e, 0xb8, 0x6a, 0x2e, 0xd2, 0x63, 0x6f, 0xba, 0xd9, 0xd6, 0x33, 0x67,
	0x7d, 0xc7, 0xb2, 0x02, 0xcd, 0xb8, 0x6c, 0x45, 0xe6, 0xac, 0x8d, 0x49, 0x45, 0x93, 0x99, 0x9b,
	0x14, 0x1b, 0x74, 0xff, 0xf5, 0x80, 0xac, 0xee, 0x36, 0x59, 0xf2, 0x42, 0xea, 0x04, 0x35, 0xc6,
	0xa7, 0xb6, 0x92, 0xde, 0x41, 0x8c, 0x4f, 0xc9, 0x00, 0xb6, 0x50, 0x3b, 0x71, 0xab, 0xa4, 0xbd,
	0xf6, 0x59, 0x8c, 0xd7, 0xeb, 0x8d, 0xc8, 0x52, 0xc9, 0x1b, 0xd8, 0x11, 0x76, 0x7b, 0xc4, 0x29,
	0x77, 0x86, 0x9a, 0x83, 0xa3, 0x8f, 0x7e, 0xfa, 0xa5, 0xde, 0xc7, 0xd7, 0x1b, 0x51, 0xd3, 0xb1,
	0x47, 0xbc, 0x40, 0xf2, 0x1a, 0xfc, 0xc7, 0x55, 0x6c, 0x5c, 0xeb, 0xa2, 0x4f, 0x95, 0xb7, 0x0f,
	0x8c, 0x68, 0x49, 0x5e, 0x59, 0x97, 0x03, 0x0a, 0x7b, 0xce, 0x9a, 0x6e, 0xd8, 0x2c, 0x41, 0xf2,
	0x2b, 0xc0, 0xd2, 0x2f, 0xf9, 0x62, 0xed, 0x67, 0xb8, 0x95, 0xd7, 0x3e, 0xfd, 0x04, 0x6a, 0x7f,
	0x53, 0x77, 0xa3, 0xe7, 0x7d, 0xe3, 0x0d, 0xbf, 0x7c, 0x7f, 0x96, 0xdc, 0x09, 0x9e, 0x67, 0x55,
	0xce, 0x65, 0x5f, 0x0b, 0xfa, 0x59, 0xa1, 0x50, 0x14, 0x94, 0xf5, 0xed, 0xca, 0x18, 0xd7, 0x8d,
	0xdf, 0xf3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x45, 0xbd, 0x42, 0xf4, 0xca, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	RunFixture(ctx context.Context, opts ...grpc.CallOption) (FixtureService_RunFixtureClient, error)
}

type fixtureServiceClient struct {
	cc *grpc.ClientConn
}

func NewFixtureServiceClient(cc *grpc.ClientConn) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) RunFixture(ctx context.Context, opts ...grpc.CallOption) (FixtureService_RunFixtureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FixtureService_serviceDesc.Streams[0], "/tast.core.FixtureService/RunFixture", opts...)
	if err != nil {
		return nil, err
	}
	x := &fixtureServiceRunFixtureClient{stream}
	return x, nil
}

type FixtureService_RunFixtureClient interface {
	Send(*RunFixtureRequest) error
	Recv() (*RunFixtureResponse, error)
	grpc.ClientStream
}

type fixtureServiceRunFixtureClient struct {
	grpc.ClientStream
}

func (x *fixtureServiceRunFixtureClient) Send(m *RunFixtureRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fixtureServiceRunFixtureClient) Recv() (*RunFixtureResponse, error) {
	m := new(RunFixtureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	RunFixture(FixtureService_RunFixtureServer) error
}

// UnimplementedFixtureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFixtureServiceServer struct {
}

func (*UnimplementedFixtureServiceServer) RunFixture(srv FixtureService_RunFixtureServer) error {
	return status.Errorf(codes.Unimplemented, "method RunFixture not implemented")
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_RunFixture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FixtureServiceServer).RunFixture(&fixtureServiceRunFixtureServer{stream})
}

type FixtureService_RunFixtureServer interface {
	Send(*RunFixtureResponse) error
	Recv() (*RunFixtureRequest, error)
	grpc.ServerStream
}

type fixtureServiceRunFixtureServer struct {
	grpc.ServerStream
}

func (x *fixtureServiceRunFixtureServer) Send(m *RunFixtureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fixtureServiceRunFixtureServer) Recv() (*RunFixtureRequest, error) {
	m := new(RunFixtureRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.core.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunFixture",
			Handler:       _FixtureService_RunFixture_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote_fixture.proto",
}
