// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reports.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogStreamRequest struct {
	Test                 string   `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	LogPath              string   `protobuf:"bytes,2,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogStreamRequest) Reset()         { *m = LogStreamRequest{} }
func (m *LogStreamRequest) String() string { return proto.CompactTextString(m) }
func (*LogStreamRequest) ProtoMessage()    {}
func (*LogStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{0}
}

func (m *LogStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogStreamRequest.Unmarshal(m, b)
}
func (m *LogStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogStreamRequest.Marshal(b, m, deterministic)
}
func (m *LogStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStreamRequest.Merge(m, src)
}
func (m *LogStreamRequest) XXX_Size() int {
	return xxx_messageInfo_LogStreamRequest.Size(m)
}
func (m *LogStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogStreamRequest proto.InternalMessageInfo

func (m *LogStreamRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

func (m *LogStreamRequest) GetLogPath() string {
	if m != nil {
		return m.LogPath
	}
	return ""
}

func (m *LogStreamRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReportResultRequest struct {
	Test string `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	// errors contain errors encountered while running the test.
	Errors []*ErrorReport `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// skip_reason tells why the test is skipped.
	SkipReason           string   `protobuf:"bytes,3,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportResultRequest) Reset()         { *m = ReportResultRequest{} }
func (m *ReportResultRequest) String() string { return proto.CompactTextString(m) }
func (*ReportResultRequest) ProtoMessage()    {}
func (*ReportResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{1}
}

func (m *ReportResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportResultRequest.Unmarshal(m, b)
}
func (m *ReportResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportResultRequest.Marshal(b, m, deterministic)
}
func (m *ReportResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResultRequest.Merge(m, src)
}
func (m *ReportResultRequest) XXX_Size() int {
	return xxx_messageInfo_ReportResultRequest.Size(m)
}
func (m *ReportResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResultRequest proto.InternalMessageInfo

func (m *ReportResultRequest) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

func (m *ReportResultRequest) GetErrors() []*ErrorReport {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *ReportResultRequest) GetSkipReason() string {
	if m != nil {
		return m.SkipReason
	}
	return ""
}

type ReportResultResponse struct {
	Terminate            bool     `protobuf:"varint,1,opt,name=terminate,proto3" json:"terminate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportResultResponse) Reset()         { *m = ReportResultResponse{} }
func (m *ReportResultResponse) String() string { return proto.CompactTextString(m) }
func (*ReportResultResponse) ProtoMessage()    {}
func (*ReportResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{2}
}

func (m *ReportResultResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportResultResponse.Unmarshal(m, b)
}
func (m *ReportResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportResultResponse.Marshal(b, m, deterministic)
}
func (m *ReportResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResultResponse.Merge(m, src)
}
func (m *ReportResultResponse) XXX_Size() int {
	return xxx_messageInfo_ReportResultResponse.Size(m)
}
func (m *ReportResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResultResponse proto.InternalMessageInfo

func (m *ReportResultResponse) GetTerminate() bool {
	if m != nil {
		return m.Terminate
	}
	return false
}

type ErrorReport struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Reason               string               `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	File                 string               `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Line                 int32                `protobuf:"varint,4,opt,name=line,proto3" json:"line,omitempty"`
	Stack                string               `protobuf:"bytes,5,opt,name=stack,proto3" json:"stack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ErrorReport) Reset()         { *m = ErrorReport{} }
func (m *ErrorReport) String() string { return proto.CompactTextString(m) }
func (*ErrorReport) ProtoMessage()    {}
func (*ErrorReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_66b94ab03de429a8, []int{3}
}

func (m *ErrorReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorReport.Unmarshal(m, b)
}
func (m *ErrorReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorReport.Marshal(b, m, deterministic)
}
func (m *ErrorReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorReport.Merge(m, src)
}
func (m *ErrorReport) XXX_Size() int {
	return xxx_messageInfo_ErrorReport.Size(m)
}
func (m *ErrorReport) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorReport.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorReport proto.InternalMessageInfo

func (m *ErrorReport) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ErrorReport) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ErrorReport) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *ErrorReport) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *ErrorReport) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

func init() {
	proto.RegisterType((*LogStreamRequest)(nil), "tast.core.LogStreamRequest")
	proto.RegisterType((*ReportResultRequest)(nil), "tast.core.ReportResultRequest")
	proto.RegisterType((*ReportResultResponse)(nil), "tast.core.ReportResultResponse")
	proto.RegisterType((*ErrorReport)(nil), "tast.core.ErrorReport")
}

func init() { proto.RegisterFile("reports.proto", fileDescriptor_66b94ab03de429a8) }

var fileDescriptor_66b94ab03de429a8 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x6d, 0xda, 0xdd, 0x6d, 0x33, 0x29, 0x12, 0x32, 0xd5, 0x2a, 0xa4, 0x88, 0x0d, 0xe1, 0x92,
	0x93, 0x23, 0x2d, 0xfc, 0x02, 0x44, 0x6f, 0x1c, 0xc0, 0xc0, 0x85, 0x4b, 0xe5, 0x86, 0x69, 0x36,
	0xaa, 0x13, 0x07, 0x7b, 0x72, 0x80, 0xbf, 0xc1, 0x3f, 0xe0, 0x97, 0x22, 0xdb, 0xe9, 0x12, 0x96,
	0x8f, 0xdb, 0xf3, 0x9b, 0xa7, 0x99, 0xe7, 0x37, 0x03, 0x0f, 0x0c, 0x0e, 0xda, 0x90, 0xe5, 0x83,
	0xd1, 0xa4, 0x59, 0x4c, 0xd2, 0x12, 0xaf, 0xb5, 0xc1, 0xec, 0xb2, 0xd1, 0xba, 0x51, 0x58, 0xf9,
	0xc2, 0xcd, 0x78, 0x5b, 0x61, 0x37, 0xd0, 0xd7, 0xa0, 0xcb, 0x36, 0x87, 0x45, 0x6a, 0x3b, 0xb4,
	0x24, 0xbb, 0x21, 0x08, 0x8a, 0x8f, 0xf0, 0xf0, 0x8d, 0x6e, 0xde, 0x93, 0x41, 0xd9, 0x09, 0xfc,
	0x32, 0xa2, 0x25, 0xc6, 0x60, 0x41, 0x68, 0x29, 0x8d, 0xf2, 0xa8, 0x8c, 0x85, 0xc7, 0xec, 0x31,
	0x9c, 0x29, 0xdd, 0x5c, 0x0f, 0x92, 0x76, 0xe9, 0xb1, 0xe7, 0x4f, 0x95, 0x6e, 0xde, 0x4a, 0xda,
	0x39, 0xf9, 0x67, 0x49, 0x32, 0x3d, 0xc9, 0xa3, 0xf2, 0x5c, 0x78, 0x5c, 0x7c, 0x83, 0x47, 0xc2,
	0x1b, 0x16, 0x68, 0x47, 0x45, 0xff, 0xeb, 0xcc, 0x61, 0x85, 0xc6, 0x68, 0x63, 0xd3, 0xe3, 0xfc,
	0xa4, 0x4c, 0xb6, 0x6b, 0xbe, 0xff, 0x1b, 0xbf, 0x72, 0x85, 0xa9, 0xd1, 0xa4, 0x62, 0x1b, 0x48,
	0xec, 0x5d, 0x3b, 0x5c, 0x1b, 0x94, 0x56, 0xf7, 0x7e, 0x6a, 0x2c, 0xc0, 0x51, 0xc2, 0x33, 0xc5,
	0x4b, 0xb8, 0xf8, 0x7d, 0xb6, 0x1d, 0x74, 0x6f, 0x91, 0x3d, 0x81, 0x98, 0xd0, 0x74, 0x6d, 0x2f,
	0x09, 0xbd, 0x83, 0x33, 0xf1, 0x8b, 0x28, 0xbe, 0x47, 0x90, 0xcc, 0xc6, 0x31, 0x0e, 0x0b, 0x97,
	0x95, 0x17, 0x26, 0xdb, 0x8c, 0x87, 0x20, 0xf9, 0x7d, 0x90, 0xfc, 0xc3, 0x7d, 0x90, 0xc2, 0xeb,
	0xd8, 0x1a, 0x56, 0x93, 0xa3, 0x10, 0xcf, 0xf4, 0x72, 0x5f, 0xbe, 0x6d, 0x15, 0x4e, 0x3e, 0x3d,
	0x76, 0x9c, 0x6a, 0x7b, 0x4c, 0x17, 0x79, 0x54, 0x2e, 0x85, 0xc7, 0xec, 0x02, 0x96, 0x96, 0x64,
	0x7d, 0x97, 0x2e, 0xbd, 0x30, 0x3c, 0xb6, 0x3f, 0x22, 0x38, 0x0d, 0x86, 0x2c, 0x7b, 0x0d, 0xf1,
	0x7e, 0x55, 0xec, 0x72, 0x96, 0xd2, 0xe1, 0x02, 0xb3, 0xf5, 0x1f, 0x6e, 0xaf, 0xdc, 0x4d, 0x14,
	0x47, 0x65, 0xc4, 0xde, 0xc1, 0xf9, 0x3c, 0x1d, 0xf6, 0x74, 0xd6, 0xe8, 0x2f, 0x2b, 0xcb, 0x36,
	0xff, 0xac, 0x87, 0x58, 0x8b, 0xa3, 0x57, 0xcf, 0x3f, 0x3d, 0xab, 0x77, 0x46, 0x77, 0xed, 0xd8,
	0x69, 0x5b, 0x39, 0x79, 0xd5, 0xf6, 0x84, 0xa6, 0x97, 0x2a, 0x1c, 0x5e, 0xad, 0xd5, 0xcd, 0xca,
	0xa3, 0x17, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xc7, 0xc7, 0x2c, 0xc9, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportsClient is the client API for Reports service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportsClient interface {
	// LogStream accepts a stream of log data.
	// The request should be called only once per client.
	LogStream(ctx context.Context, opts ...grpc.CallOption) (Reports_LogStreamClient, error)
	// ReportResults accepts test results from a client.
	// This request can be called multiple times per client.
	ReportResult(ctx context.Context, in *ReportResultRequest, opts ...grpc.CallOption) (*ReportResultResponse, error)
}

type reportsClient struct {
	cc *grpc.ClientConn
}

func NewReportsClient(cc *grpc.ClientConn) ReportsClient {
	return &reportsClient{cc}
}

func (c *reportsClient) LogStream(ctx context.Context, opts ...grpc.CallOption) (Reports_LogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Reports_serviceDesc.Streams[0], "/tast.core.Reports/LogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportsLogStreamClient{stream}
	return x, nil
}

type Reports_LogStreamClient interface {
	Send(*LogStreamRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type reportsLogStreamClient struct {
	grpc.ClientStream
}

func (x *reportsLogStreamClient) Send(m *LogStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reportsLogStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportsClient) ReportResult(ctx context.Context, in *ReportResultRequest, opts ...grpc.CallOption) (*ReportResultResponse, error) {
	out := new(ReportResultResponse)
	err := c.cc.Invoke(ctx, "/tast.core.Reports/ReportResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportsServer is the server API for Reports service.
type ReportsServer interface {
	// LogStream accepts a stream of log data.
	// The request should be called only once per client.
	LogStream(Reports_LogStreamServer) error
	// ReportResults accepts test results from a client.
	// This request can be called multiple times per client.
	ReportResult(context.Context, *ReportResultRequest) (*ReportResultResponse, error)
}

// UnimplementedReportsServer can be embedded to have forward compatible implementations.
type UnimplementedReportsServer struct {
}

func (*UnimplementedReportsServer) LogStream(srv Reports_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}
func (*UnimplementedReportsServer) ReportResult(ctx context.Context, req *ReportResultRequest) (*ReportResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportResult not implemented")
}

func RegisterReportsServer(s *grpc.Server, srv ReportsServer) {
	s.RegisterService(&_Reports_serviceDesc, srv)
}

func _Reports_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReportsServer).LogStream(&reportsLogStreamServer{stream})
}

type Reports_LogStreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*LogStreamRequest, error)
	grpc.ServerStream
}

type reportsLogStreamServer struct {
	grpc.ServerStream
}

func (x *reportsLogStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reportsLogStreamServer) Recv() (*LogStreamRequest, error) {
	m := new(LogStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Reports_ReportResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsServer).ReportResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.core.Reports/ReportResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsServer).ReportResult(ctx, req.(*ReportResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reports_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.core.Reports",
	HandlerType: (*ReportsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportResult",
			Handler:    _Reports_ReportResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogStream",
			Handler:       _Reports_LogStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "reports.proto",
}
