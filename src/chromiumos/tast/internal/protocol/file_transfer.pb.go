// Code generated by protoc-gen-go. DO NOT EDIT.
// source: file_transfer.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PullDirectoryRequest struct {
	// path is a directory path on the DUT.
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullDirectoryRequest) Reset()         { *m = PullDirectoryRequest{} }
func (m *PullDirectoryRequest) String() string { return proto.CompactTextString(m) }
func (*PullDirectoryRequest) ProtoMessage()    {}
func (*PullDirectoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1af68eaa3d01d81, []int{0}
}

func (m *PullDirectoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullDirectoryRequest.Unmarshal(m, b)
}
func (m *PullDirectoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullDirectoryRequest.Marshal(b, m, deterministic)
}
func (m *PullDirectoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDirectoryRequest.Merge(m, src)
}
func (m *PullDirectoryRequest) XXX_Size() int {
	return xxx_messageInfo_PullDirectoryRequest.Size(m)
}
func (m *PullDirectoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDirectoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullDirectoryRequest proto.InternalMessageInfo

func (m *PullDirectoryRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type PullDirectoryResponse struct {
	// data is gzip'ed tar archive data.
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullDirectoryResponse) Reset()         { *m = PullDirectoryResponse{} }
func (m *PullDirectoryResponse) String() string { return proto.CompactTextString(m) }
func (*PullDirectoryResponse) ProtoMessage()    {}
func (*PullDirectoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1af68eaa3d01d81, []int{1}
}

func (m *PullDirectoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullDirectoryResponse.Unmarshal(m, b)
}
func (m *PullDirectoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullDirectoryResponse.Marshal(b, m, deterministic)
}
func (m *PullDirectoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDirectoryResponse.Merge(m, src)
}
func (m *PullDirectoryResponse) XXX_Size() int {
	return xxx_messageInfo_PullDirectoryResponse.Size(m)
}
func (m *PullDirectoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDirectoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullDirectoryResponse proto.InternalMessageInfo

func (m *PullDirectoryResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PullDirectoryRequest)(nil), "tast.core.PullDirectoryRequest")
	proto.RegisterType((*PullDirectoryResponse)(nil), "tast.core.PullDirectoryResponse")
}

func init() { proto.RegisterFile("file_transfer.proto", fileDescriptor_a1af68eaa3d01d81) }

var fileDescriptor_a1af68eaa3d01d81 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xcb, 0xcc, 0x49,
	0x8d, 0x2f, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x2c, 0x49, 0x2c, 0x2e, 0xd1, 0x4b, 0xce, 0x2f, 0x4a, 0x55, 0xd2, 0xe2, 0x12, 0x09, 0x28,
	0xcd, 0xc9, 0x71, 0xc9, 0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0x2f, 0xaa, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x29, 0x48, 0x2c, 0xc9, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0xb3, 0x95, 0xb4, 0xb9, 0x44, 0xd1, 0xd4, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x82,
	0x14, 0xa7, 0x24, 0x96, 0x24, 0x82, 0x15, 0xf3, 0x04, 0x81, 0xd9, 0x46, 0x69, 0x5c, 0x3c, 0x6e,
	0x99, 0x39, 0xa9, 0x21, 0x50, 0x9b, 0x85, 0xc2, 0xb8, 0x78, 0x51, 0x34, 0x0b, 0xc9, 0xeb, 0xc1,
	0x5d, 0xa1, 0x87, 0xcd, 0x09, 0x52, 0x0a, 0xb8, 0x15, 0x40, 0xec, 0x55, 0x62, 0x30, 0x60, 0x74,
	0x52, 0x8e, 0x52, 0x4c, 0xce, 0x28, 0xca, 0xcf, 0xcd, 0x2c, 0xcd, 0xcd, 0x2f, 0xd6, 0x07, 0xe9,
	0xd0, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x07, 0xfb, 0x36, 0x39, 0x3f, 0x27,
	0x89, 0x0d, 0xcc, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x37, 0x83, 0x58, 0xd7, 0x0e, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileTransferClient is the client API for FileTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileTransferClient interface {
	// PullDirectory transfers a directory on the DUT as a tar archive.
	// The directory is removed after transfer.
	PullDirectory(ctx context.Context, in *PullDirectoryRequest, opts ...grpc.CallOption) (FileTransfer_PullDirectoryClient, error)
}

type fileTransferClient struct {
	cc *grpc.ClientConn
}

func NewFileTransferClient(cc *grpc.ClientConn) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) PullDirectory(ctx context.Context, in *PullDirectoryRequest, opts ...grpc.CallOption) (FileTransfer_PullDirectoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileTransfer_serviceDesc.Streams[0], "/tast.core.FileTransfer/PullDirectory", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferPullDirectoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransfer_PullDirectoryClient interface {
	Recv() (*PullDirectoryResponse, error)
	grpc.ClientStream
}

type fileTransferPullDirectoryClient struct {
	grpc.ClientStream
}

func (x *fileTransferPullDirectoryClient) Recv() (*PullDirectoryResponse, error) {
	m := new(PullDirectoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferServer is the server API for FileTransfer service.
type FileTransferServer interface {
	// PullDirectory transfers a directory on the DUT as a tar archive.
	// The directory is removed after transfer.
	PullDirectory(*PullDirectoryRequest, FileTransfer_PullDirectoryServer) error
}

// UnimplementedFileTransferServer can be embedded to have forward compatible implementations.
type UnimplementedFileTransferServer struct {
}

func (*UnimplementedFileTransferServer) PullDirectory(req *PullDirectoryRequest, srv FileTransfer_PullDirectoryServer) error {
	return status.Errorf(codes.Unimplemented, "method PullDirectory not implemented")
}

func RegisterFileTransferServer(s *grpc.Server, srv FileTransferServer) {
	s.RegisterService(&_FileTransfer_serviceDesc, srv)
}

func _FileTransfer_PullDirectory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDirectoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServer).PullDirectory(m, &fileTransferPullDirectoryServer{stream})
}

type FileTransfer_PullDirectoryServer interface {
	Send(*PullDirectoryResponse) error
	grpc.ServerStream
}

type fileTransferPullDirectoryServer struct {
	grpc.ServerStream
}

func (x *fileTransferPullDirectoryServer) Send(m *PullDirectoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _FileTransfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.core.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDirectory",
			Handler:       _FileTransfer_PullDirectory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_transfer.proto",
}
