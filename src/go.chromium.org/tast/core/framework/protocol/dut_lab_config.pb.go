// Copyright 2024 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.23.3
// source: dut_lab_config.proto

package protocol

import (
	api "go.chromium.org/chromiumos/config/go/test/lab/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DUTLabConfig represents the configurations of all DUT used in a
// test session.
type DUTLabConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChromeOSDUTLabConfig provides a mapping between roles of ChromeOS
	// DUTs and lab configurations of those DUTs.
	// Note: The role of the primary DUT is "" and the roles of the
	// companion DUTs usaually are cd1, cd2, ...
	ChromeOSDUTLabConfig map[string]*api.Dut `protobuf:"bytes,1,rep,name=ChromeOSDUTLabConfig,proto3" json:"ChromeOSDUTLabConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// AndroidDUTLabConfig provides a mapping between the associate hostname
	// of the Android DUTs and lab configurations of those DUTs.
	AndroidDUTLabConfig map[string]*api.Dut `protobuf:"bytes,2,rep,name=AndroidDUTLabConfig,proto3" json:"AndroidDUTLabConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DevboardDUTLabConfig provides a mapping between the role
	// of Devboard DUTs and lab configurations of those DUTs.
	// Note: The role of the primary DUT is "" and the roles of the
	// companion DUTs usaually are cd1, cd2, ...
	DevboardDUTLabConfig map[string]*api.Dut `protobuf:"bytes,3,rep,name=DevboardDUTLabConfig,proto3" json:"DevboardDUTLabConfig,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DUTLabConfig) Reset() {
	*x = DUTLabConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dut_lab_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DUTLabConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DUTLabConfig) ProtoMessage() {}

func (x *DUTLabConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dut_lab_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DUTLabConfig.ProtoReflect.Descriptor instead.
func (*DUTLabConfig) Descriptor() ([]byte, []int) {
	return file_dut_lab_config_proto_rawDescGZIP(), []int{0}
}

func (x *DUTLabConfig) GetChromeOSDUTLabConfig() map[string]*api.Dut {
	if x != nil {
		return x.ChromeOSDUTLabConfig
	}
	return nil
}

func (x *DUTLabConfig) GetAndroidDUTLabConfig() map[string]*api.Dut {
	if x != nil {
		return x.AndroidDUTLabConfig
	}
	return nil
}

func (x *DUTLabConfig) GetDevboardDUTLabConfig() map[string]*api.Dut {
	if x != nil {
		return x.DevboardDUTLabConfig
	}
	return nil
}

var File_dut_lab_config_proto protoreflect.FileDescriptor

var file_dut_lab_config_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x21, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x75, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x04, 0x0a, 0x0c, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x14, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f,
	0x53, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53,
	0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x62, 0x0a, 0x13,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x65, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x55, 0x54, 0x4c,
	0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x55, 0x54, 0x4c, 0x61,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x14, 0x44, 0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x55, 0x54, 0x4c, 0x61,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x65, 0x0a, 0x19, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x4f, 0x53, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64,
	0x0a, 0x18, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x44, 0x55, 0x54, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x75, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x74,
	0x61, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_dut_lab_config_proto_rawDescOnce sync.Once
	file_dut_lab_config_proto_rawDescData = file_dut_lab_config_proto_rawDesc
)

func file_dut_lab_config_proto_rawDescGZIP() []byte {
	file_dut_lab_config_proto_rawDescOnce.Do(func() {
		file_dut_lab_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_dut_lab_config_proto_rawDescData)
	})
	return file_dut_lab_config_proto_rawDescData
}

var file_dut_lab_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dut_lab_config_proto_goTypes = []interface{}{
	(*DUTLabConfig)(nil), // 0: tast.core.DUTLabConfig
	nil,                  // 1: tast.core.DUTLabConfig.ChromeOSDUTLabConfigEntry
	nil,                  // 2: tast.core.DUTLabConfig.AndroidDUTLabConfigEntry
	nil,                  // 3: tast.core.DUTLabConfig.DevboardDUTLabConfigEntry
	(*api.Dut)(nil),      // 4: chromiumos.test.lab.api.Dut
}
var file_dut_lab_config_proto_depIdxs = []int32{
	1, // 0: tast.core.DUTLabConfig.ChromeOSDUTLabConfig:type_name -> tast.core.DUTLabConfig.ChromeOSDUTLabConfigEntry
	2, // 1: tast.core.DUTLabConfig.AndroidDUTLabConfig:type_name -> tast.core.DUTLabConfig.AndroidDUTLabConfigEntry
	3, // 2: tast.core.DUTLabConfig.DevboardDUTLabConfig:type_name -> tast.core.DUTLabConfig.DevboardDUTLabConfigEntry
	4, // 3: tast.core.DUTLabConfig.ChromeOSDUTLabConfigEntry.value:type_name -> chromiumos.test.lab.api.Dut
	4, // 4: tast.core.DUTLabConfig.AndroidDUTLabConfigEntry.value:type_name -> chromiumos.test.lab.api.Dut
	4, // 5: tast.core.DUTLabConfig.DevboardDUTLabConfigEntry.value:type_name -> chromiumos.test.lab.api.Dut
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_dut_lab_config_proto_init() }
func file_dut_lab_config_proto_init() {
	if File_dut_lab_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dut_lab_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DUTLabConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dut_lab_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dut_lab_config_proto_goTypes,
		DependencyIndexes: file_dut_lab_config_proto_depIdxs,
		MessageInfos:      file_dut_lab_config_proto_msgTypes,
	}.Build()
	File_dut_lab_config_proto = out.File
	file_dut_lab_config_proto_rawDesc = nil
	file_dut_lab_config_proto_goTypes = nil
	file_dut_lab_config_proto_depIdxs = nil
}
