// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fake_core.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("fake_core.proto", fileDescriptor_83f1f0c92e4ed6c9) }

var fileDescriptor_83f1f0c92e4ed6c9 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4b, 0xcc, 0x4e,
	0x8d, 0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0x49, 0x2c,
	0x2e, 0xd1, 0x03, 0x09, 0x48, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x25, 0x92,
	0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0xea, 0x8c, 0x5c, 0xb8, 0x38, 0x02, 0x32,
	0xf3, 0xd2, 0x9d, 0xf3, 0x8b, 0x52, 0x85, 0x2c, 0xb8, 0x58, 0x40, 0x6c, 0x21, 0x31, 0x3d, 0x88,
	0x0e, 0x3d, 0x98, 0x0e, 0x3d, 0x57, 0x90, 0x0e, 0x29, 0x1c, 0xe2, 0x4a, 0x0c, 0x4e, 0xca, 0x51,
	0x8a, 0xc9, 0x19, 0x45, 0xf9, 0xb9, 0x99, 0xa5, 0xb9, 0xf9, 0xc5, 0xfa, 0x20, 0xab, 0xf5, 0x33,
	0xf3, 0x4a, 0x52, 0x8b, 0xf2, 0x12, 0x73, 0x20, 0xd6, 0x26, 0xe7, 0xe7, 0x24, 0xb1, 0x81, 0x59,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x3e, 0xcb, 0xde, 0xac, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingCoreClient is the client API for PingCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingCoreClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pingCoreClient struct {
	cc *grpc.ClientConn
}

func NewPingCoreClient(cc *grpc.ClientConn) PingCoreClient {
	return &pingCoreClient{cc}
}

func (c *pingCoreClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tast.core.PingCore/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingCoreServer is the server API for PingCore service.
type PingCoreServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedPingCoreServer can be embedded to have forward compatible implementations.
type UnimplementedPingCoreServer struct {
}

func (*UnimplementedPingCoreServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterPingCoreServer(s *grpc.Server, srv PingCoreServer) {
	s.RegisterService(&_PingCore_serviceDesc, srv)
}

func _PingCore_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingCoreServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tast.core.PingCore/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingCoreServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingCore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.core.PingCore",
	HandlerType: (*PingCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingCore_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fake_core.proto",
}
