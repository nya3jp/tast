// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.11.4
// source: remote_fixture.proto

package protocol

import (
	context "context"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RunFixtureRequest is the request to RunFixture.
type RunFixtureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Control:
	//	*RunFixtureRequest_Push
	//	*RunFixtureRequest_Pop
	Control isRunFixtureRequest_Control `protobuf_oneof:"control"`
}

func (x *RunFixtureRequest) Reset() {
	*x = RunFixtureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_fixture_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFixtureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFixtureRequest) ProtoMessage() {}

func (x *RunFixtureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_fixture_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFixtureRequest.ProtoReflect.Descriptor instead.
func (*RunFixtureRequest) Descriptor() ([]byte, []int) {
	return file_remote_fixture_proto_rawDescGZIP(), []int{0}
}

func (m *RunFixtureRequest) GetControl() isRunFixtureRequest_Control {
	if m != nil {
		return m.Control
	}
	return nil
}

func (x *RunFixtureRequest) GetPush() *RunFixturePushRequest {
	if x, ok := x.GetControl().(*RunFixtureRequest_Push); ok {
		return x.Push
	}
	return nil
}

func (x *RunFixtureRequest) GetPop() *RunFixturePopRequest {
	if x, ok := x.GetControl().(*RunFixtureRequest_Pop); ok {
		return x.Pop
	}
	return nil
}

type isRunFixtureRequest_Control interface {
	isRunFixtureRequest_Control()
}

type RunFixtureRequest_Push struct {
	Push *RunFixturePushRequest `protobuf:"bytes,1,opt,name=push,proto3,oneof"`
}

type RunFixtureRequest_Pop struct {
	Pop *RunFixturePopRequest `protobuf:"bytes,2,opt,name=pop,proto3,oneof"`
}

func (*RunFixtureRequest_Push) isRunFixtureRequest_Control() {}

func (*RunFixtureRequest_Pop) isRunFixtureRequest_Control() {}

// RunFixturePushRequest requests pushing a fixture.
type RunFixturePushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the fixture to run method.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Config is the configuration the framework needs to run the fixture.
	Config *RunFixtureConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *RunFixturePushRequest) Reset() {
	*x = RunFixturePushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_fixture_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFixturePushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFixturePushRequest) ProtoMessage() {}

func (x *RunFixturePushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_fixture_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFixturePushRequest.ProtoReflect.Descriptor instead.
func (*RunFixturePushRequest) Descriptor() ([]byte, []int) {
	return file_remote_fixture_proto_rawDescGZIP(), []int{1}
}

func (x *RunFixturePushRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunFixturePushRequest) GetConfig() *RunFixtureConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// RunFixturePushRequest requests popping the pushed fixture.
type RunFixturePopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunFixturePopRequest) Reset() {
	*x = RunFixturePopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_fixture_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFixturePopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFixturePopRequest) ProtoMessage() {}

func (x *RunFixturePopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_fixture_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFixturePopRequest.ProtoReflect.Descriptor instead.
func (*RunFixturePopRequest) Descriptor() ([]byte, []int) {
	return file_remote_fixture_proto_rawDescGZIP(), []int{2}
}

// RunFixtureConfig contains information the framework needs to run fixtures.
type RunFixtureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TastVars contains names and values of runtime variables used to pass
	// out-of-band data to the fixture.
	TestVars map[string]string `protobuf:"bytes,1,rep,name=test_vars,json=testVars,proto3" json:"test_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DataDir is the path to the directory containing fixture data files.
	DataDir string `protobuf:"bytes,2,opt,name=data_dir,json=dataDir,proto3" json:"data_dir,omitempty"`
	// OutDir is the path to the base directory under which fixtures should write
	// output files.
	OutDir string `protobuf:"bytes,3,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	// TempDir is the path to the directory under which temporary files for
	// fixtures are written.
	TempDir string `protobuf:"bytes,4,opt,name=temp_dir,json=tempDir,proto3" json:"temp_dir,omitempty"`
	// ConnectionSpec is the DUT connection spec as [<user>@]host[:<port>].
	ConnectionSpec string `protobuf:"bytes,5,opt,name=connection_spec,json=connectionSpec,proto3" json:"connection_spec,omitempty"`
	// KeyFile is the path to the SSH private key to use to connect to the DUT.
	KeyFile string `protobuf:"bytes,6,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// KeyDir is the directory containing SSH private keys (typically $HOME/.ssh).
	KeyDir string `protobuf:"bytes,7,opt,name=key_dir,json=keyDir,proto3" json:"key_dir,omitempty"`
	// LocalBundleDir is the directory on the DUT where local test bundle
	// executables are located. This path is used by remote fixture to invoke gRPC
	// services in local test.
	LocalBundleDir string `protobuf:"bytes,8,opt,name=local_bundle_dir,json=localBundleDir,proto3" json:"local_bundle_dir,omitempty"`
	// CheckSoftwareDeps is true if each test's SoftwareDeps field should be
	// checked against AvailableSoftwareFeatures and UnavailableSoftwareFeatures.
	CheckSoftwareDeps bool `protobuf:"varint,9,opt,name=check_software_deps,json=checkSoftwareDeps,proto3" json:"check_software_deps,omitempty"`
	// AvailableSoftwareFeatures contains a list of software features supported
	// by the DUT.
	AvailableSoftwareFeatures []string `protobuf:"bytes,10,rep,name=available_software_features,json=availableSoftwareFeatures,proto3" json:"available_software_features,omitempty"`
	// UnavailableSoftwareFeatures contains a list of software features not
	// supported by the DUT.
	UnavailableSoftwareFeatures []string     `protobuf:"bytes,11,rep,name=unavailable_software_features,json=unavailableSoftwareFeatures,proto3" json:"unavailable_software_features,omitempty"`
	Devservers                  []string     `protobuf:"bytes,12,rep,name=devservers,proto3" json:"devservers,omitempty"`
	TlwServer                   string       `protobuf:"bytes,13,opt,name=tlw_server,json=tlwServer,proto3" json:"tlw_server,omitempty"`
	DutName                     string       `protobuf:"bytes,14,opt,name=dut_name,json=dutName,proto3" json:"dut_name,omitempty"`
	BuildArtifactsUrl           string       `protobuf:"bytes,15,opt,name=build_artifacts_url,json=buildArtifactsUrl,proto3" json:"build_artifacts_url,omitempty"`
	DownloadMode                DownloadMode `protobuf:"varint,16,opt,name=download_mode,json=downloadMode,proto3,enum=tast.core.DownloadMode" json:"download_mode,omitempty"`
	DutServer                   string       `protobuf:"bytes,17,opt,name=dut_server,json=dutServer,proto3" json:"dut_server,omitempty"`
	// CustomGracePeriod is the custom grace period for fixture methods. When
	// omitted reasonable default will be used. This field exists for unit
	// testing.
	CustomGracePeriod *duration.Duration `protobuf:"bytes,1000,opt,name=custom_grace_period,json=customGracePeriod,proto3" json:"custom_grace_period,omitempty"`
}

func (x *RunFixtureConfig) Reset() {
	*x = RunFixtureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_fixture_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFixtureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFixtureConfig) ProtoMessage() {}

func (x *RunFixtureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_remote_fixture_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFixtureConfig.ProtoReflect.Descriptor instead.
func (*RunFixtureConfig) Descriptor() ([]byte, []int) {
	return file_remote_fixture_proto_rawDescGZIP(), []int{3}
}

func (x *RunFixtureConfig) GetTestVars() map[string]string {
	if x != nil {
		return x.TestVars
	}
	return nil
}

func (x *RunFixtureConfig) GetDataDir() string {
	if x != nil {
		return x.DataDir
	}
	return ""
}

func (x *RunFixtureConfig) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

func (x *RunFixtureConfig) GetTempDir() string {
	if x != nil {
		return x.TempDir
	}
	return ""
}

func (x *RunFixtureConfig) GetConnectionSpec() string {
	if x != nil {
		return x.ConnectionSpec
	}
	return ""
}

func (x *RunFixtureConfig) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *RunFixtureConfig) GetKeyDir() string {
	if x != nil {
		return x.KeyDir
	}
	return ""
}

func (x *RunFixtureConfig) GetLocalBundleDir() string {
	if x != nil {
		return x.LocalBundleDir
	}
	return ""
}

func (x *RunFixtureConfig) GetCheckSoftwareDeps() bool {
	if x != nil {
		return x.CheckSoftwareDeps
	}
	return false
}

func (x *RunFixtureConfig) GetAvailableSoftwareFeatures() []string {
	if x != nil {
		return x.AvailableSoftwareFeatures
	}
	return nil
}

func (x *RunFixtureConfig) GetUnavailableSoftwareFeatures() []string {
	if x != nil {
		return x.UnavailableSoftwareFeatures
	}
	return nil
}

func (x *RunFixtureConfig) GetDevservers() []string {
	if x != nil {
		return x.Devservers
	}
	return nil
}

func (x *RunFixtureConfig) GetTlwServer() string {
	if x != nil {
		return x.TlwServer
	}
	return ""
}

func (x *RunFixtureConfig) GetDutName() string {
	if x != nil {
		return x.DutName
	}
	return ""
}

func (x *RunFixtureConfig) GetBuildArtifactsUrl() string {
	if x != nil {
		return x.BuildArtifactsUrl
	}
	return ""
}

func (x *RunFixtureConfig) GetDownloadMode() DownloadMode {
	if x != nil {
		return x.DownloadMode
	}
	return DownloadMode_BATCH
}

func (x *RunFixtureConfig) GetDutServer() string {
	if x != nil {
		return x.DutServer
	}
	return ""
}

func (x *RunFixtureConfig) GetCustomGracePeriod() *duration.Duration {
	if x != nil {
		return x.CustomGracePeriod
	}
	return nil
}

// RunFixtureError describes an error encountered while running fixtures.
type RunFixtureError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	File   string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Line   int32  `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
	Stack  string `protobuf:"bytes,4,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *RunFixtureError) Reset() {
	*x = RunFixtureError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_fixture_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFixtureError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFixtureError) ProtoMessage() {}

func (x *RunFixtureError) ProtoReflect() protoreflect.Message {
	mi := &file_remote_fixture_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFixtureError.ProtoReflect.Descriptor instead.
func (*RunFixtureError) Descriptor() ([]byte, []int) {
	return file_remote_fixture_proto_rawDescGZIP(), []int{4}
}

func (x *RunFixtureError) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RunFixtureError) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *RunFixtureError) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *RunFixtureError) GetStack() string {
	if x != nil {
		return x.Stack
	}
	return ""
}

// RunFixtureResponse is the control message the server streams to the caller.
type RunFixtureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Control:
	//	*RunFixtureResponse_Log
	//	*RunFixtureResponse_Error
	//	*RunFixtureResponse_RequestDone
	Control isRunFixtureResponse_Control `protobuf_oneof:"control"`
	// Timestamp is the timestamp of the event.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RunFixtureResponse) Reset() {
	*x = RunFixtureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_fixture_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFixtureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFixtureResponse) ProtoMessage() {}

func (x *RunFixtureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_fixture_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFixtureResponse.ProtoReflect.Descriptor instead.
func (*RunFixtureResponse) Descriptor() ([]byte, []int) {
	return file_remote_fixture_proto_rawDescGZIP(), []int{5}
}

func (m *RunFixtureResponse) GetControl() isRunFixtureResponse_Control {
	if m != nil {
		return m.Control
	}
	return nil
}

func (x *RunFixtureResponse) GetLog() string {
	if x, ok := x.GetControl().(*RunFixtureResponse_Log); ok {
		return x.Log
	}
	return ""
}

func (x *RunFixtureResponse) GetError() *RunFixtureError {
	if x, ok := x.GetControl().(*RunFixtureResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *RunFixtureResponse) GetRequestDone() *empty.Empty {
	if x, ok := x.GetControl().(*RunFixtureResponse_RequestDone); ok {
		return x.RequestDone
	}
	return nil
}

func (x *RunFixtureResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type isRunFixtureResponse_Control interface {
	isRunFixtureResponse_Control()
}

type RunFixtureResponse_Log struct {
	// Log is the log message.
	Log string `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type RunFixtureResponse_Error struct {
	// Error is the error message.
	Error *RunFixtureError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type RunFixtureResponse_RequestDone struct {
	// RequestDone is sent when request is done, no matter the result.
	RequestDone *empty.Empty `protobuf:"bytes,3,opt,name=request_done,json=requestDone,proto3,oneof"`
}

func (*RunFixtureResponse_Log) isRunFixtureResponse_Control() {}

func (*RunFixtureResponse_Error) isRunFixtureResponse_Control() {}

func (*RunFixtureResponse_RequestDone) isRunFixtureResponse_Control() {}

var File_remote_fixture_proto protoreflect.FileDescriptor

var file_remote_fixture_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b,
	0x01, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x03,
	0x70, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f,
	0x70, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x60, 0x0a, 0x15,
	0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x73, 0x74,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x16,
	0x0a, 0x14, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd4, 0x06, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x09, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x56,
	0x61, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x44,
	0x69, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x44, 0x69, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x75, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x1b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6c, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x6c, 0x77, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x75, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x1a, 0x3b, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a,
	0x0f, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x46, 0x69,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f,
	0x67, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f,
	0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x32, 0x61, 0x0a, 0x0e, 0x46, 0x69, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x52, 0x75, 0x6e,
	0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x23, 0x5a, 0x21, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x6f, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_remote_fixture_proto_rawDescOnce sync.Once
	file_remote_fixture_proto_rawDescData = file_remote_fixture_proto_rawDesc
)

func file_remote_fixture_proto_rawDescGZIP() []byte {
	file_remote_fixture_proto_rawDescOnce.Do(func() {
		file_remote_fixture_proto_rawDescData = protoimpl.X.CompressGZIP(file_remote_fixture_proto_rawDescData)
	})
	return file_remote_fixture_proto_rawDescData
}

var file_remote_fixture_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_remote_fixture_proto_goTypes = []interface{}{
	(*RunFixtureRequest)(nil),     // 0: tast.core.RunFixtureRequest
	(*RunFixturePushRequest)(nil), // 1: tast.core.RunFixturePushRequest
	(*RunFixturePopRequest)(nil),  // 2: tast.core.RunFixturePopRequest
	(*RunFixtureConfig)(nil),      // 3: tast.core.RunFixtureConfig
	(*RunFixtureError)(nil),       // 4: tast.core.RunFixtureError
	(*RunFixtureResponse)(nil),    // 5: tast.core.RunFixtureResponse
	nil,                           // 6: tast.core.RunFixtureConfig.TestVarsEntry
	(DownloadMode)(0),             // 7: tast.core.DownloadMode
	(*duration.Duration)(nil),     // 8: google.protobuf.Duration
	(*empty.Empty)(nil),           // 9: google.protobuf.Empty
	(*timestamp.Timestamp)(nil),   // 10: google.protobuf.Timestamp
}
var file_remote_fixture_proto_depIdxs = []int32{
	1,  // 0: tast.core.RunFixtureRequest.push:type_name -> tast.core.RunFixturePushRequest
	2,  // 1: tast.core.RunFixtureRequest.pop:type_name -> tast.core.RunFixturePopRequest
	3,  // 2: tast.core.RunFixturePushRequest.config:type_name -> tast.core.RunFixtureConfig
	6,  // 3: tast.core.RunFixtureConfig.test_vars:type_name -> tast.core.RunFixtureConfig.TestVarsEntry
	7,  // 4: tast.core.RunFixtureConfig.download_mode:type_name -> tast.core.DownloadMode
	8,  // 5: tast.core.RunFixtureConfig.custom_grace_period:type_name -> google.protobuf.Duration
	4,  // 6: tast.core.RunFixtureResponse.error:type_name -> tast.core.RunFixtureError
	9,  // 7: tast.core.RunFixtureResponse.request_done:type_name -> google.protobuf.Empty
	10, // 8: tast.core.RunFixtureResponse.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 9: tast.core.FixtureService.RunFixture:input_type -> tast.core.RunFixtureRequest
	5,  // 10: tast.core.FixtureService.RunFixture:output_type -> tast.core.RunFixtureResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_remote_fixture_proto_init() }
func file_remote_fixture_proto_init() {
	if File_remote_fixture_proto != nil {
		return
	}
	file_testing_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_remote_fixture_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFixtureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_fixture_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFixturePushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_fixture_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFixturePopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_fixture_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFixtureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_fixture_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFixtureError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_fixture_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunFixtureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_remote_fixture_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RunFixtureRequest_Push)(nil),
		(*RunFixtureRequest_Pop)(nil),
	}
	file_remote_fixture_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RunFixtureResponse_Log)(nil),
		(*RunFixtureResponse_Error)(nil),
		(*RunFixtureResponse_RequestDone)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_remote_fixture_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_remote_fixture_proto_goTypes,
		DependencyIndexes: file_remote_fixture_proto_depIdxs,
		MessageInfos:      file_remote_fixture_proto_msgTypes,
	}.Build()
	File_remote_fixture_proto = out.File
	file_remote_fixture_proto_rawDesc = nil
	file_remote_fixture_proto_goTypes = nil
	file_remote_fixture_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FixtureServiceClient is the client API for FixtureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FixtureServiceClient interface {
	RunFixture(ctx context.Context, opts ...grpc.CallOption) (FixtureService_RunFixtureClient, error)
}

type fixtureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFixtureServiceClient(cc grpc.ClientConnInterface) FixtureServiceClient {
	return &fixtureServiceClient{cc}
}

func (c *fixtureServiceClient) RunFixture(ctx context.Context, opts ...grpc.CallOption) (FixtureService_RunFixtureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FixtureService_serviceDesc.Streams[0], "/tast.core.FixtureService/RunFixture", opts...)
	if err != nil {
		return nil, err
	}
	x := &fixtureServiceRunFixtureClient{stream}
	return x, nil
}

type FixtureService_RunFixtureClient interface {
	Send(*RunFixtureRequest) error
	Recv() (*RunFixtureResponse, error)
	grpc.ClientStream
}

type fixtureServiceRunFixtureClient struct {
	grpc.ClientStream
}

func (x *fixtureServiceRunFixtureClient) Send(m *RunFixtureRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fixtureServiceRunFixtureClient) Recv() (*RunFixtureResponse, error) {
	m := new(RunFixtureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FixtureServiceServer is the server API for FixtureService service.
type FixtureServiceServer interface {
	RunFixture(FixtureService_RunFixtureServer) error
}

// UnimplementedFixtureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFixtureServiceServer struct {
}

func (*UnimplementedFixtureServiceServer) RunFixture(FixtureService_RunFixtureServer) error {
	return status.Errorf(codes.Unimplemented, "method RunFixture not implemented")
}

func RegisterFixtureServiceServer(s *grpc.Server, srv FixtureServiceServer) {
	s.RegisterService(&_FixtureService_serviceDesc, srv)
}

func _FixtureService_RunFixture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FixtureServiceServer).RunFixture(&fixtureServiceRunFixtureServer{stream})
}

type FixtureService_RunFixtureServer interface {
	Send(*RunFixtureResponse) error
	Recv() (*RunFixtureRequest, error)
	grpc.ServerStream
}

type fixtureServiceRunFixtureServer struct {
	grpc.ServerStream
}

func (x *fixtureServiceRunFixtureServer) Send(m *RunFixtureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fixtureServiceRunFixtureServer) Recv() (*RunFixtureRequest, error) {
	m := new(RunFixtureRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FixtureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tast.core.FixtureService",
	HandlerType: (*FixtureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunFixture",
			Handler:       _FixtureService_RunFixture_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote_fixture.proto",
}
