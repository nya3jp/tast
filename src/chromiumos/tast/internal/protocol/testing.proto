// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package tast.core;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "features.proto";

option go_package = "chromiumos/tast/internal/protocol";

service TestService {
  rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {}
}

message ListEntitiesRequest { Features features = 1; }

message ListEntitiesResponse { repeated ResolvedEntity entities = 1; }

// EntityType represents a type of an entity.
enum EntityType {
  TEST = 0;
  FIXTURE = 1;
}

// Entity describes an entity.
message Entity {
  EntityType type = 1;
  string name = 2;
  string package = 3;
  repeated string attributes = 4;
  string description = 5;
  string fixture = 6;
  EntityDependencies dependencies = 7;
  EntityContacts contacts = 8;
  EntityLegacyData legacy_data = 9;
}

// EntityContacts contains contact information of an entity.
message EntityContacts { repeated string emails = 1; }

// EntityDependencies describes dependencies of an entity that need to be
// evaluated before running it.
message EntityDependencies {
  repeated string data_files = 1;
  repeated string services = 2;
}

// EntityLegacyData contains extra information of an entity.
// Fields in this message are considered legacy because test bundles need to
// send these fields to Tast CLI just because they are made available in
// results.json for compatibility reasons.
message EntityLegacyData {
  google.protobuf.Duration timeout = 1;
  repeated string variables = 2;
  repeated string variable_deps = 3;
  repeated string software_deps = 4;
  string bundle = 5;
}

// Error describes details of an error reported by an entity.
message Error {
  string reason = 1;
  ErrorLocation location = 2;
}

// ErrorLocation represents a code location where an error was reported.
message ErrorLocation {
  string file = 1;
  int64 line = 2;
  string stack = 3;
}

// ResolvedEntity is similar to Entity, but contains additional fields computed
// from an original Entity and run time information.
message ResolvedEntity {
  Entity entity = 1;
  Skip skip = 2;
}

// RunLogEvent indicates that an informational log message not associated with
// an entity was produced.
message RunLogEvent {
  google.protobuf.Timestamp time = 1;
  string text = 2;
}

// EntityStartEvent marks the start of an entity run. EntityStartEvent is sent
// even if an entity is to be skipped.
message EntityStartEvent {
  google.protobuf.Timestamp time = 1;
  Entity entity = 2;
  string out_dir = 3;
}

// EntityLogEvent indicates that an informational log message was produced by
// an entity.
message EntityLogEvent {
  google.protobuf.Timestamp time = 1;
  string entity_name = 2;
  string text = 3;
}

// EntityErrorEvent indicates that an error was produced by an entity.
// A consumer should treat an entity as failed when it sees one or more errors
// reported for it.
message EntityErrorEvent {
  google.protobuf.Timestamp time = 1;
  string entity_name = 2;
  Error error = 3;
}

// EntityEndEvent marks the end of an entity run.
message EntityEndEvent {
  google.protobuf.Timestamp time = 1;
  string entity_name = 2;
  Skip skip = 3;
}

// Skip describes the reasons why an entity is skipped.
message Skip { repeated string reasons = 1; }
