// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/topology.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Topology_Type int32

const (
	Topology_TYPE_UNKNOWN                         Topology_Type = 0
	Topology_SCREEN                               Topology_Type = 1
	Topology_FORM_FACTOR                          Topology_Type = 2
	Topology_AUDIO                                Topology_Type = 3
	Topology_STYLUS                               Topology_Type = 4
	Topology_KEYBOARD                             Topology_Type = 5
	Topology_THERMAL                              Topology_Type = 6
	Topology_CAMERA                               Topology_Type = 7
	Topology_ACCELEROMETER_GYROSCOPE_MAGNETOMETER Topology_Type = 8
	Topology_FINGERPRINT                          Topology_Type = 9
	Topology_PROXIMITY_SENSOR                     Topology_Type = 10
	Topology_DAUGHTER_BOARD                       Topology_Type = 11
	Topology_NON_VOLATILE_STORAGE                 Topology_Type = 12
	Topology_RAM                                  Topology_Type = 13
	Topology_WIFI                                 Topology_Type = 14
	Topology_LTE_BOARD                            Topology_Type = 15
	Topology_SD_READER                            Topology_Type = 16
	Topology_MOTHERBOARD_USB                      Topology_Type = 17
)

var Topology_Type_name = map[int32]string{
	0:  "TYPE_UNKNOWN",
	1:  "SCREEN",
	2:  "FORM_FACTOR",
	3:  "AUDIO",
	4:  "STYLUS",
	5:  "KEYBOARD",
	6:  "THERMAL",
	7:  "CAMERA",
	8:  "ACCELEROMETER_GYROSCOPE_MAGNETOMETER",
	9:  "FINGERPRINT",
	10: "PROXIMITY_SENSOR",
	11: "DAUGHTER_BOARD",
	12: "NON_VOLATILE_STORAGE",
	13: "RAM",
	14: "WIFI",
	15: "LTE_BOARD",
	16: "SD_READER",
	17: "MOTHERBOARD_USB",
}

var Topology_Type_value = map[string]int32{
	"TYPE_UNKNOWN":                         0,
	"SCREEN":                               1,
	"FORM_FACTOR":                          2,
	"AUDIO":                                3,
	"STYLUS":                               4,
	"KEYBOARD":                             5,
	"THERMAL":                              6,
	"CAMERA":                               7,
	"ACCELEROMETER_GYROSCOPE_MAGNETOMETER": 8,
	"FINGERPRINT":                          9,
	"PROXIMITY_SENSOR":                     10,
	"DAUGHTER_BOARD":                       11,
	"NON_VOLATILE_STORAGE":                 12,
	"RAM":                                  13,
	"WIFI":                                 14,
	"LTE_BOARD":                            15,
	"SD_READER":                            16,
	"MOTHERBOARD_USB":                      17,
}

func (x Topology_Type) String() string {
	return proto.EnumName(Topology_Type_name, int32(x))
}

func (Topology_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{0, 0}
}

type HardwareFeatures_Present int32

const (
	HardwareFeatures_PRESENT_UNKNOWN HardwareFeatures_Present = 0
	HardwareFeatures_PRESENT         HardwareFeatures_Present = 1
	HardwareFeatures_NOT_PRESENT     HardwareFeatures_Present = 2
)

var HardwareFeatures_Present_name = map[int32]string{
	0: "PRESENT_UNKNOWN",
	1: "PRESENT",
	2: "NOT_PRESENT",
}

var HardwareFeatures_Present_value = map[string]int32{
	"PRESENT_UNKNOWN": 0,
	"PRESENT":         1,
	"NOT_PRESENT":     2,
}

func (x HardwareFeatures_Present) String() string {
	return proto.EnumName(HardwareFeatures_Present_name, int32(x))
}

func (HardwareFeatures_Present) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 0}
}

type HardwareFeatures_Audio_AudioCodec int32

const (
	HardwareFeatures_Audio_AUDIO_CODEC_UNKNOWN HardwareFeatures_Audio_AudioCodec = 0
	HardwareFeatures_Audio_RT5682              HardwareFeatures_Audio_AudioCodec = 1
	HardwareFeatures_Audio_ALC5682I            HardwareFeatures_Audio_AudioCodec = 2
	HardwareFeatures_Audio_ALC5682             HardwareFeatures_Audio_AudioCodec = 3
)

var HardwareFeatures_Audio_AudioCodec_name = map[int32]string{
	0: "AUDIO_CODEC_UNKNOWN",
	1: "RT5682",
	2: "ALC5682I",
	3: "ALC5682",
}

var HardwareFeatures_Audio_AudioCodec_value = map[string]int32{
	"AUDIO_CODEC_UNKNOWN": 0,
	"RT5682":              1,
	"ALC5682I":            2,
	"ALC5682":             3,
}

func (x HardwareFeatures_Audio_AudioCodec) String() string {
	return proto.EnumName(HardwareFeatures_Audio_AudioCodec_name, int32(x))
}

func (HardwareFeatures_Audio_AudioCodec) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 6, 0}
}

type HardwareFeatures_FormFactor_FormFactorType int32

const (
	HardwareFeatures_FormFactor_FORM_FACTOR_UNKNOWN HardwareFeatures_FormFactor_FormFactorType = 0
	HardwareFeatures_FormFactor_CLAMSHELL           HardwareFeatures_FormFactor_FormFactorType = 1
	HardwareFeatures_FormFactor_CONVERTIBLE         HardwareFeatures_FormFactor_FormFactorType = 2
	HardwareFeatures_FormFactor_DETACHABLE          HardwareFeatures_FormFactor_FormFactorType = 3
	HardwareFeatures_FormFactor_CHROMEBASE          HardwareFeatures_FormFactor_FormFactorType = 4
	HardwareFeatures_FormFactor_CHROMEBOX           HardwareFeatures_FormFactor_FormFactorType = 5
	HardwareFeatures_FormFactor_CHROMEBIT           HardwareFeatures_FormFactor_FormFactorType = 6
	HardwareFeatures_FormFactor_CHROMESLATE         HardwareFeatures_FormFactor_FormFactorType = 7
)

var HardwareFeatures_FormFactor_FormFactorType_name = map[int32]string{
	0: "FORM_FACTOR_UNKNOWN",
	1: "CLAMSHELL",
	2: "CONVERTIBLE",
	3: "DETACHABLE",
	4: "CHROMEBASE",
	5: "CHROMEBOX",
	6: "CHROMEBIT",
	7: "CHROMESLATE",
}

var HardwareFeatures_FormFactor_FormFactorType_value = map[string]int32{
	"FORM_FACTOR_UNKNOWN": 0,
	"CLAMSHELL":           1,
	"CONVERTIBLE":         2,
	"DETACHABLE":          3,
	"CHROMEBASE":          4,
	"CHROMEBOX":           5,
	"CHROMEBIT":           6,
	"CHROMESLATE":         7,
}

func (x HardwareFeatures_FormFactor_FormFactorType) String() string {
	return proto.EnumName(HardwareFeatures_FormFactor_FormFactorType_name, int32(x))
}

func (HardwareFeatures_FormFactor_FormFactorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 13, 0}
}

type HardwareFeatures_Stylus_StylusType int32

const (
	HardwareFeatures_Stylus_STYLUS_UNKNOWN HardwareFeatures_Stylus_StylusType = 0
	HardwareFeatures_Stylus_NONE           HardwareFeatures_Stylus_StylusType = 1
	HardwareFeatures_Stylus_INTERNAL       HardwareFeatures_Stylus_StylusType = 2
	HardwareFeatures_Stylus_EXTERNAL       HardwareFeatures_Stylus_StylusType = 3
)

var HardwareFeatures_Stylus_StylusType_name = map[int32]string{
	0: "STYLUS_UNKNOWN",
	1: "NONE",
	2: "INTERNAL",
	3: "EXTERNAL",
}

var HardwareFeatures_Stylus_StylusType_value = map[string]int32{
	"STYLUS_UNKNOWN": 0,
	"NONE":           1,
	"INTERNAL":       2,
	"EXTERNAL":       3,
}

func (x HardwareFeatures_Stylus_StylusType) String() string {
	return proto.EnumName(HardwareFeatures_Stylus_StylusType_name, int32(x))
}

func (HardwareFeatures_Stylus_StylusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 14, 0}
}

type HardwareFeatures_Keyboard_KeyboardType int32

const (
	HardwareFeatures_Keyboard_KEYBOARD_TYPE_UNKNOWN HardwareFeatures_Keyboard_KeyboardType = 0
	HardwareFeatures_Keyboard_INTERNAL              HardwareFeatures_Keyboard_KeyboardType = 1
	HardwareFeatures_Keyboard_NONE                  HardwareFeatures_Keyboard_KeyboardType = 2
	HardwareFeatures_Keyboard_DETACHABLE            HardwareFeatures_Keyboard_KeyboardType = 3
)

var HardwareFeatures_Keyboard_KeyboardType_name = map[int32]string{
	0: "KEYBOARD_TYPE_UNKNOWN",
	1: "INTERNAL",
	2: "NONE",
	3: "DETACHABLE",
}

var HardwareFeatures_Keyboard_KeyboardType_value = map[string]int32{
	"KEYBOARD_TYPE_UNKNOWN": 0,
	"INTERNAL":              1,
	"NONE":                  2,
	"DETACHABLE":            3,
}

func (x HardwareFeatures_Keyboard_KeyboardType) String() string {
	return proto.EnumName(HardwareFeatures_Keyboard_KeyboardType_name, int32(x))
}

func (HardwareFeatures_Keyboard_KeyboardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 15, 0}
}

type HardwareFeatures_Fingerprint_Location int32

const (
	HardwareFeatures_Fingerprint_LOCATION_UNKNOWN      HardwareFeatures_Fingerprint_Location = 0
	HardwareFeatures_Fingerprint_POWER_BUTTON_TOP_LEFT HardwareFeatures_Fingerprint_Location = 1
	HardwareFeatures_Fingerprint_KEYBOARD_BOTTOM_LEFT  HardwareFeatures_Fingerprint_Location = 2
	HardwareFeatures_Fingerprint_KEYBOARD_BOTTOM_RIGHT HardwareFeatures_Fingerprint_Location = 3
	HardwareFeatures_Fingerprint_KEYBOARD_TOP_RIGHT    HardwareFeatures_Fingerprint_Location = 4
)

var HardwareFeatures_Fingerprint_Location_name = map[int32]string{
	0: "LOCATION_UNKNOWN",
	1: "POWER_BUTTON_TOP_LEFT",
	2: "KEYBOARD_BOTTOM_LEFT",
	3: "KEYBOARD_BOTTOM_RIGHT",
	4: "KEYBOARD_TOP_RIGHT",
}

var HardwareFeatures_Fingerprint_Location_value = map[string]int32{
	"LOCATION_UNKNOWN":      0,
	"POWER_BUTTON_TOP_LEFT": 1,
	"KEYBOARD_BOTTOM_LEFT":  2,
	"KEYBOARD_BOTTOM_RIGHT": 3,
	"KEYBOARD_TOP_RIGHT":    4,
}

func (x HardwareFeatures_Fingerprint_Location) String() string {
	return proto.EnumName(HardwareFeatures_Fingerprint_Location_name, int32(x))
}

func (HardwareFeatures_Fingerprint_Location) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 17, 0}
}

type HardwareFeatures_Storage_StorageType int32

const (
	HardwareFeatures_Storage_STORAGE_TYPE_UNKNOWN HardwareFeatures_Storage_StorageType = 0
	HardwareFeatures_Storage_EMMC                 HardwareFeatures_Storage_StorageType = 1
	HardwareFeatures_Storage_NVME                 HardwareFeatures_Storage_StorageType = 2
)

var HardwareFeatures_Storage_StorageType_name = map[int32]string{
	0: "STORAGE_TYPE_UNKNOWN",
	1: "EMMC",
	2: "NVME",
}

var HardwareFeatures_Storage_StorageType_value = map[string]int32{
	"STORAGE_TYPE_UNKNOWN": 0,
	"EMMC":                 1,
	"NVME":                 2,
}

func (x HardwareFeatures_Storage_StorageType) String() string {
	return proto.EnumName(HardwareFeatures_Storage_StorageType_name, int32(x))
}

func (HardwareFeatures_Storage_StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 18, 0}
}

// Represents a specific hardware topology option for a hardware feature, e.g.
// camera, microphone, gyroscope, daughter board connection. For ecample. one
// camera topology would be represented by a unique instance of this Topology
// message.
//
// All Topology instances are scoped to a particular Design.
type Topology struct {
	// Short, but meaningful string that represents the topology. Blank id is
	// not valid. Id values are validated by Design repo. Ids are
	// meaningful within a Design. Ids are scoped and unique within a
	// particular hardware features for a Design. For example, it is valid to have
	// a "NONE" id for both the camera and micropohne hardware feature within the
	// same Design.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of hardware feature this topology describes. This is used to
	// ensure that the correct Topology values are used correctly within the
	// HardwareTopology message
	Type Topology_Type `protobuf:"varint,2,opt,name=type,proto3,enum=chromiumos.config.api.Topology_Type" json:"type,omitempty"`
	// Map of human readable descriptions in various languages. Maps language
	// code, e.g. "EN" or "ZH", to description of topology. These descriptions can
	// be displayed to factory operators to select the correct options that
	// applies to the board they are assembling.
	Description map[string]string `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specify the subset of hardware features that this hardware topology
	// provides
	HardwareFeature      *HardwareFeatures `protobuf:"bytes,4,opt,name=hardware_feature,json=hardwareFeature,proto3" json:"hardware_feature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Topology) Reset()         { *m = Topology{} }
func (m *Topology) String() string { return proto.CompactTextString(m) }
func (*Topology) ProtoMessage()    {}
func (*Topology) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{0}
}

func (m *Topology) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topology.Unmarshal(m, b)
}
func (m *Topology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topology.Marshal(b, m, deterministic)
}
func (m *Topology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topology.Merge(m, src)
}
func (m *Topology) XXX_Size() int {
	return xxx_messageInfo_Topology.Size(m)
}
func (m *Topology) XXX_DiscardUnknown() {
	xxx_messageInfo_Topology.DiscardUnknown(m)
}

var xxx_messageInfo_Topology proto.InternalMessageInfo

func (m *Topology) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Topology) GetType() Topology_Type {
	if m != nil {
		return m.Type
	}
	return Topology_TYPE_UNKNOWN
}

func (m *Topology) GetDescription() map[string]string {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Topology) GetHardwareFeature() *HardwareFeatures {
	if m != nil {
		return m.HardwareFeature
	}
	return nil
}

// Each Topology message specifies what that topology means in a 1st class
// queryable way. Each Topology will only the subset of hardware features that
// are applicable to that value.
// The DesignConfig layer will combine all of the Topology messages
// HardwareFeature messages into a wholistic view of the hardware design
// configuration.
//
// Note to API designers: each field needs to be able to differentiate
// an unspecified value and from the 0-value; this can be down with
// messages or enums. Each field also defines how multiple values should be
// combined.
type HardwareFeatures struct {
	// USB-C properties
	UsbC *HardwareFeatures_UsbC `protobuf:"bytes,1,opt,name=usb_c,json=usbC,proto3" json:"usb_c,omitempty"`
	// USB-A properties
	UsbA *HardwareFeatures_UsbA `protobuf:"bytes,2,opt,name=usb_a,json=usbA,proto3" json:"usb_a,omitempty"`
	// LTE properties
	Lte *HardwareFeatures_Lte `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// HDMI properties
	Hdmi *HardwareFeatures_Hdmi `protobuf:"bytes,4,opt,name=hdmi,proto3" json:"hdmi,omitempty"`
	// Firmware configuration field programmed in CBI. The value from each
	// topology value will be summed to create the final DesignConfig level
	// firmware configuration value.
	FwConfig *HardwareFeatures_FirmwareConfiguration `protobuf:"bytes,5,opt,name=fw_config,json=fwConfig,proto3" json:"fw_config,omitempty"`
	// Audio properties of system
	Audio *HardwareFeatures_Audio `protobuf:"bytes,6,opt,name=audio,proto3" json:"audio,omitempty"`
	// Camera properties of system.
	Camera *HardwareFeatures_Camera `protobuf:"bytes,7,opt,name=camera,proto3" json:"camera,omitempty"`
	// Camera properties of system.
	Accelerometer *HardwareFeatures_Accelerometer `protobuf:"bytes,8,opt,name=accelerometer,proto3" json:"accelerometer,omitempty"`
	// Gyroscope properties of system.
	Gyroscope *HardwareFeatures_Gyroscope `protobuf:"bytes,9,opt,name=gyroscope,proto3" json:"gyroscope,omitempty"`
	// Magnetometer properties of system.
	Magnetometer *HardwareFeatures_Magnetometer `protobuf:"bytes,10,opt,name=magnetometer,proto3" json:"magnetometer,omitempty"`
	// LightSensor properties of system.
	LightSensor *HardwareFeatures_LightSensor `protobuf:"bytes,11,opt,name=light_sensor,json=lightSensor,proto3" json:"light_sensor,omitempty"`
	// Screen properties of system
	Screen *HardwareFeatures_Screen `protobuf:"bytes,12,opt,name=screen,proto3" json:"screen,omitempty"`
	// Function form factor of system
	FormFactor *HardwareFeatures_FormFactor `protobuf:"bytes,13,opt,name=form_factor,json=formFactor,proto3" json:"form_factor,omitempty"`
	// Stylus properites of system.
	Stylus *HardwareFeatures_Stylus `protobuf:"bytes,14,opt,name=stylus,proto3" json:"stylus,omitempty"`
	// Keyboard properties of system
	Keyboard *HardwareFeatures_Keyboard `protobuf:"bytes,15,opt,name=keyboard,proto3" json:"keyboard,omitempty"`
	// Memory properties of system
	Memory *HardwareFeatures_Memory `protobuf:"bytes,16,opt,name=memory,proto3" json:"memory,omitempty"`
	// Fingerprint properties of system
	Fingerprint *HardwareFeatures_Fingerprint `protobuf:"bytes,17,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Non-volatile storage properties of system
	Storage              *HardwareFeatures_Storage `protobuf:"bytes,18,opt,name=storage,proto3" json:"storage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *HardwareFeatures) Reset()         { *m = HardwareFeatures{} }
func (m *HardwareFeatures) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures) ProtoMessage()    {}
func (*HardwareFeatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1}
}

func (m *HardwareFeatures) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures.Unmarshal(m, b)
}
func (m *HardwareFeatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures.Merge(m, src)
}
func (m *HardwareFeatures) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures.Size(m)
}
func (m *HardwareFeatures) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures proto.InternalMessageInfo

func (m *HardwareFeatures) GetUsbC() *HardwareFeatures_UsbC {
	if m != nil {
		return m.UsbC
	}
	return nil
}

func (m *HardwareFeatures) GetUsbA() *HardwareFeatures_UsbA {
	if m != nil {
		return m.UsbA
	}
	return nil
}

func (m *HardwareFeatures) GetLte() *HardwareFeatures_Lte {
	if m != nil {
		return m.Lte
	}
	return nil
}

func (m *HardwareFeatures) GetHdmi() *HardwareFeatures_Hdmi {
	if m != nil {
		return m.Hdmi
	}
	return nil
}

func (m *HardwareFeatures) GetFwConfig() *HardwareFeatures_FirmwareConfiguration {
	if m != nil {
		return m.FwConfig
	}
	return nil
}

func (m *HardwareFeatures) GetAudio() *HardwareFeatures_Audio {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *HardwareFeatures) GetCamera() *HardwareFeatures_Camera {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *HardwareFeatures) GetAccelerometer() *HardwareFeatures_Accelerometer {
	if m != nil {
		return m.Accelerometer
	}
	return nil
}

func (m *HardwareFeatures) GetGyroscope() *HardwareFeatures_Gyroscope {
	if m != nil {
		return m.Gyroscope
	}
	return nil
}

func (m *HardwareFeatures) GetMagnetometer() *HardwareFeatures_Magnetometer {
	if m != nil {
		return m.Magnetometer
	}
	return nil
}

func (m *HardwareFeatures) GetLightSensor() *HardwareFeatures_LightSensor {
	if m != nil {
		return m.LightSensor
	}
	return nil
}

func (m *HardwareFeatures) GetScreen() *HardwareFeatures_Screen {
	if m != nil {
		return m.Screen
	}
	return nil
}

func (m *HardwareFeatures) GetFormFactor() *HardwareFeatures_FormFactor {
	if m != nil {
		return m.FormFactor
	}
	return nil
}

func (m *HardwareFeatures) GetStylus() *HardwareFeatures_Stylus {
	if m != nil {
		return m.Stylus
	}
	return nil
}

func (m *HardwareFeatures) GetKeyboard() *HardwareFeatures_Keyboard {
	if m != nil {
		return m.Keyboard
	}
	return nil
}

func (m *HardwareFeatures) GetMemory() *HardwareFeatures_Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *HardwareFeatures) GetFingerprint() *HardwareFeatures_Fingerprint {
	if m != nil {
		return m.Fingerprint
	}
	return nil
}

func (m *HardwareFeatures) GetStorage() *HardwareFeatures_Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

type HardwareFeatures_Count struct {
	Value                uint32   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HardwareFeatures_Count) Reset()         { *m = HardwareFeatures_Count{} }
func (m *HardwareFeatures_Count) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Count) ProtoMessage()    {}
func (*HardwareFeatures_Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 0}
}

func (m *HardwareFeatures_Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Count.Unmarshal(m, b)
}
func (m *HardwareFeatures_Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Count.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Count.Merge(m, src)
}
func (m *HardwareFeatures_Count) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Count.Size(m)
}
func (m *HardwareFeatures_Count) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Count.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Count proto.InternalMessageInfo

func (m *HardwareFeatures_Count) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type HardwareFeatures_UsbC struct {
	// The number of USB-C ports
	Count                *HardwareFeatures_Count `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HardwareFeatures_UsbC) Reset()         { *m = HardwareFeatures_UsbC{} }
func (m *HardwareFeatures_UsbC) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_UsbC) ProtoMessage()    {}
func (*HardwareFeatures_UsbC) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 1}
}

func (m *HardwareFeatures_UsbC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_UsbC.Unmarshal(m, b)
}
func (m *HardwareFeatures_UsbC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_UsbC.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_UsbC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_UsbC.Merge(m, src)
}
func (m *HardwareFeatures_UsbC) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_UsbC.Size(m)
}
func (m *HardwareFeatures_UsbC) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_UsbC.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_UsbC proto.InternalMessageInfo

func (m *HardwareFeatures_UsbC) GetCount() *HardwareFeatures_Count {
	if m != nil {
		return m.Count
	}
	return nil
}

type HardwareFeatures_UsbA struct {
	// The number of USB-A ports
	Count                *HardwareFeatures_Count `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HardwareFeatures_UsbA) Reset()         { *m = HardwareFeatures_UsbA{} }
func (m *HardwareFeatures_UsbA) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_UsbA) ProtoMessage()    {}
func (*HardwareFeatures_UsbA) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 2}
}

func (m *HardwareFeatures_UsbA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_UsbA.Unmarshal(m, b)
}
func (m *HardwareFeatures_UsbA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_UsbA.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_UsbA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_UsbA.Merge(m, src)
}
func (m *HardwareFeatures_UsbA) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_UsbA.Size(m)
}
func (m *HardwareFeatures_UsbA) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_UsbA.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_UsbA proto.InternalMessageInfo

func (m *HardwareFeatures_UsbA) GetCount() *HardwareFeatures_Count {
	if m != nil {
		return m.Count
	}
	return nil
}

type HardwareFeatures_Lte struct {
	// If LTE is present on system
	Present              HardwareFeatures_Present `protobuf:"varint,1,opt,name=present,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"present,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_Lte) Reset()         { *m = HardwareFeatures_Lte{} }
func (m *HardwareFeatures_Lte) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Lte) ProtoMessage()    {}
func (*HardwareFeatures_Lte) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 3}
}

func (m *HardwareFeatures_Lte) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Lte.Unmarshal(m, b)
}
func (m *HardwareFeatures_Lte) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Lte.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Lte) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Lte.Merge(m, src)
}
func (m *HardwareFeatures_Lte) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Lte.Size(m)
}
func (m *HardwareFeatures_Lte) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Lte.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Lte proto.InternalMessageInfo

func (m *HardwareFeatures_Lte) GetPresent() HardwareFeatures_Present {
	if m != nil {
		return m.Present
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_Hdmi struct {
	// If native HDMI support is present on system.
	Present              HardwareFeatures_Present `protobuf:"varint,1,opt,name=present,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"present,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_Hdmi) Reset()         { *m = HardwareFeatures_Hdmi{} }
func (m *HardwareFeatures_Hdmi) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Hdmi) ProtoMessage()    {}
func (*HardwareFeatures_Hdmi) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 4}
}

func (m *HardwareFeatures_Hdmi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Hdmi.Unmarshal(m, b)
}
func (m *HardwareFeatures_Hdmi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Hdmi.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Hdmi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Hdmi.Merge(m, src)
}
func (m *HardwareFeatures_Hdmi) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Hdmi.Size(m)
}
func (m *HardwareFeatures_Hdmi) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Hdmi.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Hdmi proto.InternalMessageInfo

func (m *HardwareFeatures_Hdmi) GetPresent() HardwareFeatures_Present {
	if m != nil {
		return m.Present
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_FirmwareConfiguration struct {
	// The firmware configuration value
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The mask of valid bits that could be used by above value
	Mask                 uint32   `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HardwareFeatures_FirmwareConfiguration) Reset() {
	*m = HardwareFeatures_FirmwareConfiguration{}
}
func (m *HardwareFeatures_FirmwareConfiguration) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_FirmwareConfiguration) ProtoMessage()    {}
func (*HardwareFeatures_FirmwareConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 5}
}

func (m *HardwareFeatures_FirmwareConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_FirmwareConfiguration.Unmarshal(m, b)
}
func (m *HardwareFeatures_FirmwareConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_FirmwareConfiguration.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_FirmwareConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_FirmwareConfiguration.Merge(m, src)
}
func (m *HardwareFeatures_FirmwareConfiguration) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_FirmwareConfiguration.Size(m)
}
func (m *HardwareFeatures_FirmwareConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_FirmwareConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_FirmwareConfiguration proto.InternalMessageInfo

func (m *HardwareFeatures_FirmwareConfiguration) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *HardwareFeatures_FirmwareConfiguration) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

type HardwareFeatures_Audio struct {
	// Which audio codec is in use
	AudioCodec           HardwareFeatures_Audio_AudioCodec `protobuf:"varint,1,opt,name=audio_codec,json=audioCodec,proto3,enum=chromiumos.config.api.HardwareFeatures_Audio_AudioCodec" json:"audio_codec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HardwareFeatures_Audio) Reset()         { *m = HardwareFeatures_Audio{} }
func (m *HardwareFeatures_Audio) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Audio) ProtoMessage()    {}
func (*HardwareFeatures_Audio) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 6}
}

func (m *HardwareFeatures_Audio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Audio.Unmarshal(m, b)
}
func (m *HardwareFeatures_Audio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Audio.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Audio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Audio.Merge(m, src)
}
func (m *HardwareFeatures_Audio) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Audio.Size(m)
}
func (m *HardwareFeatures_Audio) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Audio.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Audio proto.InternalMessageInfo

func (m *HardwareFeatures_Audio) GetAudioCodec() HardwareFeatures_Audio_AudioCodec {
	if m != nil {
		return m.AudioCodec
	}
	return HardwareFeatures_Audio_AUDIO_CODEC_UNKNOWN
}

type HardwareFeatures_Camera struct {
	// If front camera on A panel is present
	APanelCamera HardwareFeatures_Present `protobuf:"varint,1,opt,name=a_panel_camera,json=aPanelCamera,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"a_panel_camera,omitempty"`
	// If user facing camer on B panel is present
	BPanelCamera HardwareFeatures_Present `protobuf:"varint,2,opt,name=b_panel_camera,json=bPanelCamera,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"b_panel_camera,omitempty"`
	// Number of camera present on system
	Count                *HardwareFeatures_Count `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HardwareFeatures_Camera) Reset()         { *m = HardwareFeatures_Camera{} }
func (m *HardwareFeatures_Camera) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Camera) ProtoMessage()    {}
func (*HardwareFeatures_Camera) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 7}
}

func (m *HardwareFeatures_Camera) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Camera.Unmarshal(m, b)
}
func (m *HardwareFeatures_Camera) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Camera.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Camera) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Camera.Merge(m, src)
}
func (m *HardwareFeatures_Camera) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Camera.Size(m)
}
func (m *HardwareFeatures_Camera) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Camera.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Camera proto.InternalMessageInfo

func (m *HardwareFeatures_Camera) GetAPanelCamera() HardwareFeatures_Present {
	if m != nil {
		return m.APanelCamera
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

func (m *HardwareFeatures_Camera) GetBPanelCamera() HardwareFeatures_Present {
	if m != nil {
		return m.BPanelCamera
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

func (m *HardwareFeatures_Camera) GetCount() *HardwareFeatures_Count {
	if m != nil {
		return m.Count
	}
	return nil
}

type HardwareFeatures_Accelerometer struct {
	// If lid accelerometer is present on system
	LidAccelerometer HardwareFeatures_Present `protobuf:"varint,1,opt,name=lid_accelerometer,json=lidAccelerometer,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"lid_accelerometer,omitempty"`
	// If base accelerometer is present on system
	BaseAccelerometer    HardwareFeatures_Present `protobuf:"varint,2,opt,name=base_accelerometer,json=baseAccelerometer,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"base_accelerometer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_Accelerometer) Reset()         { *m = HardwareFeatures_Accelerometer{} }
func (m *HardwareFeatures_Accelerometer) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Accelerometer) ProtoMessage()    {}
func (*HardwareFeatures_Accelerometer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 8}
}

func (m *HardwareFeatures_Accelerometer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Accelerometer.Unmarshal(m, b)
}
func (m *HardwareFeatures_Accelerometer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Accelerometer.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Accelerometer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Accelerometer.Merge(m, src)
}
func (m *HardwareFeatures_Accelerometer) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Accelerometer.Size(m)
}
func (m *HardwareFeatures_Accelerometer) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Accelerometer.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Accelerometer proto.InternalMessageInfo

func (m *HardwareFeatures_Accelerometer) GetLidAccelerometer() HardwareFeatures_Present {
	if m != nil {
		return m.LidAccelerometer
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

func (m *HardwareFeatures_Accelerometer) GetBaseAccelerometer() HardwareFeatures_Present {
	if m != nil {
		return m.BaseAccelerometer
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_Gyroscope struct {
	// If lid gyroscope is present on system
	LidGryoscope HardwareFeatures_Present `protobuf:"varint,1,opt,name=lid_gryoscope,json=lidGryoscope,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"lid_gryoscope,omitempty"`
	// If base gryoscope is present on system
	BaseGryoscope        HardwareFeatures_Present `protobuf:"varint,2,opt,name=base_gryoscope,json=baseGryoscope,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"base_gryoscope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_Gyroscope) Reset()         { *m = HardwareFeatures_Gyroscope{} }
func (m *HardwareFeatures_Gyroscope) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Gyroscope) ProtoMessage()    {}
func (*HardwareFeatures_Gyroscope) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 9}
}

func (m *HardwareFeatures_Gyroscope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Gyroscope.Unmarshal(m, b)
}
func (m *HardwareFeatures_Gyroscope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Gyroscope.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Gyroscope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Gyroscope.Merge(m, src)
}
func (m *HardwareFeatures_Gyroscope) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Gyroscope.Size(m)
}
func (m *HardwareFeatures_Gyroscope) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Gyroscope.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Gyroscope proto.InternalMessageInfo

func (m *HardwareFeatures_Gyroscope) GetLidGryoscope() HardwareFeatures_Present {
	if m != nil {
		return m.LidGryoscope
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

func (m *HardwareFeatures_Gyroscope) GetBaseGryoscope() HardwareFeatures_Present {
	if m != nil {
		return m.BaseGryoscope
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_Magnetometer struct {
	// If lid magnometer is present on system
	LidMagnetometer HardwareFeatures_Present `protobuf:"varint,1,opt,name=lid_magnetometer,json=lidMagnetometer,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"lid_magnetometer,omitempty"`
	// If base magnometer is present on system
	BaseMagnetometer     HardwareFeatures_Present `protobuf:"varint,2,opt,name=base_magnetometer,json=baseMagnetometer,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"base_magnetometer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_Magnetometer) Reset()         { *m = HardwareFeatures_Magnetometer{} }
func (m *HardwareFeatures_Magnetometer) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Magnetometer) ProtoMessage()    {}
func (*HardwareFeatures_Magnetometer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 10}
}

func (m *HardwareFeatures_Magnetometer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Magnetometer.Unmarshal(m, b)
}
func (m *HardwareFeatures_Magnetometer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Magnetometer.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Magnetometer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Magnetometer.Merge(m, src)
}
func (m *HardwareFeatures_Magnetometer) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Magnetometer.Size(m)
}
func (m *HardwareFeatures_Magnetometer) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Magnetometer.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Magnetometer proto.InternalMessageInfo

func (m *HardwareFeatures_Magnetometer) GetLidMagnetometer() HardwareFeatures_Present {
	if m != nil {
		return m.LidMagnetometer
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

func (m *HardwareFeatures_Magnetometer) GetBaseMagnetometer() HardwareFeatures_Present {
	if m != nil {
		return m.BaseMagnetometer
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_LightSensor struct {
	// If lid light sensor is present on system
	LidLightsensor HardwareFeatures_Present `protobuf:"varint,1,opt,name=lid_lightsensor,json=lidLightsensor,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"lid_lightsensor,omitempty"`
	// If base light sensor is present on system
	BaseLightsensor      HardwareFeatures_Present `protobuf:"varint,2,opt,name=base_lightsensor,json=baseLightsensor,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"base_lightsensor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_LightSensor) Reset()         { *m = HardwareFeatures_LightSensor{} }
func (m *HardwareFeatures_LightSensor) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_LightSensor) ProtoMessage()    {}
func (*HardwareFeatures_LightSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 11}
}

func (m *HardwareFeatures_LightSensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_LightSensor.Unmarshal(m, b)
}
func (m *HardwareFeatures_LightSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_LightSensor.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_LightSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_LightSensor.Merge(m, src)
}
func (m *HardwareFeatures_LightSensor) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_LightSensor.Size(m)
}
func (m *HardwareFeatures_LightSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_LightSensor.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_LightSensor proto.InternalMessageInfo

func (m *HardwareFeatures_LightSensor) GetLidLightsensor() HardwareFeatures_Present {
	if m != nil {
		return m.LidLightsensor
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

func (m *HardwareFeatures_LightSensor) GetBaseLightsensor() HardwareFeatures_Present {
	if m != nil {
		return m.BaseLightsensor
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_Screen struct {
	// Screen since in milli-inches. Would be 0 for systems without screen
	Milliinch *HardwareFeatures_Count `protobuf:"bytes,1,opt,name=milliinch,proto3" json:"milliinch,omitempty"`
	// If touch support is present on system
	TouchSupport         HardwareFeatures_Present `protobuf:"varint,2,opt,name=touch_support,json=touchSupport,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"touch_support,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_Screen) Reset()         { *m = HardwareFeatures_Screen{} }
func (m *HardwareFeatures_Screen) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Screen) ProtoMessage()    {}
func (*HardwareFeatures_Screen) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 12}
}

func (m *HardwareFeatures_Screen) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Screen.Unmarshal(m, b)
}
func (m *HardwareFeatures_Screen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Screen.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Screen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Screen.Merge(m, src)
}
func (m *HardwareFeatures_Screen) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Screen.Size(m)
}
func (m *HardwareFeatures_Screen) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Screen.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Screen proto.InternalMessageInfo

func (m *HardwareFeatures_Screen) GetMilliinch() *HardwareFeatures_Count {
	if m != nil {
		return m.Milliinch
	}
	return nil
}

func (m *HardwareFeatures_Screen) GetTouchSupport() HardwareFeatures_Present {
	if m != nil {
		return m.TouchSupport
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_FormFactor struct {
	// Form factory of system
	FormFactor           HardwareFeatures_FormFactor_FormFactorType `protobuf:"varint,1,opt,name=form_factor,json=formFactor,proto3,enum=chromiumos.config.api.HardwareFeatures_FormFactor_FormFactorType" json:"form_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *HardwareFeatures_FormFactor) Reset()         { *m = HardwareFeatures_FormFactor{} }
func (m *HardwareFeatures_FormFactor) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_FormFactor) ProtoMessage()    {}
func (*HardwareFeatures_FormFactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 13}
}

func (m *HardwareFeatures_FormFactor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_FormFactor.Unmarshal(m, b)
}
func (m *HardwareFeatures_FormFactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_FormFactor.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_FormFactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_FormFactor.Merge(m, src)
}
func (m *HardwareFeatures_FormFactor) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_FormFactor.Size(m)
}
func (m *HardwareFeatures_FormFactor) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_FormFactor.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_FormFactor proto.InternalMessageInfo

func (m *HardwareFeatures_FormFactor) GetFormFactor() HardwareFeatures_FormFactor_FormFactorType {
	if m != nil {
		return m.FormFactor
	}
	return HardwareFeatures_FormFactor_FORM_FACTOR_UNKNOWN
}

type HardwareFeatures_Stylus struct {
	// Type of stylus
	Stylus               HardwareFeatures_Stylus_StylusType `protobuf:"varint,1,opt,name=stylus,proto3,enum=chromiumos.config.api.HardwareFeatures_Stylus_StylusType" json:"stylus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *HardwareFeatures_Stylus) Reset()         { *m = HardwareFeatures_Stylus{} }
func (m *HardwareFeatures_Stylus) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Stylus) ProtoMessage()    {}
func (*HardwareFeatures_Stylus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 14}
}

func (m *HardwareFeatures_Stylus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Stylus.Unmarshal(m, b)
}
func (m *HardwareFeatures_Stylus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Stylus.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Stylus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Stylus.Merge(m, src)
}
func (m *HardwareFeatures_Stylus) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Stylus.Size(m)
}
func (m *HardwareFeatures_Stylus) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Stylus.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Stylus proto.InternalMessageInfo

func (m *HardwareFeatures_Stylus) GetStylus() HardwareFeatures_Stylus_StylusType {
	if m != nil {
		return m.Stylus
	}
	return HardwareFeatures_Stylus_STYLUS_UNKNOWN
}

type HardwareFeatures_Keyboard struct {
	// Type of keyboard present on system
	KeyboardType HardwareFeatures_Keyboard_KeyboardType `protobuf:"varint,1,opt,name=keyboard_type,json=keyboardType,proto3,enum=chromiumos.config.api.HardwareFeatures_Keyboard_KeyboardType" json:"keyboard_type,omitempty"`
	// If keyboard backlight is present on system
	Backlight HardwareFeatures_Present `protobuf:"varint,2,opt,name=backlight,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"backlight,omitempty"`
	// If power button is present on keyboard
	PowerButton          HardwareFeatures_Present `protobuf:"varint,3,opt,name=power_button,json=powerButton,proto3,enum=chromiumos.config.api.HardwareFeatures_Present" json:"power_button,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HardwareFeatures_Keyboard) Reset()         { *m = HardwareFeatures_Keyboard{} }
func (m *HardwareFeatures_Keyboard) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Keyboard) ProtoMessage()    {}
func (*HardwareFeatures_Keyboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 15}
}

func (m *HardwareFeatures_Keyboard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Keyboard.Unmarshal(m, b)
}
func (m *HardwareFeatures_Keyboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Keyboard.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Keyboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Keyboard.Merge(m, src)
}
func (m *HardwareFeatures_Keyboard) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Keyboard.Size(m)
}
func (m *HardwareFeatures_Keyboard) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Keyboard.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Keyboard proto.InternalMessageInfo

func (m *HardwareFeatures_Keyboard) GetKeyboardType() HardwareFeatures_Keyboard_KeyboardType {
	if m != nil {
		return m.KeyboardType
	}
	return HardwareFeatures_Keyboard_KEYBOARD_TYPE_UNKNOWN
}

func (m *HardwareFeatures_Keyboard) GetBacklight() HardwareFeatures_Present {
	if m != nil {
		return m.Backlight
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

func (m *HardwareFeatures_Keyboard) GetPowerButton() HardwareFeatures_Present {
	if m != nil {
		return m.PowerButton
	}
	return HardwareFeatures_PRESENT_UNKNOWN
}

type HardwareFeatures_Memory struct {
	Profile              *Component_Memory_Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *HardwareFeatures_Memory) Reset()         { *m = HardwareFeatures_Memory{} }
func (m *HardwareFeatures_Memory) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Memory) ProtoMessage()    {}
func (*HardwareFeatures_Memory) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 16}
}

func (m *HardwareFeatures_Memory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Memory.Unmarshal(m, b)
}
func (m *HardwareFeatures_Memory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Memory.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Memory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Memory.Merge(m, src)
}
func (m *HardwareFeatures_Memory) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Memory.Size(m)
}
func (m *HardwareFeatures_Memory) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Memory.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Memory proto.InternalMessageInfo

func (m *HardwareFeatures_Memory) GetProfile() *Component_Memory_Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type HardwareFeatures_Fingerprint struct {
	// Location of fingerprint sensor
	Location HardwareFeatures_Fingerprint_Location `protobuf:"varint,1,opt,name=location,proto3,enum=chromiumos.config.api.HardwareFeatures_Fingerprint_Location" json:"location,omitempty"`
	// Fingerprint board used.
	Board                string   `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HardwareFeatures_Fingerprint) Reset()         { *m = HardwareFeatures_Fingerprint{} }
func (m *HardwareFeatures_Fingerprint) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Fingerprint) ProtoMessage()    {}
func (*HardwareFeatures_Fingerprint) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 17}
}

func (m *HardwareFeatures_Fingerprint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Fingerprint.Unmarshal(m, b)
}
func (m *HardwareFeatures_Fingerprint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Fingerprint.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Fingerprint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Fingerprint.Merge(m, src)
}
func (m *HardwareFeatures_Fingerprint) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Fingerprint.Size(m)
}
func (m *HardwareFeatures_Fingerprint) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Fingerprint.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Fingerprint proto.InternalMessageInfo

func (m *HardwareFeatures_Fingerprint) GetLocation() HardwareFeatures_Fingerprint_Location {
	if m != nil {
		return m.Location
	}
	return HardwareFeatures_Fingerprint_LOCATION_UNKNOWN
}

func (m *HardwareFeatures_Fingerprint) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

type HardwareFeatures_Storage struct {
	StorageType          HardwareFeatures_Storage_StorageType `protobuf:"varint,1,opt,name=storage_type,json=storageType,proto3,enum=chromiumos.config.api.HardwareFeatures_Storage_StorageType" json:"storage_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *HardwareFeatures_Storage) Reset()         { *m = HardwareFeatures_Storage{} }
func (m *HardwareFeatures_Storage) String() string { return proto.CompactTextString(m) }
func (*HardwareFeatures_Storage) ProtoMessage()    {}
func (*HardwareFeatures_Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eabfd155197d7c8, []int{1, 18}
}

func (m *HardwareFeatures_Storage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareFeatures_Storage.Unmarshal(m, b)
}
func (m *HardwareFeatures_Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareFeatures_Storage.Marshal(b, m, deterministic)
}
func (m *HardwareFeatures_Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareFeatures_Storage.Merge(m, src)
}
func (m *HardwareFeatures_Storage) XXX_Size() int {
	return xxx_messageInfo_HardwareFeatures_Storage.Size(m)
}
func (m *HardwareFeatures_Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareFeatures_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareFeatures_Storage proto.InternalMessageInfo

func (m *HardwareFeatures_Storage) GetStorageType() HardwareFeatures_Storage_StorageType {
	if m != nil {
		return m.StorageType
	}
	return HardwareFeatures_Storage_STORAGE_TYPE_UNKNOWN
}

func init() {
	proto.RegisterEnum("chromiumos.config.api.Topology_Type", Topology_Type_name, Topology_Type_value)
	proto.RegisterEnum("chromiumos.config.api.HardwareFeatures_Present", HardwareFeatures_Present_name, HardwareFeatures_Present_value)
	proto.RegisterEnum("chromiumos.config.api.HardwareFeatures_Audio_AudioCodec", HardwareFeatures_Audio_AudioCodec_name, HardwareFeatures_Audio_AudioCodec_value)
	proto.RegisterEnum("chromiumos.config.api.HardwareFeatures_FormFactor_FormFactorType", HardwareFeatures_FormFactor_FormFactorType_name, HardwareFeatures_FormFactor_FormFactorType_value)
	proto.RegisterEnum("chromiumos.config.api.HardwareFeatures_Stylus_StylusType", HardwareFeatures_Stylus_StylusType_name, HardwareFeatures_Stylus_StylusType_value)
	proto.RegisterEnum("chromiumos.config.api.HardwareFeatures_Keyboard_KeyboardType", HardwareFeatures_Keyboard_KeyboardType_name, HardwareFeatures_Keyboard_KeyboardType_value)
	proto.RegisterEnum("chromiumos.config.api.HardwareFeatures_Fingerprint_Location", HardwareFeatures_Fingerprint_Location_name, HardwareFeatures_Fingerprint_Location_value)
	proto.RegisterEnum("chromiumos.config.api.HardwareFeatures_Storage_StorageType", HardwareFeatures_Storage_StorageType_name, HardwareFeatures_Storage_StorageType_value)
	proto.RegisterType((*Topology)(nil), "chromiumos.config.api.Topology")
	proto.RegisterMapType((map[string]string)(nil), "chromiumos.config.api.Topology.DescriptionEntry")
	proto.RegisterType((*HardwareFeatures)(nil), "chromiumos.config.api.HardwareFeatures")
	proto.RegisterType((*HardwareFeatures_Count)(nil), "chromiumos.config.api.HardwareFeatures.Count")
	proto.RegisterType((*HardwareFeatures_UsbC)(nil), "chromiumos.config.api.HardwareFeatures.UsbC")
	proto.RegisterType((*HardwareFeatures_UsbA)(nil), "chromiumos.config.api.HardwareFeatures.UsbA")
	proto.RegisterType((*HardwareFeatures_Lte)(nil), "chromiumos.config.api.HardwareFeatures.Lte")
	proto.RegisterType((*HardwareFeatures_Hdmi)(nil), "chromiumos.config.api.HardwareFeatures.Hdmi")
	proto.RegisterType((*HardwareFeatures_FirmwareConfiguration)(nil), "chromiumos.config.api.HardwareFeatures.FirmwareConfiguration")
	proto.RegisterType((*HardwareFeatures_Audio)(nil), "chromiumos.config.api.HardwareFeatures.Audio")
	proto.RegisterType((*HardwareFeatures_Camera)(nil), "chromiumos.config.api.HardwareFeatures.Camera")
	proto.RegisterType((*HardwareFeatures_Accelerometer)(nil), "chromiumos.config.api.HardwareFeatures.Accelerometer")
	proto.RegisterType((*HardwareFeatures_Gyroscope)(nil), "chromiumos.config.api.HardwareFeatures.Gyroscope")
	proto.RegisterType((*HardwareFeatures_Magnetometer)(nil), "chromiumos.config.api.HardwareFeatures.Magnetometer")
	proto.RegisterType((*HardwareFeatures_LightSensor)(nil), "chromiumos.config.api.HardwareFeatures.LightSensor")
	proto.RegisterType((*HardwareFeatures_Screen)(nil), "chromiumos.config.api.HardwareFeatures.Screen")
	proto.RegisterType((*HardwareFeatures_FormFactor)(nil), "chromiumos.config.api.HardwareFeatures.FormFactor")
	proto.RegisterType((*HardwareFeatures_Stylus)(nil), "chromiumos.config.api.HardwareFeatures.Stylus")
	proto.RegisterType((*HardwareFeatures_Keyboard)(nil), "chromiumos.config.api.HardwareFeatures.Keyboard")
	proto.RegisterType((*HardwareFeatures_Memory)(nil), "chromiumos.config.api.HardwareFeatures.Memory")
	proto.RegisterType((*HardwareFeatures_Fingerprint)(nil), "chromiumos.config.api.HardwareFeatures.Fingerprint")
	proto.RegisterType((*HardwareFeatures_Storage)(nil), "chromiumos.config.api.HardwareFeatures.Storage")
}

func init() { proto.RegisterFile("api/topology.proto", fileDescriptor_8eabfd155197d7c8) }

var fileDescriptor_8eabfd155197d7c8 = []byte{
	// 1773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xdd, 0x8e, 0xe3, 0x48,
	0x15, 0xc7, 0x71, 0x92, 0xce, 0xc7, 0x71, 0x92, 0xae, 0xa9, 0x99, 0x01, 0x6f, 0x24, 0xa4, 0x51,
	0x58, 0x89, 0x16, 0x1f, 0xe9, 0xa5, 0x97, 0x45, 0x03, 0xbb, 0x83, 0x70, 0xbb, 0x2b, 0xdd, 0x51,
	0x3b, 0x76, 0xa6, 0xe2, 0xf4, 0x74, 0x0f, 0xab, 0xb5, 0x1c, 0xc7, 0x49, 0x5b, 0x9d, 0xc4, 0x91,
	0xed, 0x30, 0xca, 0x1b, 0xac, 0xc4, 0x0b, 0x70, 0x8f, 0xc4, 0x0d, 0x37, 0x5c, 0xc2, 0x35, 0x37,
	0xdc, 0xf0, 0x16, 0xbc, 0x03, 0x17, 0x48, 0x08, 0x55, 0xb9, 0x12, 0x3b, 0xcd, 0xac, 0x48, 0xc2,
	0xdc, 0x74, 0xfb, 0x94, 0xeb, 0xff, 0x73, 0x9d, 0x53, 0x95, 0x53, 0xa7, 0x0a, 0xb0, 0xb3, 0xf0,
	0x4f, 0xe3, 0x60, 0x11, 0x4c, 0x83, 0xc9, 0xaa, 0xb5, 0x08, 0x83, 0x38, 0xc0, 0xcf, 0xdd, 0xfb,
	0x30, 0x98, 0xf9, 0xcb, 0x59, 0x10, 0xb5, 0xdc, 0x60, 0x3e, 0xf6, 0x27, 0x2d, 0x67, 0xe1, 0x37,
	0x9e, 0xb2, 0xae, 0x6e, 0x30, 0x5b, 0x04, 0x73, 0x6f, 0x1e, 0x27, 0x7d, 0x9b, 0xff, 0x2c, 0x40,
	0xd9, 0x12, 0x72, 0x5c, 0x87, 0x9c, 0x3f, 0x52, 0xa4, 0x17, 0xd2, 0x49, 0x85, 0xe6, 0xfc, 0x11,
	0x7e, 0x09, 0x85, 0x78, 0xb5, 0xf0, 0x94, 0xdc, 0x0b, 0xe9, 0xa4, 0x7e, 0xf6, 0x71, 0xeb, 0xbd,
	0xdc, 0xd6, 0x5a, 0xde, 0xb2, 0x56, 0x0b, 0x8f, 0x72, 0x05, 0xa6, 0x20, 0x8f, 0xbc, 0xc8, 0x0d,
	0xfd, 0x45, 0xec, 0x07, 0x73, 0x25, 0xff, 0x22, 0x7f, 0x22, 0x9f, 0x7d, 0xf2, 0xbf, 0x00, 0x17,
	0xa9, 0x84, 0xcc, 0xe3, 0x70, 0x45, 0xb3, 0x10, 0x4c, 0x01, 0xdd, 0x3b, 0xe1, 0xe8, 0x9d, 0x13,
	0x7a, 0xf6, 0xd8, 0x73, 0xe2, 0x65, 0xe8, 0x29, 0x85, 0x17, 0xd2, 0x89, 0x7c, 0xf6, 0xfd, 0x6f,
	0x00, 0x5f, 0x89, 0xee, 0xed, 0xa4, 0x77, 0x44, 0x8f, 0xef, 0xb7, 0x5b, 0x1a, 0xbf, 0x04, 0xf4,
	0xf8, 0xa3, 0x18, 0x41, 0xfe, 0xc1, 0x5b, 0x89, 0x30, 0xb0, 0x47, 0xfc, 0x0c, 0x8e, 0x7e, 0xe3,
	0x4c, 0x97, 0x49, 0x20, 0x2a, 0x34, 0x31, 0x7e, 0x91, 0x7b, 0x29, 0x35, 0xff, 0x9c, 0x83, 0x02,
	0x73, 0x1b, 0x23, 0xa8, 0x5a, 0x77, 0x3d, 0x62, 0x0f, 0x8c, 0x6b, 0xc3, 0x7c, 0x63, 0xa0, 0x6f,
	0x61, 0x80, 0x62, 0x5f, 0xa3, 0x84, 0x18, 0x48, 0xc2, 0xc7, 0x20, 0xb7, 0x4d, 0xda, 0xb5, 0xdb,
	0xaa, 0x66, 0x99, 0x14, 0xe5, 0x70, 0x05, 0x8e, 0xd4, 0xc1, 0x45, 0xc7, 0x44, 0x79, 0xde, 0xcf,
	0xba, 0xd3, 0x07, 0x7d, 0x54, 0xc0, 0x55, 0x28, 0x5f, 0x93, 0xbb, 0x73, 0x53, 0xa5, 0x17, 0xe8,
	0x08, 0xcb, 0x50, 0xb2, 0xae, 0x08, 0xed, 0xaa, 0x3a, 0x2a, 0xb2, 0x6e, 0x9a, 0xda, 0x25, 0x54,
	0x45, 0x25, 0x7c, 0x02, 0x1f, 0xab, 0x9a, 0x46, 0x74, 0x42, 0xcd, 0x2e, 0xb1, 0x08, 0xb5, 0x2f,
	0xef, 0xa8, 0xd9, 0xd7, 0xcc, 0x1e, 0xb1, 0xbb, 0xea, 0xa5, 0x41, 0xac, 0xa4, 0x19, 0x95, 0xf9,
	0x87, 0x3b, 0xc6, 0x25, 0xa1, 0x3d, 0xda, 0x31, 0x2c, 0x54, 0xc1, 0xcf, 0x00, 0xf5, 0xa8, 0x79,
	0xdb, 0xe9, 0x76, 0xac, 0x3b, 0xbb, 0x4f, 0x8c, 0xbe, 0x49, 0x11, 0x60, 0x0c, 0xf5, 0x0b, 0x75,
	0x70, 0x79, 0xc5, 0x58, 0xc9, 0xd7, 0x65, 0xac, 0xc0, 0x33, 0xc3, 0x34, 0xec, 0x1b, 0x53, 0x57,
	0xad, 0x8e, 0x4e, 0xec, 0xbe, 0x65, 0x52, 0xf5, 0x92, 0xa0, 0x2a, 0x2e, 0x41, 0x9e, 0xaa, 0x5d,
	0x54, 0xc3, 0x65, 0x28, 0xbc, 0xe9, 0xb4, 0x3b, 0xa8, 0x8e, 0x6b, 0x50, 0xd1, 0x2d, 0x22, 0xb4,
	0xc7, 0xcc, 0xec, 0x5f, 0xd8, 0x94, 0xa8, 0x17, 0x84, 0x22, 0x84, 0x9f, 0xc2, 0x71, 0xd7, 0x64,
	0xae, 0xf0, 0xf7, 0xf6, 0xa0, 0x7f, 0x8e, 0x9e, 0x34, 0xff, 0xfd, 0x3d, 0x40, 0x8f, 0x27, 0x08,
	0xab, 0x70, 0xb4, 0x8c, 0x86, 0xb6, 0xcb, 0xa3, 0x2f, 0x9f, 0xfd, 0x68, 0xc7, 0x89, 0x6d, 0x0d,
	0xa2, 0xa1, 0x46, 0x0b, 0xcb, 0x68, 0xa8, 0xad, 0x11, 0x0e, 0x9f, 0xac, 0xfd, 0x10, 0x2a, 0x47,
	0xa8, 0xf8, 0x15, 0xe4, 0xa7, 0xb1, 0xa7, 0xe4, 0x39, 0xe0, 0x87, 0xbb, 0x02, 0xf4, 0xd8, 0xa3,
	0x4c, 0x87, 0x7f, 0x05, 0x85, 0xfb, 0xd1, 0xcc, 0x17, 0x8b, 0x73, 0xe7, 0x01, 0x5c, 0x8d, 0x66,
	0x3e, 0xe5, 0x4a, 0xfc, 0x16, 0x2a, 0xe3, 0x77, 0x76, 0xd2, 0x59, 0x39, 0xe2, 0x98, 0x57, 0xbb,
	0x62, 0xda, 0x7e, 0x38, 0x63, 0x0d, 0x1a, 0xef, 0xb3, 0x0c, 0x1d, 0xb6, 0xb2, 0x69, 0x79, 0xfc,
	0x2e, 0x69, 0xc0, 0x1a, 0x1c, 0x39, 0xcb, 0x91, 0x1f, 0x28, 0x45, 0xce, 0xfd, 0xf1, 0xae, 0x5c,
	0x95, 0x89, 0x68, 0xa2, 0xc5, 0x6d, 0x28, 0xba, 0xce, 0xcc, 0x0b, 0x1d, 0xa5, 0xc4, 0x29, 0xad,
	0x5d, 0x29, 0x1a, 0x57, 0x51, 0xa1, 0xc6, 0xbf, 0x86, 0x9a, 0xe3, 0xba, 0xde, 0xd4, 0x0b, 0x83,
	0x99, 0x17, 0x7b, 0xa1, 0x52, 0xe6, 0xb8, 0xcf, 0x76, 0x1e, 0x54, 0x56, 0x4c, 0xb7, 0x59, 0xd8,
	0x84, 0xca, 0x64, 0x15, 0x06, 0x91, 0x1b, 0x2c, 0x3c, 0xa5, 0xc2, 0xc1, 0x3f, 0xd9, 0x15, 0x7c,
	0xb9, 0x16, 0xd2, 0x94, 0x81, 0x6f, 0xa1, 0x3a, 0x73, 0x26, 0x73, 0x2f, 0x16, 0x83, 0x05, 0xce,
	0xfc, 0xe9, 0xae, 0xcc, 0x6e, 0x46, 0x4b, 0xb7, 0x48, 0xf8, 0x06, 0xaa, 0x53, 0x7f, 0x72, 0x1f,
	0xdb, 0x91, 0x37, 0x8f, 0x82, 0x50, 0x91, 0x39, 0xf9, 0xd3, 0x9d, 0x97, 0x1e, 0xd3, 0xf6, 0xb9,
	0x94, 0xca, 0xd3, 0xd4, 0x60, 0xf3, 0x14, 0xb9, 0xa1, 0xe7, 0xcd, 0x95, 0xea, 0x7e, 0xf3, 0xd4,
	0xe7, 0x2a, 0x2a, 0xd4, 0xb8, 0x0f, 0xf2, 0x38, 0x08, 0x67, 0xf6, 0xd8, 0x71, 0xe3, 0x20, 0x54,
	0x6a, 0x1c, 0x76, 0xb6, 0xf3, 0x92, 0x0c, 0xc2, 0x59, 0x9b, 0x2b, 0x29, 0x8c, 0x37, 0xcf, 0x7c,
	0x70, 0xf1, 0x6a, 0xba, 0x8c, 0x94, 0xfa, 0x9e, 0x83, 0xe3, 0x2a, 0x2a, 0xd4, 0x58, 0x87, 0xf2,
	0x83, 0xb7, 0x1a, 0x06, 0x4e, 0x38, 0x52, 0x8e, 0x39, 0xe9, 0x93, 0x5d, 0x49, 0xd7, 0x42, 0x47,
	0x37, 0x04, 0x36, 0xaa, 0x99, 0x37, 0x0b, 0xc2, 0x95, 0x82, 0xf6, 0x1b, 0x55, 0x97, 0xab, 0xa8,
	0x50, 0xe3, 0x01, 0xc8, 0x63, 0x7f, 0x3e, 0xf1, 0xc2, 0x45, 0xe8, 0xcf, 0x63, 0xe5, 0xc9, 0x7e,
	0x33, 0xda, 0x4e, 0xa5, 0x34, 0xcb, 0xc1, 0x1d, 0x28, 0x45, 0x71, 0x10, 0x3a, 0x13, 0x4f, 0xc1,
	0x1c, 0x79, 0xba, 0x7b, 0xd4, 0xb8, 0x8c, 0xae, 0xf5, 0x8d, 0xef, 0xc2, 0x91, 0x16, 0x2c, 0xe7,
	0x71, 0xba, 0xbf, 0xb1, 0xac, 0x5b, 0x13, 0xfb, 0x5b, 0xe3, 0x1a, 0x0a, 0x2c, 0xad, 0xb2, 0x84,
	0xe1, 0xb2, 0x6e, 0x22, 0x27, 0xef, 0x9c, 0x30, 0x38, 0x9b, 0x26, 0x5a, 0x01, 0x53, 0x3f, 0x0c,
	0xac, 0x07, 0x79, 0x3d, 0xf6, 0x58, 0x28, 0x16, 0xa1, 0x17, 0x79, 0x82, 0x56, 0xdf, 0x3d, 0x14,
	0xbd, 0x44, 0x46, 0xd7, 0xfa, 0xc6, 0x6b, 0x28, 0xb0, 0xf4, 0xfb, 0x21, 0x91, 0x2a, 0x3c, 0x7f,
	0x6f, 0x2a, 0x7e, 0x7f, 0xb4, 0x31, 0x86, 0xc2, 0xcc, 0x89, 0x1e, 0xf8, 0xae, 0x55, 0xa3, 0xfc,
	0xb9, 0xf1, 0x27, 0x09, 0x8e, 0x78, 0xda, 0xc5, 0x77, 0x20, 0xf3, 0xc4, 0x6b, 0xbb, 0xc1, 0xc8,
	0x73, 0xc5, 0xd8, 0x5e, 0xee, 0x95, 0xba, 0x93, 0xbf, 0x1a, 0xd3, 0x53, 0x70, 0x36, 0xcf, 0x4d,
	0x1d, 0x20, 0x7d, 0x83, 0xbf, 0x03, 0x4f, 0x79, 0x61, 0x62, 0x6b, 0xe6, 0x05, 0xd1, 0xb6, 0xcb,
	0x19, 0x6a, 0x7d, 0xf6, 0xb3, 0x97, 0x67, 0x48, 0x62, 0x65, 0x8a, 0xaa, 0x6b, 0xcc, 0xe8, 0xa0,
	0x1c, 0x2b, 0x53, 0x84, 0x85, 0xf2, 0x8d, 0x7f, 0x49, 0x50, 0x4c, 0x72, 0x3c, 0x1e, 0x40, 0xdd,
	0xb1, 0x17, 0xce, 0xdc, 0x9b, 0xda, 0x62, 0xaf, 0x38, 0x30, 0xa4, 0x55, 0xa7, 0xc7, 0x28, 0x29,
	0x76, 0xb8, 0x8d, 0xcd, 0x1d, 0x88, 0x1d, 0x66, 0xb1, 0x9b, 0x85, 0x99, 0xff, 0x3f, 0x16, 0xe6,
	0xdf, 0x25, 0xa8, 0x6d, 0x6d, 0x49, 0xf8, 0x4b, 0x78, 0x32, 0xf5, 0x47, 0xf6, 0xf6, 0x26, 0x77,
	0x60, 0x1c, 0xd0, 0xd4, 0x1f, 0x6d, 0xd3, 0xbf, 0x02, 0x3c, 0x74, 0x22, 0xef, 0x11, 0xfe, 0xc0,
	0x78, 0x3c, 0x61, 0xa8, 0x2d, 0x7e, 0xe3, 0x2f, 0x12, 0x54, 0x36, 0x3b, 0x21, 0xb6, 0xa0, 0xc6,
	0x7c, 0x99, 0x84, 0x2b, 0xb1, 0xa7, 0x1e, 0x3a, 0x9f, 0x53, 0x7f, 0x74, 0xb9, 0x86, 0xe0, 0x1b,
	0xa8, 0x73, 0x1f, 0x52, 0xec, 0x81, 0xe3, 0xaf, 0x31, 0xcc, 0x86, 0xdb, 0xf8, 0x9b, 0x04, 0xd5,
	0xec, 0x8e, 0x8b, 0xdf, 0x02, 0x0b, 0xa0, 0xbd, 0xb5, 0x83, 0x1f, 0xe8, 0xc1, 0xf1, 0xd4, 0x1f,
	0x6d, 0xb1, 0xbf, 0x04, 0x1e, 0xbd, 0x6d, 0xf8, 0x81, 0x7e, 0x20, 0x46, 0xca, 0xd2, 0x1b, 0x7f,
	0x95, 0x40, 0xce, 0x6c, 0xf1, 0xf8, 0x16, 0xd8, 0x00, 0x6c, 0xbe, 0xd1, 0x8b, 0x82, 0xe1, 0x40,
	0x47, 0xea, 0x53, 0x7f, 0xa4, 0xa7, 0x18, 0x16, 0x23, 0xee, 0x47, 0x16, 0x7d, 0xa0, 0x1b, 0xc7,
	0x0c, 0x94, 0x61, 0x37, 0xfe, 0x28, 0x41, 0x31, 0x29, 0x2b, 0xf0, 0x35, 0x54, 0x66, 0xfe, 0x74,
	0xea, 0xfb, 0x73, 0xf7, 0xfe, 0xb0, 0x9d, 0x20, 0xd5, 0xb3, 0x65, 0x19, 0x07, 0x4b, 0xf7, 0xde,
	0x8e, 0x96, 0x8b, 0x45, 0x10, 0xc6, 0x07, 0xe7, 0x03, 0x4e, 0xe9, 0x27, 0x90, 0xc6, 0x6f, 0x73,
	0x00, 0x69, 0xdd, 0x82, 0x87, 0xdb, 0x05, 0x50, 0x12, 0x6e, 0x75, 0xff, 0x02, 0x28, 0xf3, 0xc8,
	0x8f, 0xcb, 0x99, 0x7a, 0xa8, 0xf9, 0x3b, 0x09, 0xea, 0xdb, 0xaf, 0x59, 0x3a, 0xce, 0x1c, 0x1c,
	0x33, 0xe9, 0xb8, 0x06, 0x15, 0x4d, 0x57, 0xbb, 0xfd, 0x2b, 0xa2, 0xeb, 0xc9, 0x01, 0x53, 0x33,
	0x8d, 0x1b, 0x42, 0xad, 0xce, 0xb9, 0x4e, 0x50, 0x0e, 0xd7, 0x01, 0x2e, 0x88, 0xa5, 0x6a, 0x57,
	0x2a, 0xb3, 0xf3, 0xcc, 0xd6, 0xae, 0xd8, 0x71, 0xf1, 0x5c, 0xed, 0x13, 0x54, 0xe0, 0xfa, 0xc4,
	0x36, 0x6f, 0xd1, 0x51, 0xc6, 0xec, 0x58, 0xa8, 0xc8, 0x71, 0xdc, 0xec, 0xeb, 0xaa, 0x45, 0x50,
	0xa9, 0xf1, 0x7b, 0x36, 0x77, 0x49, 0xb5, 0xf5, 0x7a, 0x53, 0xb5, 0x25, 0x41, 0xf8, 0xf9, 0x7e,
	0x55, 0x9b, 0xf8, 0xc7, 0x9d, 0x17, 0xa0, 0x66, 0x1b, 0x20, 0x6d, 0x65, 0x87, 0xd1, 0xe4, 0x40,
	0x9c, 0x71, 0xb7, 0x0c, 0x05, 0xc3, 0x34, 0x48, 0xb2, 0xf7, 0x74, 0x0c, 0x8b, 0x50, 0x43, 0xd5,
	0x51, 0x8e, 0x59, 0xe4, 0x56, 0x58, 0xf9, 0xc6, 0x3f, 0x72, 0x50, 0x5e, 0x57, 0x74, 0x78, 0x08,
	0xb5, 0x75, 0x4d, 0x67, 0xf3, 0x5b, 0x8c, 0x64, 0xb8, 0xaf, 0xf6, 0x2d, 0x0d, 0x37, 0x0f, 0x7c,
	0xc8, 0xd5, 0x87, 0x8c, 0x85, 0xbb, 0x50, 0x19, 0x3a, 0xee, 0x03, 0xff, 0xb5, 0x1c, 0xba, 0xec,
	0x52, 0x02, 0xa6, 0x50, 0x5d, 0x04, 0xef, 0xbc, 0xd0, 0x1e, 0x2e, 0xe3, 0x98, 0x5f, 0x9b, 0x1c,
	0x44, 0x94, 0x39, 0xe4, 0x9c, 0x33, 0x9a, 0xaf, 0xa1, 0x9a, 0x75, 0x00, 0x7f, 0x04, 0xcf, 0xd7,
	0x57, 0x0c, 0xf6, 0xa3, 0x1b, 0x8b, 0x6c, 0x68, 0xa5, 0x4d, 0xc8, 0xff, 0x6b, 0x2d, 0x35, 0xfa,
	0x50, 0x4c, 0x6a, 0xdd, 0xa4, 0x5c, 0x0a, 0xc6, 0xfe, 0xd4, 0x13, 0xbf, 0xe2, 0x6f, 0x1a, 0xab,
	0xb6, 0xb9, 0x76, 0x4a, 0x94, 0xad, 0x5e, 0x22, 0xa3, 0x6b, 0x7d, 0xe3, 0xeb, 0x1c, 0xc8, 0x99,
	0xa2, 0x17, 0xdf, 0x42, 0x79, 0x1a, 0xb8, 0xbc, 0x62, 0x12, 0x33, 0xf7, 0xc5, 0x01, 0xb5, 0x73,
	0x4b, 0x17, 0x0c, 0xba, 0xa1, 0xb1, 0xfa, 0x2b, 0x39, 0x2b, 0x88, 0xdb, 0x1c, 0x6e, 0x34, 0xbf,
	0x96, 0xa0, 0xac, 0xa7, 0x5d, 0x90, 0x6e, 0x6a, 0xaa, 0xd5, 0x31, 0x8d, 0x4c, 0x7c, 0x3e, 0x82,
	0xe7, 0x3d, 0xf3, 0x0d, 0xa1, 0xf6, 0xf9, 0xc0, 0xb2, 0x4c, 0xc3, 0xb6, 0xcc, 0x9e, 0xad, 0x93,
	0xb6, 0x85, 0x24, 0xac, 0xc0, 0xb3, 0x4d, 0x54, 0xcf, 0x4d, 0xcb, 0x32, 0xbb, 0xc9, 0x9b, 0xdc,
	0x56, 0xbc, 0xc5, 0x1b, 0xda, 0xb9, 0xbc, 0xb2, 0x50, 0x1e, 0x7f, 0x1b, 0x70, 0x3a, 0x15, 0x66,
	0x4f, 0xb4, 0x17, 0x1a, 0x7f, 0x90, 0xa0, 0x24, 0x8a, 0x75, 0xfc, 0x15, 0x54, 0x45, 0xb9, 0x9e,
	0x5d, 0xc4, 0x9f, 0xef, 0x59, 0xf3, 0xaf, 0xff, 0xf3, 0x25, 0x2c, 0x47, 0xa9, 0xd1, 0xfc, 0x1c,
	0xe4, 0xcc, 0x3b, 0xe6, 0x87, 0xb8, 0xe7, 0x79, 0xbc, 0x38, 0xca, 0x50, 0x20, 0xdd, 0xae, 0x26,
	0x16, 0xc6, 0x4d, 0x97, 0xa0, 0x5c, 0xf3, 0x0b, 0x28, 0x89, 0x35, 0x87, 0x9f, 0xc2, 0x71, 0x8f,
	0x92, 0x3e, 0x31, 0xac, 0x8c, 0x46, 0x86, 0x92, 0x68, 0x4c, 0x52, 0x94, 0x61, 0x5a, 0xf6, 0xba,
	0x21, 0x77, 0xfe, 0x83, 0xb7, 0x27, 0x93, 0x60, 0xe3, 0x48, 0x2b, 0x08, 0x27, 0xa7, 0xa9, 0x57,
	0xa7, 0x89, 0x57, 0xa7, 0x93, 0xe0, 0xd4, 0x59, 0xf8, 0xc3, 0x22, 0xbf, 0xad, 0xfc, 0xf4, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x63, 0xa8, 0xc7, 0x8d, 0xef, 0x14, 0x00, 0x00,
}
